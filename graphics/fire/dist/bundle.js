!function(t){var e={};function i(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(r,n,function(e){return t[e]}.bind(null,n));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/",i(i.s=0)}([function(t,e,i){"use strict";i.r(e),i.d(e,"runFire",(function(){return p}));const r=document.getElementById("fire").getContext("2d"),n=r.createImageData(1500,400),s=document.getElementById("fps"),a=document.getElementById("selectedOption"),o=new class{constructor(){this.width=1500,this.height=400,this.fire=new Uint8Array(this.width*this.height*4).fill(0)}updateScreen(){for(let t=0;t<this.width;t++){const e=this.width*(this.height-2)+t<<2;this.fire[e]=Math.floor(255*Math.random()),this.fire[e+1]=0,this.fire[e+2]=0,this.fire[e+3]=255}for(let t=0;t<this.height-1;t++)for(let e=0;e<this.width;e++){const i=t*this.width+e<<2,r=(t+1)*this.width+(e-1+this.width)%this.width<<2,n=(t+1)*this.width+(e+this.width)%this.width<<2,s=(t+1)*this.width+(e+1+this.width)%this.width<<2,a=(t+2)*this.width+(e+this.width)%this.width<<2;this.fire[i]=Math.floor((this.fire[r]+this.fire[n]+this.fire[s]+this.fire[a])/4.01),this.fire[i+1]=0,this.fire[i+2]=0,this.fire[i+3]=255}}getFire(){return this.fire}clear(){this.fire=new Uint8Array(this.width*this.height*4).fill(0)}};let h,f,c,u,l=0,d=0,w=0;const m=()=>{a.value!==c&&(f&&f.clear(),f="Javascript"===a.value?o:h.instance.exports,c=a.value),setTimeout(m,0),f.updateScreen();const t="Javascript"===a.value?f.getFire():u;n.data.set(t),r.putImageData(n,0,0),(()=>{const t=performance.now();l+=1,d>=1e3?(s.innerHTML=Math.floor(1e3*l/d),l=0,d=0):d+=t-w,w=t})()},p=async()=>{await(async()=>{const t={env:{abort(t,e,i,r){console.error(`Abort called at ${e}:${i}:${r}`)},seed:()=>1e64*Math.random()}};try{const e=fetch("build/optimized.wasm");h="function"==typeof WebAssembly.instantiateStreaming?await WebAssembly.instantiateStreaming(e,t):await WebAssembly.instantiate(await(await e).arrayBuffer(),t);const{memory:i,getDataBuffer:r}=h.instance.exports,n=r();u=new Uint8Array(i.buffer,n,24e5)}catch(t){console.error("Can't instantiate WebAssembly module.\n",t)}})(),h&&m()};p()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,