!function(t){var e={};function r(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)r.d(n,a,function(e){return t[e]}.bind(null,a));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="/",r(r.s=0)}([function(t,e,r){"use strict";r.r(e),r.d(e,"runStarfield",(function(){return g}));const n=document.getElementById("starfield"),a=n.getContext("2d"),o=document.getElementById("fps"),s=document.getElementById("selectedOption"),i=new class{constructor(){this.stars=[]}addStar(){if(this.stars.length<750){const t={x:0,y:0,vx:10*Math.random()-5,vy:10*Math.random()-5};this.stars.push(t)}}updateStars(){const t=this.stars.length;for(let e=0;e<t;e++){const t=this.stars[e];t.x=t.x+t.vx,t.y=t.y+t.vy,(t.x>400||t.x<-400)&&(t.x=0,t.y=0),t.color=Math.floor((Math.abs(t.x)+Math.abs(t.y))/5)}}getStar(t){const{x:e,y:r,color:n}=this.stars[t];return[e,r,n]}clear(){this.stars=[]}};let l,c,u,f,d,y=0,b=0,m=0,p=0;const h=()=>{s.value!==u&&(c&&(c.clear(),y=0),c="Javascript"===s.value?i:l.instance.exports,u=s.value),setTimeout(h,0),a.clearRect(0,0,n.width,n.height),y<750&&(c.addStar(),y++),c.updateStars();for(let t=0;t<y;t++){let e=0,r=0,n=0;"Javascript"===s.value?[e,r,n]=c.getStar(t):(c.setStar(t),e=d[0],r=d[1],n=d[2]),a.fillStyle=`rgb(${n},${n},${n})`,a.beginPath(),a.arc(400+e,400+r,Math.abs(r/200+t/300),0,2*Math.PI),a.fill()}(()=>{const t=performance.now();b+=1,m>=1e3?(o.innerHTML=Math.floor(1e3*b/m),b=0,m=0):m+=t-p,p=t})()},g=async()=>{await(async()=>{const t={env:{abort(t,e,r,n){console.error(`Abort called at ${e}:${r}:${n}`)},seed:()=>1e64*Math.random()}};try{const e=fetch("build/optimized.wasm");l="function"==typeof WebAssembly.instantiateStreaming?await WebAssembly.instantiateStreaming(e,t):await WebAssembly.instantiate(await(await e).arrayBuffer(),t),f=l.instance.exports.memory,d=new Float64Array(f.buffer)}catch(t){console.error("Can't instantiate WebAssembly module.\n",t)}})(),l&&h()};g()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,