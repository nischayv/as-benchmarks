var EntryPoint=function(t){var e={};function n(a){if(e[a])return e[a].exports;var i=e[a]={i:a,l:!1,exports:{}};return t[a].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,a){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:a})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(a,i,function(e){return t[e]}.bind(null,i));return a},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=51)}([function(t,e,n){"use strict";n.d(e,"c",(function(){return o})),n.d(e,"h",(function(){return s})),n.d(e,"i",(function(){return l})),n.d(e,"k",(function(){return c})),n.d(e,"m",(function(){return u})),n.d(e,"d",(function(){return d})),n.d(e,"j",(function(){return h})),n.d(e,"l",(function(){return f})),n.d(e,"e",(function(){return g})),n.d(e,"f",(function(){return m})),n.d(e,"g",(function(){return p})),n.d(e,"r",(function(){return b})),n.d(e,"p",(function(){return v})),n.d(e,"n",(function(){return y})),n.d(e,"o",(function(){return x})),n.d(e,"q",(function(){return _})),n.d(e,"s",(function(){return O})),n.d(e,"a",(function(){return w})),n.d(e,"b",(function(){return k})),n.d(e,"t",(function(){return M}));var a,i=n(8),r=n(18),o=/\d/,s=/\d\d/,l=/\d{3}/,c=/\d{4}/,u=/[+-]?\d{6}/,d=/\d\d?/,h=/\d\d\d\d?/,f=/\d\d\d\d\d\d?/,g=/\d{1,3}/,m=/\d{1,4}/,p=/[+-]?\d{1,6}/,b=/\d+/,v=/[+-]?\d+/,y=/Z|[+-]\d\d:?\d\d/gi,x=/Z|[+-]\d\d(?::?\d\d)?/gi,_=/[+-]?\d+(\.\d{1,3})?/,O=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;function w(t,e,n){a[t]=Object(r.a)(e)?e:function(t,a){return t&&n?n:e}}function k(t,e){return Object(i.a)(a,t)?a[t](e._strict,e._locale):new RegExp(M(t.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(t,e,n,a,i){return e||n||a||i}))))}function M(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}a={}},function(t,e,n){"use strict";n.d(e,"i",(function(){return a})),n.d(e,"e",(function(){return i})),n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return o})),n.d(e,"d",(function(){return s})),n.d(e,"f",(function(){return l})),n.d(e,"c",(function(){return c})),n.d(e,"g",(function(){return u})),n.d(e,"h",(function(){return d}));var a=0,i=1,r=2,o=3,s=4,l=5,c=6,u=7,d=8},function(t,e,n){"use strict";var a;function i(){return a.apply(null,arguments)}function r(t){a=t}n.d(e,"a",(function(){return i})),n.d(e,"b",(function(){return r}))},function(t,e,n){"use strict";n.d(e,"e",(function(){return r})),n.d(e,"d",(function(){return l})),n.d(e,"a",(function(){return c})),n.d(e,"c",(function(){return u})),n.d(e,"b",(function(){return d}));var a=n(25),i=n(18),r=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,o=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,s={},l={};function c(t,e,n,i){var r=i;"string"==typeof i&&(r=function(){return this[i]()}),t&&(l[t]=r),e&&(l[e[0]]=function(){return Object(a.a)(r.apply(this,arguments),e[1],e[2])}),n&&(l[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),t)})}function u(t,e){return t.isValid()?(e=d(e,t.localeData()),s[e]=s[e]||function(t){var e,n,a,o=t.match(r);for(e=0,n=o.length;e<n;e++)l[o[e]]?o[e]=l[o[e]]:o[e]=(a=o[e]).match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"");return function(e){var a,r="";for(a=0;a<n;a++)r+=Object(i.a)(o[a])?o[a].call(e,t):o[a];return r}}(e),s[e](t)):t.localeData().invalidDate()}function d(t,e){var n=5;function a(t){return e.longDateFormat(t)||t}for(o.lastIndex=0;n>=0&&o.test(t);)t=t.replace(o,a),o.lastIndex=0,n-=1;return t}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var a=n(21);function i(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=Object(a.a)(e)),n}},function(t,e,n){"use strict";function a(t){return null==t._pf&&(t._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),t._pf}n.d(e,"a",(function(){return a}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return r})),n.d(e,"c",(function(){return o})),n.d(e,"b",(function(){return s}));var a=n(8),i={};function r(t,e){var n=t.toLowerCase();i[n]=i[n+"s"]=i[e]=t}function o(t){return"string"==typeof t?i[t]||i[t.toLowerCase()]:void 0}function s(t){var e,n,i={};for(n in t)Object(a.a)(t,n)&&(e=o(n))&&(i[e]=t[n]);return i}},function(t,e,n){"use strict";n.d(e,"a",(function(){return s})),n.d(e,"c",(function(){return l})),n.d(e,"b",(function(){return c}));var a=n(8),i=n(24),r=n(4),o={};function s(t,e){var n,a=e;for("string"==typeof t&&(t=[t]),Object(i.a)(e)&&(a=function(t,n){n[e]=Object(r.a)(t)}),n=0;n<t.length;n++)o[t[n]]=a}function l(t,e){s(t,(function(t,n,a,i){a._w=a._w||{},e(t,a._w,a,i)}))}function c(t,e,n){null!=e&&Object(a.a)(o,t)&&o[t](e,n._a,n,t)}},function(t,e,n){"use strict";function a(t,e){return Object.prototype.hasOwnProperty.call(t,e)}n.d(e,"a",(function(){return a}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var a=n(36);function i(t,e,n,i){return Object(a.a)(t,e,n,i,!1)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return o}));var a=n(8),i={};function r(t,e){i[t]=e}function o(t){var e,n=[];for(e in t)Object(a.a)(t,e)&&n.push({unit:e,priority:i[e]});return n.sort((function(t,e){return t.priority-e.priority})),n}},function(t,e,n){"use strict";n.d(e,"b",(function(){return l})),n.d(e,"a",(function(){return c})),n.d(e,"c",(function(){return u}));var a=n(2),i=n(19),r=n(5),o=a.a.momentProperties=[],s=!1;function l(t,e){var n,a,s;if(Object(i.a)(e._isAMomentObject)||(t._isAMomentObject=e._isAMomentObject),Object(i.a)(e._i)||(t._i=e._i),Object(i.a)(e._f)||(t._f=e._f),Object(i.a)(e._l)||(t._l=e._l),Object(i.a)(e._strict)||(t._strict=e._strict),Object(i.a)(e._tzm)||(t._tzm=e._tzm),Object(i.a)(e._isUTC)||(t._isUTC=e._isUTC),Object(i.a)(e._offset)||(t._offset=e._offset),Object(i.a)(e._pf)||(t._pf=Object(r.a)(e)),Object(i.a)(e._locale)||(t._locale=e._locale),o.length>0)for(n=0;n<o.length;n++)s=e[a=o[n]],Object(i.a)(s)||(t[a]=s);return t}function c(t){l(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===s&&(s=!0,a.a.updateOffset(this),s=!1)}function u(t){return t instanceof c||null!=t&&null!=t._isAMomentObject}},function(t,e,n){"use strict";n.d(e,"a",(function(){return s})),n.d(e,"b",(function(){return c}));var a=n(27),i=n(2),r=n(8);function o(t){!1===i.a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function s(t,e){var n=!0;return Object(a.a)((function(){if(null!=i.a.deprecationHandler&&i.a.deprecationHandler(null,t),n){var a,s,l,c=[];for(s=0;s<arguments.length;s++){if(a="","object"==typeof arguments[s]){for(l in a+="\n["+s+"] ",arguments[0])Object(r.a)(arguments[0],l)&&(a+=l+": "+arguments[0][l]+", ");a=a.slice(0,-2)}else a=arguments[s];c.push(a)}o(t+"\nArguments: "+Array.prototype.slice.call(c).join("")+"\n"+(new Error).stack),n=!1}return e.apply(this,arguments)}),e)}var l={};function c(t,e){null!=i.a.deprecationHandler&&i.a.deprecationHandler(t,e),l[t]||(o(e),l[t]=!0)}i.a.suppressDeprecationWarnings=!1,i.a.deprecationHandler=null},function(t,e,n){"use strict";n.d(e,"a",(function(){return y})),n.d(e,"b",(function(){return x})),n.d(e,"c",(function(){return _})),n.d(e,"f",(function(){return M})),n.d(e,"h",(function(){return j})),n.d(e,"g",(function(){return D})),n.d(e,"k",(function(){return C})),n.d(e,"e",(function(){return P})),n.d(e,"d",(function(){return T})),n.d(e,"j",(function(){return A})),n.d(e,"i",(function(){return F}));var a=n(16),i=n(8),r=n(3),o=n(6),s=n(10),l=n(0),c=n(7),u=n(2),d=n(1),h=n(4),f=n(20),g=n(24);var m=n(14),p=n(22),b=n(5),v=n(33);function y(t,e){if(isNaN(t)||isNaN(e))return NaN;var n,a=(e%(n=12)+n)%n;return t+=(e-a)/12,1===a?Object(v.a)(t)?29:28:31-a%7%2}Object(r.a)("M",["MM",2],"Mo",(function(){return this.month()+1})),Object(r.a)("MMM",0,0,(function(t){return this.localeData().monthsShort(this,t)})),Object(r.a)("MMMM",0,0,(function(t){return this.localeData().months(this,t)})),Object(o.a)("month","M"),Object(s.a)("month",8),Object(l.a)("M",l.d),Object(l.a)("MM",l.d,l.h),Object(l.a)("MMM",(function(t,e){return e.monthsShortRegex(t)})),Object(l.a)("MMMM",(function(t,e){return e.monthsRegex(t)})),Object(c.a)(["M","MM"],(function(t,e){e[d.e]=Object(h.a)(t)-1})),Object(c.a)(["MMM","MMMM"],(function(t,e,n,a){var i=n._locale.monthsParse(t,a,n._strict);null!=i?e[d.e]=i:Object(b.a)(n).invalidMonth=t}));var x="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),_="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),O=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,w=l.s,k=l.s;function M(t,e){return t?Object(f.a)(this._months)?this._months[t.month()]:this._months[(this._months.isFormat||O).test(e)?"format":"standalone"][t.month()]:Object(f.a)(this._months)?this._months:this._months.standalone}function j(t,e){return t?Object(f.a)(this._monthsShort)?this._monthsShort[t.month()]:this._monthsShort[O.test(e)?"format":"standalone"][t.month()]:Object(f.a)(this._monthsShort)?this._monthsShort:this._monthsShort.standalone}function S(t,e,n){var a,i,r,o=t.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],a=0;a<12;++a)r=Object(p.a)([2e3,a]),this._shortMonthsParse[a]=this.monthsShort(r,"").toLocaleLowerCase(),this._longMonthsParse[a]=this.months(r,"").toLocaleLowerCase();return n?"MMM"===e?-1!==(i=m.a.call(this._shortMonthsParse,o))?i:null:-1!==(i=m.a.call(this._longMonthsParse,o))?i:null:"MMM"===e?-1!==(i=m.a.call(this._shortMonthsParse,o))||-1!==(i=m.a.call(this._longMonthsParse,o))?i:null:-1!==(i=m.a.call(this._longMonthsParse,o))||-1!==(i=m.a.call(this._shortMonthsParse,o))?i:null}function D(t,e,n){var a,i,r;if(this._monthsParseExact)return S.call(this,t,e,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),a=0;a<12;a++){if(i=Object(p.a)([2e3,a]),n&&!this._longMonthsParse[a]&&(this._longMonthsParse[a]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[a]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),n||this._monthsParse[a]||(r="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[a]=new RegExp(r.replace(".",""),"i")),n&&"MMMM"===e&&this._longMonthsParse[a].test(t))return a;if(n&&"MMM"===e&&this._shortMonthsParse[a].test(t))return a;if(!n&&this._monthsParse[a].test(t))return a}}function C(t,e){var n;if(!t.isValid())return t;if("string"==typeof e)if(/^\d+$/.test(e))e=Object(h.a)(e);else if(e=t.localeData().monthsParse(e),!Object(g.a)(e))return t;return n=Math.min(t.date(),y(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t}function P(t){return null!=t?(C(this,t),u.a.updateOffset(this,!0),this):Object(a.a)(this,"Month")}function T(){return y(this.year(),this.month())}function A(t){return this._monthsParseExact?(Object(i.a)(this,"_monthsRegex")||I.call(this),t?this._monthsShortStrictRegex:this._monthsShortRegex):(Object(i.a)(this,"_monthsShortRegex")||(this._monthsShortRegex=w),this._monthsShortStrictRegex&&t?this._monthsShortStrictRegex:this._monthsShortRegex)}function F(t){return this._monthsParseExact?(Object(i.a)(this,"_monthsRegex")||I.call(this),t?this._monthsStrictRegex:this._monthsRegex):(Object(i.a)(this,"_monthsRegex")||(this._monthsRegex=k),this._monthsStrictRegex&&t?this._monthsStrictRegex:this._monthsRegex)}function I(){function t(t,e){return e.length-t.length}var e,n,a=[],i=[],r=[];for(e=0;e<12;e++)n=Object(p.a)([2e3,e]),a.push(this.monthsShort(n,"")),i.push(this.months(n,"")),r.push(this.months(n,"")),r.push(this.monthsShort(n,""));for(a.sort(t),i.sort(t),r.sort(t),e=0;e<12;e++)a[e]=Object(l.t)(a[e]),i[e]=Object(l.t)(i[e]);for(e=0;e<24;e++)r[e]=Object(l.t)(r[e]);this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+a.join("|")+")","i")}},function(t,e,n){"use strict";var a;n.d(e,"a",(function(){return a})),a=Array.prototype.indexOf?Array.prototype.indexOf:function(t){var e;for(e=0;e<this.length;++e)if(this[e]===t)return e;return-1}},function(t,e,n){"use strict";(function(t){n.d(e,"c",(function(){return p})),n.d(e,"a",(function(){return b})),n.d(e,"e",(function(){return v})),n.d(e,"b",(function(){return y})),n.d(e,"d",(function(){return x}));var a,i=n(20),r=n(19),o=n(12),s=n(37),l=n(38),c=n(46),u=n(45),d={},h={};function f(t,e){var n,a=Math.min(t.length,e.length);for(n=0;n<a;n+=1)if(t[n]!==e[n])return n;return a}function g(t){return t?t.toLowerCase().replace("_","-"):t}function m(e){var n=null;if(void 0===d[e]&&void 0!==t&&t&&t.exports)try{n=a._abbr,void 0,function(){var t=new Error("Cannot find module 'undefined'");throw t.code="MODULE_NOT_FOUND",t}(),p(n)}catch(t){d[e]=null}return d[e]}function p(t,e){var n;return t&&((n=Object(r.a)(e)?y(t):b(t,e))?a=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+t+" not found. Did you forget to load it?")),a._abbr}function b(t,e){if(null!==e){var n,a=u.a;if(e.abbr=t,null!=d[t])Object(o.b)("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),a=d[t]._config;else if(null!=e.parentLocale)if(null!=d[e.parentLocale])a=d[e.parentLocale]._config;else{if(null==(n=m(e.parentLocale)))return h[e.parentLocale]||(h[e.parentLocale]=[]),h[e.parentLocale].push({name:t,config:e}),null;a=n._config}return d[t]=new l.a(Object(s.a)(a,e)),h[t]&&h[t].forEach((function(t){b(t.name,t.config)})),p(t),d[t]}return delete d[t],null}function v(t,e){if(null!=e){var n,a,i=u.a;null!=d[t]&&null!=d[t].parentLocale?d[t].set(Object(s.a)(d[t]._config,e)):(null!=(a=m(t))&&(i=a._config),e=Object(s.a)(i,e),null==a&&(e.abbr=t),(n=new l.a(e)).parentLocale=d[t],d[t]=n),p(t)}else null!=d[t]&&(null!=d[t].parentLocale?(d[t]=d[t].parentLocale,t===p()&&p(t)):null!=d[t]&&delete d[t]);return d[t]}function y(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return a;if(!Object(i.a)(t)){if(e=m(t))return e;t=[t]}return function(t){for(var e,n,i,r,o=0;o<t.length;){for(e=(r=g(t[o]).split("-")).length,n=(n=g(t[o+1]))?n.split("-"):null;e>0;){if(i=m(r.slice(0,e).join("-")))return i;if(n&&n.length>=e&&f(r,n)>=e-1)break;e--}o++}return a}(t)}function x(){return Object(c.a)(d)}}).call(this,n(48)(t))},function(t,e,n){"use strict";n.d(e,"b",(function(){return u})),n.d(e,"a",(function(){return d})),n.d(e,"c",(function(){return h})),n.d(e,"d",(function(){return f})),n.d(e,"e",(function(){return g}));var a=n(6),i=n(10),r=n(2),o=n(18),s=n(13),l=n(33),c=n(4);function u(t,e){return function(n){return null!=n?(h(this,t,n),r.a.updateOffset(this,e),this):d(this,t)}}function d(t,e){return t.isValid()?t._d["get"+(t._isUTC?"UTC":"")+e]():NaN}function h(t,e,n){t.isValid()&&!isNaN(n)&&("FullYear"===e&&Object(l.a)(t.year())&&1===t.month()&&29===t.date()?(n=Object(c.a)(n),t._d["set"+(t._isUTC?"UTC":"")+e](n,t.month(),Object(s.a)(n,t.month()))):t._d["set"+(t._isUTC?"UTC":"")+e](n))}function f(t){return t=Object(a.c)(t),Object(o.a)(this[t])?this[t]():this}function g(t,e){if("object"==typeof t){t=Object(a.b)(t);var n,r=Object(i.b)(t);for(n=0;n<r.length;n++)this[r[n].unit](t[r[n].unit])}else if(t=Object(a.c)(t),Object(o.a)(this[t]))return this[t](e);return this}},function(t,e,n){"use strict";n.d(e,"a",(function(){return m})),n.d(e,"c",(function(){return p})),n.d(e,"b",(function(){return b})),n.d(e,"g",(function(){return _})),n.d(e,"j",(function(){return O})),n.d(e,"h",(function(){return w})),n.d(e,"i",(function(){return M})),n.d(e,"d",(function(){return j})),n.d(e,"f",(function(){return S})),n.d(e,"e",(function(){return D})),n.d(e,"l",(function(){return C})),n.d(e,"m",(function(){return P})),n.d(e,"k",(function(){return T}));var a=n(3),i=n(6),r=n(10),o=n(0),s=n(7),l=n(4),c=n(20),u=n(14),d=n(8),h=n(22),f=n(5);function g(t,e){return t.slice(e,7).concat(t.slice(0,e))}Object(a.a)("d",0,"do","day"),Object(a.a)("dd",0,0,(function(t){return this.localeData().weekdaysMin(this,t)})),Object(a.a)("ddd",0,0,(function(t){return this.localeData().weekdaysShort(this,t)})),Object(a.a)("dddd",0,0,(function(t){return this.localeData().weekdays(this,t)})),Object(a.a)("e",0,0,"weekday"),Object(a.a)("E",0,0,"isoWeekday"),Object(i.a)("day","d"),Object(i.a)("weekday","e"),Object(i.a)("isoWeekday","E"),Object(r.a)("day",11),Object(r.a)("weekday",11),Object(r.a)("isoWeekday",11),Object(o.a)("d",o.d),Object(o.a)("e",o.d),Object(o.a)("E",o.d),Object(o.a)("dd",(function(t,e){return e.weekdaysMinRegex(t)})),Object(o.a)("ddd",(function(t,e){return e.weekdaysShortRegex(t)})),Object(o.a)("dddd",(function(t,e){return e.weekdaysRegex(t)})),Object(s.c)(["dd","ddd","dddd"],(function(t,e,n,a){var i=n._locale.weekdaysParse(t,a,n._strict);null!=i?e.d=i:Object(f.a)(n).invalidWeekday=t})),Object(s.c)(["d","e","E"],(function(t,e,n,a){e[a]=Object(l.a)(t)}));var m="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),p="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),b="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),v=o.s,y=o.s,x=o.s;function _(t,e){var n=Object(c.a)(this._weekdays)?this._weekdays:this._weekdays[t&&!0!==t&&this._weekdays.isFormat.test(e)?"format":"standalone"];return!0===t?g(n,this._week.dow):t?n[t.day()]:n}function O(t){return!0===t?g(this._weekdaysShort,this._week.dow):t?this._weekdaysShort[t.day()]:this._weekdaysShort}function w(t){return!0===t?g(this._weekdaysMin,this._week.dow):t?this._weekdaysMin[t.day()]:this._weekdaysMin}function k(t,e,n){var a,i,r,o=t.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],a=0;a<7;++a)r=Object(h.a)([2e3,1]).day(a),this._minWeekdaysParse[a]=this.weekdaysMin(r,"").toLocaleLowerCase(),this._shortWeekdaysParse[a]=this.weekdaysShort(r,"").toLocaleLowerCase(),this._weekdaysParse[a]=this.weekdays(r,"").toLocaleLowerCase();return n?"dddd"===e?-1!==(i=u.a.call(this._weekdaysParse,o))?i:null:"ddd"===e?-1!==(i=u.a.call(this._shortWeekdaysParse,o))?i:null:-1!==(i=u.a.call(this._minWeekdaysParse,o))?i:null:"dddd"===e?-1!==(i=u.a.call(this._weekdaysParse,o))||-1!==(i=u.a.call(this._shortWeekdaysParse,o))||-1!==(i=u.a.call(this._minWeekdaysParse,o))?i:null:"ddd"===e?-1!==(i=u.a.call(this._shortWeekdaysParse,o))||-1!==(i=u.a.call(this._weekdaysParse,o))||-1!==(i=u.a.call(this._minWeekdaysParse,o))?i:null:-1!==(i=u.a.call(this._minWeekdaysParse,o))||-1!==(i=u.a.call(this._weekdaysParse,o))||-1!==(i=u.a.call(this._shortWeekdaysParse,o))?i:null}function M(t,e,n){var a,i,r;if(this._weekdaysParseExact)return k.call(this,t,e,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),a=0;a<7;a++){if(i=Object(h.a)([2e3,1]).day(a),n&&!this._fullWeekdaysParse[a]&&(this._fullWeekdaysParse[a]=new RegExp("^"+this.weekdays(i,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[a]=new RegExp("^"+this.weekdaysShort(i,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[a]=new RegExp("^"+this.weekdaysMin(i,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[a]||(r="^"+this.weekdays(i,"")+"|^"+this.weekdaysShort(i,"")+"|^"+this.weekdaysMin(i,""),this._weekdaysParse[a]=new RegExp(r.replace(".",""),"i")),n&&"dddd"===e&&this._fullWeekdaysParse[a].test(t))return a;if(n&&"ddd"===e&&this._shortWeekdaysParse[a].test(t))return a;if(n&&"dd"===e&&this._minWeekdaysParse[a].test(t))return a;if(!n&&this._weekdaysParse[a].test(t))return a}}function j(t){if(!this.isValid())return null!=t?this:NaN;var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=function(t,e){return"string"!=typeof t?t:isNaN(t)?"number"==typeof(t=e.weekdaysParse(t))?t:null:parseInt(t,10)}(t,this.localeData()),this.add(t-e,"d")):e}function S(t){if(!this.isValid())return null!=t?this:NaN;var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")}function D(t){if(!this.isValid())return null!=t?this:NaN;if(null!=t){var e=function(t,e){return"string"==typeof t?e.weekdaysParse(t)%7||7:isNaN(t)?null:t}(t,this.localeData());return this.day(this.day()%7?e:e-7)}return this.day()||7}function C(t){return this._weekdaysParseExact?(Object(d.a)(this,"_weekdaysRegex")||A.call(this),t?this._weekdaysStrictRegex:this._weekdaysRegex):(Object(d.a)(this,"_weekdaysRegex")||(this._weekdaysRegex=v),this._weekdaysStrictRegex&&t?this._weekdaysStrictRegex:this._weekdaysRegex)}function P(t){return this._weekdaysParseExact?(Object(d.a)(this,"_weekdaysRegex")||A.call(this),t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(Object(d.a)(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=y),this._weekdaysShortStrictRegex&&t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)}function T(t){return this._weekdaysParseExact?(Object(d.a)(this,"_weekdaysRegex")||A.call(this),t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(Object(d.a)(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=x),this._weekdaysMinStrictRegex&&t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)}function A(){function t(t,e){return e.length-t.length}var e,n,a,i,r,s=[],l=[],c=[],u=[];for(e=0;e<7;e++)n=Object(h.a)([2e3,1]).day(e),a=Object(o.t)(this.weekdaysMin(n,"")),i=Object(o.t)(this.weekdaysShort(n,"")),r=Object(o.t)(this.weekdays(n,"")),s.push(a),l.push(i),c.push(r),u.push(a),u.push(i),u.push(r);s.sort(t),l.sort(t),c.sort(t),u.sort(t),this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+c.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+s.join("|")+")","i")}},function(t,e,n){"use strict";function a(t){return"undefined"!=typeof Function&&t instanceof Function||"[object Function]"===Object.prototype.toString.call(t)}n.d(e,"a",(function(){return a}))},function(t,e,n){"use strict";function a(t){return void 0===t}n.d(e,"a",(function(){return a}))},function(t,e,n){"use strict";function a(t){return t instanceof Array||"[object Array]"===Object.prototype.toString.call(t)}n.d(e,"a",(function(){return a}))},function(t,e,n){"use strict";function a(t){return t<0?Math.ceil(t)||0:Math.floor(t)}n.d(e,"a",(function(){return a}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var a=n(36);function i(t,e,n,i){return Object(a.a)(t,e,n,i,!0).utc()}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o})),n.d(e,"b",(function(){return s})),n.d(e,"c",(function(){return l}));var a=n(28),i=n(31);function r(t,e,n){var a=7+e-n;return-((7+Object(i.b)(t,0,a).getUTCDay()-e)%7)+a-1}function o(t,e,n,i,o){var s,l,c=1+7*(e-1)+(7+n-i)%7+r(t,i,o);return c<=0?(s=t-1,l=Object(a.a)(s)+c):c>Object(a.a)(t)?(s=t+1,l=c-Object(a.a)(t)):(s=t,l=c),{year:s,dayOfYear:l}}function s(t,e,n){var a,i,o=r(t.year(),e,n),s=Math.floor((t.dayOfYear()-o-1)/7)+1;return s<1?a=s+l(i=t.year()-1,e,n):s>l(t.year(),e,n)?(a=s-l(t.year(),e,n),i=t.year()+1):(i=t.year(),a=s),{week:a,year:i}}function l(t,e,n){var i=r(t,e,n),o=r(t+1,e,n);return(Object(a.a)(t)-i+o)/7}},function(t,e,n){"use strict";function a(t){return"number"==typeof t||"[object Number]"===Object.prototype.toString.call(t)}n.d(e,"a",(function(){return a}))},function(t,e,n){"use strict";function a(t,e,n){var a=""+Math.abs(t),i=e-a.length;return(t>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,i)).toString().substr(1)+a}n.d(e,"a",(function(){return a}))},function(t,e,n){"use strict";n.d(e,"b",(function(){return s})),n.d(e,"a",(function(){return l}));var a,i=n(27),r=n(22),o=n(5);function s(t){if(null==t._isValid){var e=Object(o.a)(t),n=a.call(e.parsedDateParts,(function(t){return null!=t})),i=!isNaN(t._d.getTime())&&e.overflow<0&&!e.empty&&!e.invalidEra&&!e.invalidMonth&&!e.invalidWeekday&&!e.weekdayMismatch&&!e.nullInput&&!e.invalidFormat&&!e.userInvalidated&&(!e.meridiem||e.meridiem&&n);if(t._strict&&(i=i&&0===e.charsLeftOver&&0===e.unusedTokens.length&&void 0===e.bigHour),null!=Object.isFrozen&&Object.isFrozen(t))return i;t._isValid=i}return t._isValid}function l(t){var e=Object(r.a)(NaN);return null!=t?Object(i.a)(Object(o.a)(e),t):Object(o.a)(e).userInvalidated=!0,e}a=Array.prototype.some?Array.prototype.some:function(t){var e,n=Object(this),a=n.length>>>0;for(e=0;e<a;e++)if(e in n&&t.call(this,n[e],e,n))return!0;return!1}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var a=n(8);function i(t,e){for(var n in e)Object(a.a)(e,n)&&(t[n]=e[n]);return Object(a.a)(e,"toString")&&(t.toString=e.toString),Object(a.a)(e,"valueOf")&&(t.valueOf=e.valueOf),t}},function(t,e,n){"use strict";n.d(e,"a",(function(){return g})),n.d(e,"c",(function(){return m})),n.d(e,"b",(function(){return p}));var a=n(16),i=n(3),r=n(6),o=n(10),s=n(0),l=n(7),c=n(33),u=n(2),d=n(1),h=n(4),f=n(25);function g(t){return Object(c.a)(t)?366:365}Object(i.a)("Y",0,0,(function(){var t=this.year();return t<=9999?Object(f.a)(t,4):"+"+t})),Object(i.a)(0,["YY",2],0,(function(){return this.year()%100})),Object(i.a)(0,["YYYY",4],0,"year"),Object(i.a)(0,["YYYYY",5],0,"year"),Object(i.a)(0,["YYYYYY",6,!0],0,"year"),Object(r.a)("year","y"),Object(o.a)("year",1),Object(s.a)("Y",s.p),Object(s.a)("YY",s.d,s.h),Object(s.a)("YYYY",s.f,s.k),Object(s.a)("YYYYY",s.g,s.m),Object(s.a)("YYYYYY",s.g,s.m),Object(l.a)(["YYYYY","YYYYYY"],d.i),Object(l.a)("YYYY",(function(t,e){e[d.i]=2===t.length?u.a.parseTwoDigitYear(t):Object(h.a)(t)})),Object(l.a)("YY",(function(t,e){e[d.i]=u.a.parseTwoDigitYear(t)})),Object(l.a)("Y",(function(t,e){e[d.i]=parseInt(t,10)})),u.a.parseTwoDigitYear=function(t){return Object(h.a)(t)+(Object(h.a)(t)>68?1900:2e3)};var m=Object(a.b)("FullYear",!0);function p(){return Object(c.a)(this.year())}},function(t,e,n){"use strict";function a(t){return null!=t&&"[object Object]"===Object.prototype.toString.call(t)}n.d(e,"a",(function(){return a}))},function(t,e,n){"use strict";n.d(e,"f",(function(){return u})),n.d(e,"a",(function(){return d})),n.d(e,"d",(function(){return h})),n.d(e,"e",(function(){return f})),n.d(e,"c",(function(){return g})),n.d(e,"b",(function(){return m}));var a=n(3),i=n(6),r=n(10),o=n(0),s=n(7),l=n(4),c=n(23);function u(t){return Object(c.b)(t,this._week.dow,this._week.doy).week}Object(a.a)("w",["ww",2],"wo","week"),Object(a.a)("W",["WW",2],"Wo","isoWeek"),Object(i.a)("week","w"),Object(i.a)("isoWeek","W"),Object(r.a)("week",5),Object(r.a)("isoWeek",5),Object(o.a)("w",o.d),Object(o.a)("ww",o.d,o.h),Object(o.a)("W",o.d),Object(o.a)("WW",o.d,o.h),Object(s.c)(["w","ww","W","WW"],(function(t,e,n,a){e[a.substr(0,1)]=Object(l.a)(t)}));var d={dow:0,doy:6};function h(){return this._week.dow}function f(){return this._week.doy}function g(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")}function m(t){var e=Object(c.b)(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")}},function(t,e,n){"use strict";function a(t,e,n,a,i,r,o){var s;return t<100&&t>=0?(s=new Date(t+400,e,n,a,i,r,o),isFinite(s.getFullYear())&&s.setFullYear(t)):s=new Date(t,e,n,a,i,r,o),s}function i(t){var e,n;return t<100&&t>=0?((n=Array.prototype.slice.call(arguments))[0]=t+400,e=new Date(Date.UTC.apply(null,n)),isFinite(e.getUTCFullYear())&&e.setUTCFullYear(t)):e=new Date(Date.UTC.apply(null,arguments)),e}n.d(e,"a",(function(){return a})),n.d(e,"b",(function(){return i}))},function(t,e,n){"use strict";function a(t){return t instanceof Date||"[object Date]"===Object.prototype.toString.call(t)}n.d(e,"a",(function(){return a}))},function(t,e,n){"use strict";function a(t){return t%4==0&&t%100!=0||t%400==0}n.d(e,"a",(function(){return a}))},function(t,e,n){"use strict";n.d(e,"c",(function(){return p})),n.d(e,"a",(function(){return b})),n.d(e,"b",(function(){return v})),n.d(e,"d",(function(){return y}));var a=n(16),i=n(3),r=n(6),o=n(10),s=n(0),l=n(7),c=n(1),u=n(4),d=n(25),h=n(5);function f(){return this.hours()%12||12}function g(t,e){Object(i.a)(t,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),e)}))}function m(t,e){return e._meridiemParse}function p(t){return"p"===(t+"").toLowerCase().charAt(0)}Object(i.a)("H",["HH",2],0,"hour"),Object(i.a)("h",["hh",2],0,f),Object(i.a)("k",["kk",2],0,(function(){return this.hours()||24})),Object(i.a)("hmm",0,0,(function(){return""+f.apply(this)+Object(d.a)(this.minutes(),2)})),Object(i.a)("hmmss",0,0,(function(){return""+f.apply(this)+Object(d.a)(this.minutes(),2)+Object(d.a)(this.seconds(),2)})),Object(i.a)("Hmm",0,0,(function(){return""+this.hours()+Object(d.a)(this.minutes(),2)})),Object(i.a)("Hmmss",0,0,(function(){return""+this.hours()+Object(d.a)(this.minutes(),2)+Object(d.a)(this.seconds(),2)})),g("a",!0),g("A",!1),Object(r.a)("hour","h"),Object(o.a)("hour",13),Object(s.a)("a",m),Object(s.a)("A",m),Object(s.a)("H",s.d),Object(s.a)("h",s.d),Object(s.a)("k",s.d),Object(s.a)("HH",s.d,s.h),Object(s.a)("hh",s.d,s.h),Object(s.a)("kk",s.d,s.h),Object(s.a)("hmm",s.j),Object(s.a)("hmmss",s.l),Object(s.a)("Hmm",s.j),Object(s.a)("Hmmss",s.l),Object(l.a)(["H","HH"],c.b),Object(l.a)(["k","kk"],(function(t,e,n){var a=Object(u.a)(t);e[c.b]=24===a?0:a})),Object(l.a)(["a","A"],(function(t,e,n){n._isPm=n._locale.isPM(t),n._meridiem=t})),Object(l.a)(["h","hh"],(function(t,e,n){e[c.b]=Object(u.a)(t),Object(h.a)(n).bigHour=!0})),Object(l.a)("hmm",(function(t,e,n){var a=t.length-2;e[c.b]=Object(u.a)(t.substr(0,a)),e[c.d]=Object(u.a)(t.substr(a)),Object(h.a)(n).bigHour=!0})),Object(l.a)("hmmss",(function(t,e,n){var a=t.length-4,i=t.length-2;e[c.b]=Object(u.a)(t.substr(0,a)),e[c.d]=Object(u.a)(t.substr(a,2)),e[c.f]=Object(u.a)(t.substr(i)),Object(h.a)(n).bigHour=!0})),Object(l.a)("Hmm",(function(t,e,n){var a=t.length-2;e[c.b]=Object(u.a)(t.substr(0,a)),e[c.d]=Object(u.a)(t.substr(a))})),Object(l.a)("Hmmss",(function(t,e,n){var a=t.length-4,i=t.length-2;e[c.b]=Object(u.a)(t.substr(0,a)),e[c.d]=Object(u.a)(t.substr(a,2)),e[c.f]=Object(u.a)(t.substr(i))}));var b=/[ap]\.?m?\.?/i,v=Object(a.b)("Hours",!0);function y(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var a=n(8);function i(t){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(t).length;var e;for(e in t)if(Object(a.a)(t,e))return!1;return!0}},function(t,e,n){"use strict";n.d(e,"b",(function(){return B})),n.d(e,"a",(function(){return H}));var a=n(20),i=n(29),r=n(35),o=n(19),s=n(24),l=n(32);function c(t,e){var n,a=[];for(n=0;n<t.length;++n)a.push(e(t[n],n));return a}var u=n(26),d=n(11),h=n(15),f=n(2),g=n(13),m=n(1),p=n(5);function b(t){var e,n=t._a;return n&&-2===Object(p.a)(t).overflow&&(e=n[m.e]<0||n[m.e]>11?m.e:n[m.a]<1||n[m.a]>Object(g.a)(n[m.i],n[m.e])?m.a:n[m.b]<0||n[m.b]>24||24===n[m.b]&&(0!==n[m.d]||0!==n[m.f]||0!==n[m.c])?m.b:n[m.d]<0||n[m.d]>59?m.d:n[m.f]<0||n[m.f]>59?m.f:n[m.c]<0||n[m.c]>999?m.c:-1,Object(p.a)(t)._overflowDayOfYear&&(e<m.i||e>m.a)&&(e=m.a),Object(p.a)(t)._overflowWeeks&&-1===e&&(e=m.g),Object(p.a)(t)._overflowWeekday&&-1===e&&(e=m.h),Object(p.a)(t).overflow=e),t}var v=n(31),y=n(12),x=n(17),_=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,O=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,w=/Z|[+-]\d\d(?::?\d\d)?/,k=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],M=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],j=/^\/?Date\((-?\d+)/i,S=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,D={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function C(t){var e,n,a,i,r,o,s=t._i,l=_.exec(s)||O.exec(s);if(l){for(Object(p.a)(t).iso=!0,e=0,n=k.length;e<n;e++)if(k[e][1].exec(l[1])){i=k[e][0],a=!1!==k[e][2];break}if(null==i)return void(t._isValid=!1);if(l[3]){for(e=0,n=M.length;e<n;e++)if(M[e][1].exec(l[3])){r=(l[2]||" ")+M[e][0];break}if(null==r)return void(t._isValid=!1)}if(!a&&null!=r)return void(t._isValid=!1);if(l[4]){if(!w.exec(l[4]))return void(t._isValid=!1);o="Z"}t._f=i+(r||"")+(o||""),E(t)}else t._isValid=!1}function P(t){var e=parseInt(t,10);return e<=49?2e3+e:e<=999?1900+e:e}function T(t){var e,n,a,i,r,o,s,l,c=S.exec(t._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(c){if(n=c[4],a=c[3],i=c[2],r=c[5],o=c[6],s=c[7],l=[P(n),g.c.indexOf(a),parseInt(i,10),parseInt(r,10),parseInt(o,10)],s&&l.push(parseInt(s,10)),e=l,!function(t,e,n){return!t||x.c.indexOf(t)===new Date(e[0],e[1],e[2]).getDay()||(Object(p.a)(n).weekdayMismatch=!0,n._isValid=!1,!1)}(c[1],e,t))return;t._a=e,t._tzm=function(t,e,n){if(t)return D[t];if(e)return 0;var a=parseInt(n,10),i=a%100;return 60*((a-i)/100)+i}(c[8],c[9],c[10]),t._d=v.b.apply(null,t._a),t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),Object(p.a)(t).rfc2822=!0}else t._isValid=!1}f.a.createFromInputFallback=Object(y.a)("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))}));var A=n(28),F=n(23),I=n(9);function N(t,e,n){return null!=t?t:null!=e?e:n}function R(t){var e,n,a,i,r,o=[];if(!t._d){for(a=function(t){var e=new Date(f.a.now());return t._useUTC?[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()]:[e.getFullYear(),e.getMonth(),e.getDate()]}(t),t._w&&null==t._a[m.a]&&null==t._a[m.e]&&function(t){var e,n,a,i,r,o,s,l,c;null!=(e=t._w).GG||null!=e.W||null!=e.E?(r=1,o=4,n=N(e.GG,t._a[m.i],Object(F.b)(Object(I.a)(),1,4).year),a=N(e.W,1),((i=N(e.E,1))<1||i>7)&&(l=!0)):(r=t._locale._week.dow,o=t._locale._week.doy,c=Object(F.b)(Object(I.a)(),r,o),n=N(e.gg,t._a[m.i],c.year),a=N(e.w,c.week),null!=e.d?((i=e.d)<0||i>6)&&(l=!0):null!=e.e?(i=e.e+r,(e.e<0||e.e>6)&&(l=!0)):i=r);a<1||a>Object(F.c)(n,r,o)?Object(p.a)(t)._overflowWeeks=!0:null!=l?Object(p.a)(t)._overflowWeekday=!0:(s=Object(F.a)(n,a,i,r,o),t._a[m.i]=s.year,t._dayOfYear=s.dayOfYear)}(t),null!=t._dayOfYear&&(r=N(t._a[m.i],a[m.i]),(t._dayOfYear>Object(A.a)(r)||0===t._dayOfYear)&&(Object(p.a)(t)._overflowDayOfYear=!0),n=Object(v.b)(r,0,t._dayOfYear),t._a[m.e]=n.getUTCMonth(),t._a[m.a]=n.getUTCDate()),e=0;e<3&&null==t._a[e];++e)t._a[e]=o[e]=a[e];for(;e<7;e++)t._a[e]=o[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[m.b]&&0===t._a[m.d]&&0===t._a[m.f]&&0===t._a[m.c]&&(t._nextDay=!0,t._a[m.b]=0),t._d=(t._useUTC?v.b:v.a).apply(null,o),i=t._useUTC?t._d.getUTCDay():t._d.getDay(),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[m.b]=24),t._w&&void 0!==t._w.d&&t._w.d!==i&&(Object(p.a)(t).weekdayMismatch=!0)}}var L=n(0),Y=n(7),W=n(3);function E(t){if(t._f!==f.a.ISO_8601)if(t._f!==f.a.RFC_2822){t._a=[],Object(p.a)(t).empty=!0;var e,n,a,i,r,o,s=""+t._i,l=s.length,c=0;for(a=Object(W.b)(t._f,t._locale).match(W.e)||[],e=0;e<a.length;e++)i=a[e],(n=(s.match(Object(L.b)(i,t))||[])[0])&&((r=s.substr(0,s.indexOf(n))).length>0&&Object(p.a)(t).unusedInput.push(r),s=s.slice(s.indexOf(n)+n.length),c+=n.length),W.d[i]?(n?Object(p.a)(t).empty=!1:Object(p.a)(t).unusedTokens.push(i),Object(Y.b)(i,n,t)):t._strict&&!n&&Object(p.a)(t).unusedTokens.push(i);Object(p.a)(t).charsLeftOver=l-c,s.length>0&&Object(p.a)(t).unusedInput.push(s),t._a[m.b]<=12&&!0===Object(p.a)(t).bigHour&&t._a[m.b]>0&&(Object(p.a)(t).bigHour=void 0),Object(p.a)(t).parsedDateParts=t._a.slice(0),Object(p.a)(t).meridiem=t._meridiem,t._a[m.b]=function(t,e,n){var a;if(null==n)return e;return null!=t.meridiemHour?t.meridiemHour(e,n):null!=t.isPM?((a=t.isPM(n))&&e<12&&(e+=12),a||12!==e||(e=0),e):e}(t._locale,t._a[m.b],t._meridiem),null!==(o=Object(p.a)(t).era)&&(t._a[m.i]=t._locale.erasConvertYear(o,t._a[m.i])),R(t),b(t)}else T(t);else C(t)}f.a.ISO_8601=function(){},f.a.RFC_2822=function(){};var z=n(27);var V=n(6);function B(t){var e=t._i,n=t._f;return t._locale=t._locale||Object(h.b)(t._l),null===e||void 0===n&&""===e?Object(u.a)({nullInput:!0}):("string"==typeof e&&(t._i=e=t._locale.preparse(e)),Object(d.c)(e)?new d.a(b(e)):(Object(l.a)(e)?t._d=e:Object(a.a)(n)?function(t){var e,n,a,i,r,o,s=!1;if(0===t._f.length)return Object(p.a)(t).invalidFormat=!0,void(t._d=new Date(NaN));for(i=0;i<t._f.length;i++)r=0,o=!1,e=Object(d.b)({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._f=t._f[i],E(e),Object(u.b)(e)&&(o=!0),r+=Object(p.a)(e).charsLeftOver,r+=10*Object(p.a)(e).unusedTokens.length,Object(p.a)(e).score=r,s?r<a&&(a=r,n=e):(null==a||r<a||o)&&(a=r,n=e,o&&(s=!0));Object(z.a)(t,n||e)}(t):n?E(t):function(t){var e=t._i;Object(o.a)(e)?t._d=new Date(f.a.now()):Object(l.a)(e)?t._d=new Date(e.valueOf()):"string"==typeof e?function(t){var e=j.exec(t._i);null===e?(C(t),!1===t._isValid&&(delete t._isValid,T(t),!1===t._isValid&&(delete t._isValid,t._strict?t._isValid=!1:f.a.createFromInputFallback(t)))):t._d=new Date(+e[1])}(t):Object(a.a)(e)?(t._a=c(e.slice(0),(function(t){return parseInt(t,10)})),R(t)):Object(i.a)(e)?function(t){if(!t._d){var e=Object(V.b)(t._i),n=void 0===e.day?e.date:e.day;t._a=c([e.year,e.month,n,e.hour,e.minute,e.second,e.millisecond],(function(t){return t&&parseInt(t,10)})),R(t)}}(t):Object(s.a)(e)?t._d=new Date(e):f.a.createFromInputFallback(t)}(t),Object(u.b)(t)||(t._d=null),t))}function H(t,e,n,o,s){var l,c,u={};return!0!==e&&!1!==e||(o=e,e=void 0),!0!==n&&!1!==n||(o=n,n=void 0),(Object(i.a)(t)&&Object(r.a)(t)||Object(a.a)(t)&&0===t.length)&&(t=void 0),u._isAMomentObject=!0,u._useUTC=u._isUTC=s,u._l=n,u._i=t,u._f=e,u._strict=o,l=u,(c=new d.a(b(B(l))))._nextDay&&(c.add(1,"d"),c._nextDay=void 0),c}},function(t,e,n){"use strict";n.d(e,"b",(function(){return s})),n.d(e,"a",(function(){return l}));var a=n(18),i=n(27),r=n(29),o=n(8);function s(t){var e,n;for(n in t)Object(o.a)(t,n)&&(e=t[n],Object(a.a)(e)?this[n]=e:this["_"+n]=e);this._config=t,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)}function l(t,e){var n,a=Object(i.a)({},t);for(n in e)Object(o.a)(e,n)&&(Object(r.a)(t[n])&&Object(r.a)(e[n])?(a[n]={},Object(i.a)(a[n],t[n]),Object(i.a)(a[n],e[n])):null!=e[n]?a[n]=e[n]:delete a[n]);for(n in t)Object(o.a)(t,n)&&!Object(o.a)(e,n)&&Object(r.a)(t[n])&&(a[n]=Object(i.a)({},a[n]));return a}},function(t,e,n){"use strict";function a(t){null!=t&&this.set(t)}n.d(e,"a",(function(){return a}))},function(t,e,n){"use strict";n.d(e,"b",(function(){return a})),n.d(e,"a",(function(){return i})),n.d(e,"c",(function(){return r}));var a="%d",i=/\d{1,2}/;function r(t){return this._ordinal.replace("%d",t)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i})),n.d(e,"c",(function(){return r})),n.d(e,"b",(function(){return o}));var a=n(18),i={future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"};function r(t,e,n,i){var r=this._relativeTime[n];return Object(a.a)(r)?r(t,e,n,i):r.replace(/%d/i,t)}function o(t,e){var n=this._relativeTime[t>0?"future":"past"];return Object(a.a)(n)?n(e):n.replace(/%s/i,e)}},function(t,e,n){"use strict";n.d(e,"b",(function(){return i})),n.d(e,"a",(function(){return r}));var a=n(18),i={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"};function r(t,e,n){var i=this._calendar[t]||this._calendar.sameElse;return Object(a.a)(i)?i.call(e,n):i}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i})),n.d(e,"b",(function(){return r}));var a=n(3),i={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"};function r(t){var e=this._longDateFormat[t],n=this._longDateFormat[t.toUpperCase()];return e||!n?e:(this._longDateFormat[t]=n.match(a.e).map((function(t){return"MMMM"===t||"MM"===t||"DD"===t||"dddd"===t?t.slice(1):t})).join(""),this._longDateFormat[t])}},function(t,e,n){"use strict";n.d(e,"a",(function(){return a})),n.d(e,"b",(function(){return i}));var a="Invalid date";function i(){return this._invalidDate}},function(t,e,n){
/*!
 * Chart.js v2.9.3
 * https://www.chartjs.org
 * (c) 2019 Chart.js Contributors
 * Released under the MIT License
 */
t.exports=function(t){"use strict";t=t&&t.hasOwnProperty("default")?t.default:t;var e={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},n=function(t,e){return t(e={exports:{}},e.exports),e.exports}((function(t){var n={};for(var a in e)e.hasOwnProperty(a)&&(n[e[a]]=a);var i=t.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var r in i)if(i.hasOwnProperty(r)){if(!("channels"in i[r]))throw new Error("missing channels property: "+r);if(!("labels"in i[r]))throw new Error("missing channel labels property: "+r);if(i[r].labels.length!==i[r].channels)throw new Error("channel and label counts mismatch: "+r);var o=i[r].channels,s=i[r].labels;delete i[r].channels,delete i[r].labels,Object.defineProperty(i[r],"channels",{value:o}),Object.defineProperty(i[r],"labels",{value:s})}i.rgb.hsl=function(t){var e,n,a=t[0]/255,i=t[1]/255,r=t[2]/255,o=Math.min(a,i,r),s=Math.max(a,i,r),l=s-o;return s===o?e=0:a===s?e=(i-r)/l:i===s?e=2+(r-a)/l:r===s&&(e=4+(a-i)/l),(e=Math.min(60*e,360))<0&&(e+=360),n=(o+s)/2,[e,100*(s===o?0:n<=.5?l/(s+o):l/(2-s-o)),100*n]},i.rgb.hsv=function(t){var e,n,a,i,r,o=t[0]/255,s=t[1]/255,l=t[2]/255,c=Math.max(o,s,l),u=c-Math.min(o,s,l),d=function(t){return(c-t)/6/u+.5};return 0===u?i=r=0:(r=u/c,e=d(o),n=d(s),a=d(l),o===c?i=a-n:s===c?i=1/3+e-a:l===c&&(i=2/3+n-e),i<0?i+=1:i>1&&(i-=1)),[360*i,100*r,100*c]},i.rgb.hwb=function(t){var e=t[0],n=t[1],a=t[2];return[i.rgb.hsl(t)[0],1/255*Math.min(e,Math.min(n,a))*100,100*(a=1-1/255*Math.max(e,Math.max(n,a)))]},i.rgb.cmyk=function(t){var e,n=t[0]/255,a=t[1]/255,i=t[2]/255;return[100*((1-n-(e=Math.min(1-n,1-a,1-i)))/(1-e)||0),100*((1-a-e)/(1-e)||0),100*((1-i-e)/(1-e)||0),100*e]},i.rgb.keyword=function(t){var a=n[t];if(a)return a;var i,r,o,s=1/0;for(var l in e)if(e.hasOwnProperty(l)){var c=e[l],u=(r=t,o=c,Math.pow(r[0]-o[0],2)+Math.pow(r[1]-o[1],2)+Math.pow(r[2]-o[2],2));u<s&&(s=u,i=l)}return i},i.keyword.rgb=function(t){return e[t]},i.rgb.xyz=function(t){var e=t[0]/255,n=t[1]/255,a=t[2]/255;return[100*(.4124*(e=e>.04045?Math.pow((e+.055)/1.055,2.4):e/12.92)+.3576*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(a=a>.04045?Math.pow((a+.055)/1.055,2.4):a/12.92)),100*(.2126*e+.7152*n+.0722*a),100*(.0193*e+.1192*n+.9505*a)]},i.rgb.lab=function(t){var e=i.rgb.xyz(t),n=e[0],a=e[1],r=e[2];return a/=100,r/=108.883,n=(n/=95.047)>.008856?Math.pow(n,1/3):7.787*n+16/116,[116*(a=a>.008856?Math.pow(a,1/3):7.787*a+16/116)-16,500*(n-a),200*(a-(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116))]},i.hsl.rgb=function(t){var e,n,a,i,r,o=t[0]/360,s=t[1]/100,l=t[2]/100;if(0===s)return[r=255*l,r,r];e=2*l-(n=l<.5?l*(1+s):l+s-l*s),i=[0,0,0];for(var c=0;c<3;c++)(a=o+1/3*-(c-1))<0&&a++,a>1&&a--,r=6*a<1?e+6*(n-e)*a:2*a<1?n:3*a<2?e+(n-e)*(2/3-a)*6:e,i[c]=255*r;return i},i.hsl.hsv=function(t){var e=t[0],n=t[1]/100,a=t[2]/100,i=n,r=Math.max(a,.01);return n*=(a*=2)<=1?a:2-a,i*=r<=1?r:2-r,[e,100*(0===a?2*i/(r+i):2*n/(a+n)),(a+n)/2*100]},i.hsv.rgb=function(t){var e=t[0]/60,n=t[1]/100,a=t[2]/100,i=Math.floor(e)%6,r=e-Math.floor(e),o=255*a*(1-n),s=255*a*(1-n*r),l=255*a*(1-n*(1-r));switch(a*=255,i){case 0:return[a,l,o];case 1:return[s,a,o];case 2:return[o,a,l];case 3:return[o,s,a];case 4:return[l,o,a];case 5:return[a,o,s]}},i.hsv.hsl=function(t){var e,n,a,i=t[0],r=t[1]/100,o=t[2]/100,s=Math.max(o,.01);return a=(2-r)*o,n=r*s,[i,100*(n=(n/=(e=(2-r)*s)<=1?e:2-e)||0),100*(a/=2)]},i.hwb.rgb=function(t){var e,n,a,i,r,o,s,l=t[0]/360,c=t[1]/100,u=t[2]/100,d=c+u;switch(d>1&&(c/=d,u/=d),a=6*l-(e=Math.floor(6*l)),0!=(1&e)&&(a=1-a),i=c+a*((n=1-u)-c),e){default:case 6:case 0:r=n,o=i,s=c;break;case 1:r=i,o=n,s=c;break;case 2:r=c,o=n,s=i;break;case 3:r=c,o=i,s=n;break;case 4:r=i,o=c,s=n;break;case 5:r=n,o=c,s=i}return[255*r,255*o,255*s]},i.cmyk.rgb=function(t){var e=t[0]/100,n=t[1]/100,a=t[2]/100,i=t[3]/100;return[255*(1-Math.min(1,e*(1-i)+i)),255*(1-Math.min(1,n*(1-i)+i)),255*(1-Math.min(1,a*(1-i)+i))]},i.xyz.rgb=function(t){var e,n,a,i=t[0]/100,r=t[1]/100,o=t[2]/100;return n=-.9689*i+1.8758*r+.0415*o,a=.0557*i+-.204*r+1.057*o,e=(e=3.2406*i+-1.5372*r+-.4986*o)>.0031308?1.055*Math.pow(e,1/2.4)-.055:12.92*e,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,a=a>.0031308?1.055*Math.pow(a,1/2.4)-.055:12.92*a,[255*(e=Math.min(Math.max(0,e),1)),255*(n=Math.min(Math.max(0,n),1)),255*(a=Math.min(Math.max(0,a),1))]},i.xyz.lab=function(t){var e=t[0],n=t[1],a=t[2];return n/=100,a/=108.883,e=(e/=95.047)>.008856?Math.pow(e,1/3):7.787*e+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(e-n),200*(n-(a=a>.008856?Math.pow(a,1/3):7.787*a+16/116))]},i.lab.xyz=function(t){var e,n,a,i=t[0];e=t[1]/500+(n=(i+16)/116),a=n-t[2]/200;var r=Math.pow(n,3),o=Math.pow(e,3),s=Math.pow(a,3);return n=r>.008856?r:(n-16/116)/7.787,e=o>.008856?o:(e-16/116)/7.787,a=s>.008856?s:(a-16/116)/7.787,[e*=95.047,n*=100,a*=108.883]},i.lab.lch=function(t){var e,n=t[0],a=t[1],i=t[2];return(e=360*Math.atan2(i,a)/2/Math.PI)<0&&(e+=360),[n,Math.sqrt(a*a+i*i),e]},i.lch.lab=function(t){var e,n=t[0],a=t[1];return e=t[2]/360*2*Math.PI,[n,a*Math.cos(e),a*Math.sin(e)]},i.rgb.ansi16=function(t){var e=t[0],n=t[1],a=t[2],r=1 in arguments?arguments[1]:i.rgb.hsv(t)[2];if(0===(r=Math.round(r/50)))return 30;var o=30+(Math.round(a/255)<<2|Math.round(n/255)<<1|Math.round(e/255));return 2===r&&(o+=60),o},i.hsv.ansi16=function(t){return i.rgb.ansi16(i.hsv.rgb(t),t[2])},i.rgb.ansi256=function(t){var e=t[0],n=t[1],a=t[2];return e===n&&n===a?e<8?16:e>248?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(n/255*5)+Math.round(a/255*5)},i.ansi16.rgb=function(t){var e=t%10;if(0===e||7===e)return t>50&&(e+=3.5),[e=e/10.5*255,e,e];var n=.5*(1+~~(t>50));return[(1&e)*n*255,(e>>1&1)*n*255,(e>>2&1)*n*255]},i.ansi256.rgb=function(t){if(t>=232){var e=10*(t-232)+8;return[e,e,e]}var n;return t-=16,[Math.floor(t/36)/5*255,Math.floor((n=t%36)/6)/5*255,n%6/5*255]},i.rgb.hex=function(t){var e=(((255&Math.round(t[0]))<<16)+((255&Math.round(t[1]))<<8)+(255&Math.round(t[2]))).toString(16).toUpperCase();return"000000".substring(e.length)+e},i.hex.rgb=function(t){var e=t.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!e)return[0,0,0];var n=e[0];3===e[0].length&&(n=n.split("").map((function(t){return t+t})).join(""));var a=parseInt(n,16);return[a>>16&255,a>>8&255,255&a]},i.rgb.hcg=function(t){var e,n=t[0]/255,a=t[1]/255,i=t[2]/255,r=Math.max(Math.max(n,a),i),o=Math.min(Math.min(n,a),i),s=r-o;return e=s<=0?0:r===n?(a-i)/s%6:r===a?2+(i-n)/s:4+(n-a)/s+4,e/=6,[360*(e%=1),100*s,100*(s<1?o/(1-s):0)]},i.hsl.hcg=function(t){var e=t[1]/100,n=t[2]/100,a=1,i=0;return(a=n<.5?2*e*n:2*e*(1-n))<1&&(i=(n-.5*a)/(1-a)),[t[0],100*a,100*i]},i.hsv.hcg=function(t){var e=t[1]/100,n=t[2]/100,a=e*n,i=0;return a<1&&(i=(n-a)/(1-a)),[t[0],100*a,100*i]},i.hcg.rgb=function(t){var e=t[0]/360,n=t[1]/100,a=t[2]/100;if(0===n)return[255*a,255*a,255*a];var i,r=[0,0,0],o=e%1*6,s=o%1,l=1-s;switch(Math.floor(o)){case 0:r[0]=1,r[1]=s,r[2]=0;break;case 1:r[0]=l,r[1]=1,r[2]=0;break;case 2:r[0]=0,r[1]=1,r[2]=s;break;case 3:r[0]=0,r[1]=l,r[2]=1;break;case 4:r[0]=s,r[1]=0,r[2]=1;break;default:r[0]=1,r[1]=0,r[2]=l}return i=(1-n)*a,[255*(n*r[0]+i),255*(n*r[1]+i),255*(n*r[2]+i)]},i.hcg.hsv=function(t){var e=t[1]/100,n=e+t[2]/100*(1-e),a=0;return n>0&&(a=e/n),[t[0],100*a,100*n]},i.hcg.hsl=function(t){var e=t[1]/100,n=t[2]/100*(1-e)+.5*e,a=0;return n>0&&n<.5?a=e/(2*n):n>=.5&&n<1&&(a=e/(2*(1-n))),[t[0],100*a,100*n]},i.hcg.hwb=function(t){var e=t[1]/100,n=e+t[2]/100*(1-e);return[t[0],100*(n-e),100*(1-n)]},i.hwb.hcg=function(t){var e=t[1]/100,n=1-t[2]/100,a=n-e,i=0;return a<1&&(i=(n-a)/(1-a)),[t[0],100*a,100*i]},i.apple.rgb=function(t){return[t[0]/65535*255,t[1]/65535*255,t[2]/65535*255]},i.rgb.apple=function(t){return[t[0]/255*65535,t[1]/255*65535,t[2]/255*65535]},i.gray.rgb=function(t){return[t[0]/100*255,t[0]/100*255,t[0]/100*255]},i.gray.hsl=i.gray.hsv=function(t){return[0,0,t[0]]},i.gray.hwb=function(t){return[0,100,t[0]]},i.gray.cmyk=function(t){return[0,0,0,t[0]]},i.gray.lab=function(t){return[t[0],0,0]},i.gray.hex=function(t){var e=255&Math.round(t[0]/100*255),n=((e<<16)+(e<<8)+e).toString(16).toUpperCase();return"000000".substring(n.length)+n},i.rgb.gray=function(t){return[(t[0]+t[1]+t[2])/3/255*100]}}));function a(t){var e=function(){for(var t={},e=Object.keys(n),a=e.length,i=0;i<a;i++)t[e[i]]={distance:-1,parent:null};return t}(),a=[t];for(e[t].distance=0;a.length;)for(var i=a.pop(),r=Object.keys(n[i]),o=r.length,s=0;s<o;s++){var l=r[s],c=e[l];-1===c.distance&&(c.distance=e[i].distance+1,c.parent=i,a.unshift(l))}return e}function i(t,e){return function(n){return e(t(n))}}function r(t,e){for(var a=[e[t].parent,t],r=n[e[t].parent][t],o=e[t].parent;e[o].parent;)a.unshift(e[o].parent),r=i(n[e[o].parent][o],r),o=e[o].parent;return r.conversion=a,r}n.rgb,n.hsl,n.hsv,n.hwb,n.cmyk,n.xyz,n.lab,n.lch,n.hex,n.keyword,n.ansi16,n.ansi256,n.hcg,n.apple,n.gray;var o={};Object.keys(n).forEach((function(t){o[t]={},Object.defineProperty(o[t],"channels",{value:n[t].channels}),Object.defineProperty(o[t],"labels",{value:n[t].labels});var e=function(t){for(var e=a(t),n={},i=Object.keys(e),o=i.length,s=0;s<o;s++){var l=i[s];null!==e[l].parent&&(n[l]=r(l,e))}return n}(t);Object.keys(e).forEach((function(n){var a=e[n];o[t][n]=function(t){var e=function(e){if(null==e)return e;arguments.length>1&&(e=Array.prototype.slice.call(arguments));var n=t(e);if("object"==typeof n)for(var a=n.length,i=0;i<a;i++)n[i]=Math.round(n[i]);return n};return"conversion"in t&&(e.conversion=t.conversion),e}(a),o[t][n].raw=function(t){var e=function(e){return null==e?e:(arguments.length>1&&(e=Array.prototype.slice.call(arguments)),t(e))};return"conversion"in t&&(e.conversion=t.conversion),e}(a)}))}));var s=o,l={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},c={getRgba:u,getHsla:d,getRgb:function(t){var e=u(t);return e&&e.slice(0,3)},getHsl:function(t){var e=d(t);return e&&e.slice(0,3)},getHwb:h,getAlpha:function(t){var e=u(t);return e||(e=d(t))||(e=h(t))?e[3]:void 0},hexString:function(t,e){return e=void 0!==e&&3===t.length?e:t[3],"#"+b(t[0])+b(t[1])+b(t[2])+(e>=0&&e<1?b(Math.round(255*e)):"")},rgbString:function(t,e){return e<1||t[3]&&t[3]<1?f(t,e):"rgb("+t[0]+", "+t[1]+", "+t[2]+")"},rgbaString:f,percentString:function(t,e){if(e<1||t[3]&&t[3]<1)return g(t,e);var n=Math.round(t[0]/255*100),a=Math.round(t[1]/255*100),i=Math.round(t[2]/255*100);return"rgb("+n+"%, "+a+"%, "+i+"%)"},percentaString:g,hslString:function(t,e){return e<1||t[3]&&t[3]<1?m(t,e):"hsl("+t[0]+", "+t[1]+"%, "+t[2]+"%)"},hslaString:m,hwbString:function(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"hwb("+t[0]+", "+t[1]+"%, "+t[2]+"%"+(void 0!==e&&1!==e?", "+e:"")+")"},keyword:function(t){return v[t.slice(0,3)]}};function u(t){if(t){var e=[0,0,0],n=1,a=t.match(/^#([a-fA-F0-9]{3,4})$/i),i="";if(a){i=(a=a[1])[3];for(var r=0;r<e.length;r++)e[r]=parseInt(a[r]+a[r],16);i&&(n=Math.round(parseInt(i+i,16)/255*100)/100)}else if(a=t.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)){for(i=a[2],a=a[1],r=0;r<e.length;r++)e[r]=parseInt(a.slice(2*r,2*r+2),16);i&&(n=Math.round(parseInt(i,16)/255*100)/100)}else if(a=t.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(r=0;r<e.length;r++)e[r]=parseInt(a[r+1]);n=parseFloat(a[4])}else if(a=t.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(r=0;r<e.length;r++)e[r]=Math.round(2.55*parseFloat(a[r+1]));n=parseFloat(a[4])}else if(a=t.match(/(\w+)/)){if("transparent"==a[1])return[0,0,0,0];if(!(e=l[a[1]]))return}for(r=0;r<e.length;r++)e[r]=p(e[r],0,255);return n=n||0==n?p(n,0,1):1,e[3]=n,e}}function d(t){if(t){var e=t.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(e){var n=parseFloat(e[4]);return[p(parseInt(e[1]),0,360),p(parseFloat(e[2]),0,100),p(parseFloat(e[3]),0,100),p(isNaN(n)?1:n,0,1)]}}}function h(t){if(t){var e=t.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(e){var n=parseFloat(e[4]);return[p(parseInt(e[1]),0,360),p(parseFloat(e[2]),0,100),p(parseFloat(e[3]),0,100),p(isNaN(n)?1:n,0,1)]}}}function f(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"rgba("+t[0]+", "+t[1]+", "+t[2]+", "+e+")"}function g(t,e){return"rgba("+Math.round(t[0]/255*100)+"%, "+Math.round(t[1]/255*100)+"%, "+Math.round(t[2]/255*100)+"%, "+(e||t[3]||1)+")"}function m(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"hsla("+t[0]+", "+t[1]+"%, "+t[2]+"%, "+e+")"}function p(t,e,n){return Math.min(Math.max(e,t),n)}function b(t){var e=t.toString(16).toUpperCase();return e.length<2?"0"+e:e}var v={};for(var y in l)v[l[y]]=y;var x=function(t){return t instanceof x?t:this instanceof x?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void("string"==typeof t?(e=c.getRgba(t))?this.setValues("rgb",e):(e=c.getHsla(t))?this.setValues("hsl",e):(e=c.getHwb(t))&&this.setValues("hwb",e):"object"==typeof t&&(void 0!==(e=t).r||void 0!==e.red?this.setValues("rgb",e):void 0!==e.l||void 0!==e.lightness?this.setValues("hsl",e):void 0!==e.v||void 0!==e.value?this.setValues("hsv",e):void 0!==e.w||void 0!==e.whiteness?this.setValues("hwb",e):void 0===e.c&&void 0===e.cyan||this.setValues("cmyk",e)))):new x(t);var e};x.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var t=this.values;return 1!==t.alpha?t.hwb.concat([t.alpha]):t.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var t=this.values;return t.rgb.concat([t.alpha])},hslaArray:function(){var t=this.values;return t.hsl.concat([t.alpha])},alpha:function(t){return void 0===t?this.values.alpha:(this.setValues("alpha",t),this)},red:function(t){return this.setChannel("rgb",0,t)},green:function(t){return this.setChannel("rgb",1,t)},blue:function(t){return this.setChannel("rgb",2,t)},hue:function(t){return t&&(t=(t%=360)<0?360+t:t),this.setChannel("hsl",0,t)},saturation:function(t){return this.setChannel("hsl",1,t)},lightness:function(t){return this.setChannel("hsl",2,t)},saturationv:function(t){return this.setChannel("hsv",1,t)},whiteness:function(t){return this.setChannel("hwb",1,t)},blackness:function(t){return this.setChannel("hwb",2,t)},value:function(t){return this.setChannel("hsv",2,t)},cyan:function(t){return this.setChannel("cmyk",0,t)},magenta:function(t){return this.setChannel("cmyk",1,t)},yellow:function(t){return this.setChannel("cmyk",2,t)},black:function(t){return this.setChannel("cmyk",3,t)},hexString:function(){return c.hexString(this.values.rgb)},rgbString:function(){return c.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return c.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return c.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return c.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return c.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return c.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return c.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var t=this.values.rgb;return t[0]<<16|t[1]<<8|t[2]},luminosity:function(){for(var t=this.values.rgb,e=[],n=0;n<t.length;n++){var a=t[n]/255;e[n]=a<=.03928?a/12.92:Math.pow((a+.055)/1.055,2.4)}return.2126*e[0]+.7152*e[1]+.0722*e[2]},contrast:function(t){var e=this.luminosity(),n=t.luminosity();return e>n?(e+.05)/(n+.05):(n+.05)/(e+.05)},level:function(t){var e=this.contrast(t);return e>=7.1?"AAA":e>=4.5?"AA":""},dark:function(){var t=this.values.rgb;return(299*t[0]+587*t[1]+114*t[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var t=[],e=0;e<3;e++)t[e]=255-this.values.rgb[e];return this.setValues("rgb",t),this},lighten:function(t){var e=this.values.hsl;return e[2]+=e[2]*t,this.setValues("hsl",e),this},darken:function(t){var e=this.values.hsl;return e[2]-=e[2]*t,this.setValues("hsl",e),this},saturate:function(t){var e=this.values.hsl;return e[1]+=e[1]*t,this.setValues("hsl",e),this},desaturate:function(t){var e=this.values.hsl;return e[1]-=e[1]*t,this.setValues("hsl",e),this},whiten:function(t){var e=this.values.hwb;return e[1]+=e[1]*t,this.setValues("hwb",e),this},blacken:function(t){var e=this.values.hwb;return e[2]+=e[2]*t,this.setValues("hwb",e),this},greyscale:function(){var t=this.values.rgb,e=.3*t[0]+.59*t[1]+.11*t[2];return this.setValues("rgb",[e,e,e]),this},clearer:function(t){var e=this.values.alpha;return this.setValues("alpha",e-e*t),this},opaquer:function(t){var e=this.values.alpha;return this.setValues("alpha",e+e*t),this},rotate:function(t){var e=this.values.hsl,n=(e[0]+t)%360;return e[0]=n<0?360+n:n,this.setValues("hsl",e),this},mix:function(t,e){var n=t,a=void 0===e?.5:e,i=2*a-1,r=this.alpha()-n.alpha(),o=((i*r==-1?i:(i+r)/(1+i*r))+1)/2,s=1-o;return this.rgb(o*this.red()+s*n.red(),o*this.green()+s*n.green(),o*this.blue()+s*n.blue()).alpha(this.alpha()*a+n.alpha()*(1-a))},toJSON:function(){return this.rgb()},clone:function(){var t,e,n=new x,a=this.values,i=n.values;for(var r in a)a.hasOwnProperty(r)&&(t=a[r],"[object Array]"===(e={}.toString.call(t))?i[r]=t.slice(0):"[object Number]"===e?i[r]=t:console.error("unexpected color value:",t));return n}},x.prototype.spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},x.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},x.prototype.getValues=function(t){for(var e=this.values,n={},a=0;a<t.length;a++)n[t.charAt(a)]=e[t][a];return 1!==e.alpha&&(n.a=e.alpha),n},x.prototype.setValues=function(t,e){var n,a,i=this.values,r=this.spaces,o=this.maxes,l=1;if(this.valid=!0,"alpha"===t)l=e;else if(e.length)i[t]=e.slice(0,t.length),l=e[t.length];else if(void 0!==e[t.charAt(0)]){for(n=0;n<t.length;n++)i[t][n]=e[t.charAt(n)];l=e.a}else if(void 0!==e[r[t][0]]){var c=r[t];for(n=0;n<t.length;n++)i[t][n]=e[c[n]];l=e.alpha}if(i.alpha=Math.max(0,Math.min(1,void 0===l?i.alpha:l)),"alpha"===t)return!1;for(n=0;n<t.length;n++)a=Math.max(0,Math.min(o[t][n],i[t][n])),i[t][n]=Math.round(a);for(var u in r)u!==t&&(i[u]=s[t][u](i[t]));return!0},x.prototype.setSpace=function(t,e){var n=e[0];return void 0===n?this.getValues(t):("number"==typeof n&&(n=Array.prototype.slice.call(e)),this.setValues(t,n),this)},x.prototype.setChannel=function(t,e,n){var a=this.values[t];return void 0===n?a[e]:(n===a[e]||(a[e]=n,this.setValues(t,a)),this)},"undefined"!=typeof window&&(window.Color=x);var _,O=x,w={noop:function(){},uid:(_=0,function(){return _++}),isNullOrUndef:function(t){return null==t},isArray:function(t){if(Array.isArray&&Array.isArray(t))return!0;var e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)},isObject:function(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)},isFinite:function(t){return("number"==typeof t||t instanceof Number)&&isFinite(t)},valueOrDefault:function(t,e){return void 0===t?e:t},valueAtIndexOrDefault:function(t,e,n){return w.valueOrDefault(w.isArray(t)?t[e]:t,n)},callback:function(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)},each:function(t,e,n,a){var i,r,o;if(w.isArray(t))if(r=t.length,a)for(i=r-1;i>=0;i--)e.call(n,t[i],i);else for(i=0;i<r;i++)e.call(n,t[i],i);else if(w.isObject(t))for(r=(o=Object.keys(t)).length,i=0;i<r;i++)e.call(n,t[o[i]],o[i])},arrayEquals:function(t,e){var n,a,i,r;if(!t||!e||t.length!==e.length)return!1;for(n=0,a=t.length;n<a;++n)if(i=t[n],r=e[n],i instanceof Array&&r instanceof Array){if(!w.arrayEquals(i,r))return!1}else if(i!==r)return!1;return!0},clone:function(t){if(w.isArray(t))return t.map(w.clone);if(w.isObject(t)){for(var e={},n=Object.keys(t),a=n.length,i=0;i<a;++i)e[n[i]]=w.clone(t[n[i]]);return e}return t},_merger:function(t,e,n,a){var i=e[t],r=n[t];w.isObject(i)&&w.isObject(r)?w.merge(i,r,a):e[t]=w.clone(r)},_mergerIf:function(t,e,n){var a=e[t],i=n[t];w.isObject(a)&&w.isObject(i)?w.mergeIf(a,i):e.hasOwnProperty(t)||(e[t]=w.clone(i))},merge:function(t,e,n){var a,i,r,o,s,l=w.isArray(e)?e:[e],c=l.length;if(!w.isObject(t))return t;for(a=(n=n||{}).merger||w._merger,i=0;i<c;++i)if(e=l[i],w.isObject(e))for(s=0,o=(r=Object.keys(e)).length;s<o;++s)a(r[s],t,e,n);return t},mergeIf:function(t,e){return w.merge(t,e,{merger:w._mergerIf})},extend:Object.assign||function(t){return w.merge(t,[].slice.call(arguments,1),{merger:function(t,e,n){e[t]=n[t]}})},inherits:function(t){var e=this,n=t&&t.hasOwnProperty("constructor")?t.constructor:function(){return e.apply(this,arguments)},a=function(){this.constructor=n};return a.prototype=e.prototype,n.prototype=new a,n.extend=w.inherits,t&&w.extend(n.prototype,t),n.__super__=e.prototype,n},_deprecated:function(t,e,n,a){void 0!==e&&console.warn(t+': "'+n+'" is deprecated. Please use "'+a+'" instead')}},k=w;w.callCallback=w.callback,w.indexOf=function(t,e,n){return Array.prototype.indexOf.call(t,e,n)},w.getValueOrDefault=w.valueOrDefault,w.getValueAtIndexOrDefault=w.valueAtIndexOrDefault;var M={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return(t-=1)*t*t+1},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-((t-=1)*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return t*t*t*t*t},easeOutQuint:function(t){return(t-=1)*t*t*t*t+1},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return 1-Math.cos(t*(Math.PI/2))},easeOutSine:function(t){return Math.sin(t*(Math.PI/2))},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t)-1)},easeInExpo:function(t){return 0===t?0:Math.pow(2,10*(t-1))},easeOutExpo:function(t){return 1===t?1:1-Math.pow(2,-10*t)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*--t))},easeInCirc:function(t){return t>=1?t:-(Math.sqrt(1-t*t)-1)},easeOutCirc:function(t){return Math.sqrt(1-(t-=1)*t)},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var e=1.70158,n=0,a=1;return 0===t?0:1===t?1:(n||(n=.3),a<1?(a=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/a),-a*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n))},easeOutElastic:function(t){var e=1.70158,n=0,a=1;return 0===t?0:1===t?1:(n||(n=.3),a<1?(a=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/a),a*Math.pow(2,-10*t)*Math.sin((t-e)*(2*Math.PI)/n)+1)},easeInOutElastic:function(t){var e=1.70158,n=0,a=1;return 0===t?0:2==(t/=.5)?1:(n||(n=.45),a<1?(a=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/a),t<1?a*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n)*-.5:a*Math.pow(2,-10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n)*.5+1)},easeInBack:function(t){var e=1.70158;return t*t*((e+1)*t-e)},easeOutBack:function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:function(t){return 1-M.easeOutBounce(1-t)},easeOutBounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},easeInOutBounce:function(t){return t<.5?.5*M.easeInBounce(2*t):.5*M.easeOutBounce(2*t-1)+.5}},j={effects:M};k.easingEffects=M;var S=Math.PI,D=S/180,C=2*S,P=S/2,T=S/4,A=2*S/3,F={clear:function(t){t.ctx.clearRect(0,0,t.width,t.height)},roundedRect:function(t,e,n,a,i,r){if(r){var o=Math.min(r,i/2,a/2),s=e+o,l=n+o,c=e+a-o,u=n+i-o;t.moveTo(e,l),s<c&&l<u?(t.arc(s,l,o,-S,-P),t.arc(c,l,o,-P,0),t.arc(c,u,o,0,P),t.arc(s,u,o,P,S)):s<c?(t.moveTo(s,n),t.arc(c,l,o,-P,P),t.arc(s,l,o,P,S+P)):l<u?(t.arc(s,l,o,-S,0),t.arc(s,u,o,0,S)):t.arc(s,l,o,-S,S),t.closePath(),t.moveTo(e,n)}else t.rect(e,n,a,i)},drawPoint:function(t,e,n,a,i,r){var o,s,l,c,u,d=(r||0)*D;if(e&&"object"==typeof e&&("[object HTMLImageElement]"===(o=e.toString())||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(a,i),t.rotate(d),t.drawImage(e,-e.width/2,-e.height/2,e.width,e.height),void t.restore();if(!(isNaN(n)||n<=0)){switch(t.beginPath(),e){default:t.arc(a,i,n,0,C),t.closePath();break;case"triangle":t.moveTo(a+Math.sin(d)*n,i-Math.cos(d)*n),d+=A,t.lineTo(a+Math.sin(d)*n,i-Math.cos(d)*n),d+=A,t.lineTo(a+Math.sin(d)*n,i-Math.cos(d)*n),t.closePath();break;case"rectRounded":c=n-(u=.516*n),s=Math.cos(d+T)*c,l=Math.sin(d+T)*c,t.arc(a-s,i-l,u,d-S,d-P),t.arc(a+l,i-s,u,d-P,d),t.arc(a+s,i+l,u,d,d+P),t.arc(a-l,i+s,u,d+P,d+S),t.closePath();break;case"rect":if(!r){c=Math.SQRT1_2*n,t.rect(a-c,i-c,2*c,2*c);break}d+=T;case"rectRot":s=Math.cos(d)*n,l=Math.sin(d)*n,t.moveTo(a-s,i-l),t.lineTo(a+l,i-s),t.lineTo(a+s,i+l),t.lineTo(a-l,i+s),t.closePath();break;case"crossRot":d+=T;case"cross":s=Math.cos(d)*n,l=Math.sin(d)*n,t.moveTo(a-s,i-l),t.lineTo(a+s,i+l),t.moveTo(a+l,i-s),t.lineTo(a-l,i+s);break;case"star":s=Math.cos(d)*n,l=Math.sin(d)*n,t.moveTo(a-s,i-l),t.lineTo(a+s,i+l),t.moveTo(a+l,i-s),t.lineTo(a-l,i+s),d+=T,s=Math.cos(d)*n,l=Math.sin(d)*n,t.moveTo(a-s,i-l),t.lineTo(a+s,i+l),t.moveTo(a+l,i-s),t.lineTo(a-l,i+s);break;case"line":s=Math.cos(d)*n,l=Math.sin(d)*n,t.moveTo(a-s,i-l),t.lineTo(a+s,i+l);break;case"dash":t.moveTo(a,i),t.lineTo(a+Math.cos(d)*n,i+Math.sin(d)*n)}t.fill(),t.stroke()}},_isPointInArea:function(t,e){return t.x>e.left-1e-6&&t.x<e.right+1e-6&&t.y>e.top-1e-6&&t.y<e.bottom+1e-6},clipArea:function(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()},unclipArea:function(t){t.restore()},lineTo:function(t,e,n,a){var i=n.steppedLine;if(i){if("middle"===i){var r=(e.x+n.x)/2;t.lineTo(r,a?n.y:e.y),t.lineTo(r,a?e.y:n.y)}else"after"===i&&!a||"after"!==i&&a?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y);t.lineTo(n.x,n.y)}else n.tension?t.bezierCurveTo(a?e.controlPointPreviousX:e.controlPointNextX,a?e.controlPointPreviousY:e.controlPointNextY,a?n.controlPointNextX:n.controlPointPreviousX,a?n.controlPointNextY:n.controlPointPreviousY,n.x,n.y):t.lineTo(n.x,n.y)}},I=F;k.clear=F.clear,k.drawRoundedRectangle=function(t){t.beginPath(),F.roundedRect.apply(F,arguments)};var N={_set:function(t,e){return k.merge(this[t]||(this[t]={}),e)}};N._set("global",{defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",defaultLineHeight:1.2,showLines:!0});var R=N,L=k.valueOrDefault,Y={toLineHeight:function(t,e){var n=(""+t).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t},toPadding:function(t){var e,n,a,i;return k.isObject(t)?(e=+t.top||0,n=+t.right||0,a=+t.bottom||0,i=+t.left||0):e=n=a=i=+t||0,{top:e,right:n,bottom:a,left:i,height:e+a,width:i+n}},_parseFont:function(t){var e=R.global,n=L(t.fontSize,e.defaultFontSize),a={family:L(t.fontFamily,e.defaultFontFamily),lineHeight:k.options.toLineHeight(L(t.lineHeight,e.defaultLineHeight),n),size:n,style:L(t.fontStyle,e.defaultFontStyle),weight:null,string:""};return a.string=function(t){return!t||k.isNullOrUndef(t.size)||k.isNullOrUndef(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(a),a},resolve:function(t,e,n,a){var i,r,o,s=!0;for(i=0,r=t.length;i<r;++i)if(void 0!==(o=t[i])&&(void 0!==e&&"function"==typeof o&&(o=o(e),s=!1),void 0!==n&&k.isArray(o)&&(o=o[n],s=!1),void 0!==o))return a&&!s&&(a.cacheable=!1),o}},W={_factorize:function(t){var e,n=[],a=Math.sqrt(t);for(e=1;e<a;e++)t%e==0&&(n.push(e),n.push(t/e));return a===(0|a)&&n.push(a),n.sort((function(t,e){return t-e})).pop(),n},log10:Math.log10||function(t){var e=Math.log(t)*Math.LOG10E,n=Math.round(e);return t===Math.pow(10,n)?n:e}},E=W;k.log10=W.log10;var z=k,V=j,B=I,H=Y,U=E,G={getRtlAdapter:function(t,e,n){return t?function(t,e){return{x:function(n){return t+t+e-n},setWidth:function(t){e=t},textAlign:function(t){return"center"===t?t:"right"===t?"left":"right"},xPlus:function(t,e){return t-e},leftForLtr:function(t,e){return t-e}}}(e,n):{x:function(t){return t},setWidth:function(t){},textAlign:function(t){return t},xPlus:function(t,e){return t+e},leftForLtr:function(t,e){return t}}},overrideTextDirection:function(t,e){var n,a;"ltr"!==e&&"rtl"!==e||(a=[(n=t.canvas.style).getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",e,"important"),t.prevTextDirection=a)},restoreTextDirection:function(t){var e=t.prevTextDirection;void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}};z.easing=V,z.canvas=B,z.options=H,z.math=U,z.rtl=G;var q=function(t){z.extend(this,t),this.initialize.apply(this,arguments)};z.extend(q.prototype,{_type:void 0,initialize:function(){this.hidden=!1},pivot:function(){var t=this;return t._view||(t._view=z.extend({},t._model)),t._start={},t},transition:function(t){var e=this,n=e._model,a=e._start,i=e._view;return n&&1!==t?(i||(i=e._view={}),a||(a=e._start={}),function(t,e,n,a){var i,r,o,s,l,c,u,d,h,f=Object.keys(n);for(i=0,r=f.length;i<r;++i)if(c=n[o=f[i]],e.hasOwnProperty(o)||(e[o]=c),(s=e[o])!==c&&"_"!==o[0]){if(t.hasOwnProperty(o)||(t[o]=s),(u=typeof c)==typeof(l=t[o]))if("string"===u){if((d=O(l)).valid&&(h=O(c)).valid){e[o]=h.mix(d,a).rgbString();continue}}else if(z.isFinite(l)&&z.isFinite(c)){e[o]=l+(c-l)*a;continue}e[o]=c}}(a,i,n,t),e):(e._view=z.extend({},n),e._start=null,e)},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return z.isNumber(this._model.x)&&z.isNumber(this._model.y)}}),q.extend=z.inherits;var Z=q,$=Z.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null}),X=$;Object.defineProperty($.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty($.prototype,"chartInstance",{get:function(){return this.chart},set:function(t){this.chart=t}}),R._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:z.noop,onComplete:z.noop}});var K={animations:[],request:null,addAnimation:function(t,e,n,a){var i,r,o=this.animations;for(e.chart=t,e.startTime=Date.now(),e.duration=n,a||(t.animating=!0),i=0,r=o.length;i<r;++i)if(o[i].chart===t)return void(o[i]=e);o.push(e),1===o.length&&this.requestAnimationFrame()},cancelAnimation:function(t){var e=z.findIndex(this.animations,(function(e){return e.chart===t}));-1!==e&&(this.animations.splice(e,1),t.animating=!1)},requestAnimationFrame:function(){var t=this;null===t.request&&(t.request=z.requestAnimFrame.call(window,(function(){t.request=null,t.startDigest()})))},startDigest:function(){this.advance(),this.animations.length>0&&this.requestAnimationFrame()},advance:function(){for(var t,e,n,a,i=this.animations,r=0;r<i.length;)e=(t=i[r]).chart,n=t.numSteps,a=Math.floor((Date.now()-t.startTime)/t.duration*n)+1,t.currentStep=Math.min(a,n),z.callback(t.render,[e,t],e),z.callback(t.onAnimationProgress,[t],e),t.currentStep>=n?(z.callback(t.onAnimationComplete,[t],e),e.animating=!1,i.splice(r,1)):++r}},J=z.options.resolve,Q=["push","pop","shift","splice","unshift"];function tt(t,e){var n=t._chartjs;if(n){var a=n.listeners,i=a.indexOf(e);-1!==i&&a.splice(i,1),a.length>0||(Q.forEach((function(e){delete t[e]})),delete t._chartjs)}}var et=function(t,e){this.initialize(t,e)};z.extend(et.prototype,{datasetElementType:null,dataElementType:null,_datasetElementOptions:["backgroundColor","borderCapStyle","borderColor","borderDash","borderDashOffset","borderJoinStyle","borderWidth"],_dataElementOptions:["backgroundColor","borderColor","borderWidth","pointStyle"],initialize:function(t,e){var n=this;n.chart=t,n.index=e,n.linkScales(),n.addElements(),n._type=n.getMeta().type},updateIndex:function(t){this.index=t},linkScales:function(){var t=this.getMeta(),e=this.chart,n=e.scales,a=this.getDataset(),i=e.options.scales;null!==t.xAxisID&&t.xAxisID in n&&!a.xAxisID||(t.xAxisID=a.xAxisID||i.xAxes[0].id),null!==t.yAxisID&&t.yAxisID in n&&!a.yAxisID||(t.yAxisID=a.yAxisID||i.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(t){return this.chart.scales[t]},_getValueScaleId:function(){return this.getMeta().yAxisID},_getIndexScaleId:function(){return this.getMeta().xAxisID},_getValueScale:function(){return this.getScaleForId(this._getValueScaleId())},_getIndexScale:function(){return this.getScaleForId(this._getIndexScaleId())},reset:function(){this._update(!0)},destroy:function(){this._data&&tt(this._data,this)},createMetaDataset:function(){var t=this.datasetElementType;return t&&new t({_chart:this.chart,_datasetIndex:this.index})},createMetaData:function(t){var e=this.dataElementType;return e&&new e({_chart:this.chart,_datasetIndex:this.index,_index:t})},addElements:function(){var t,e,n=this.getMeta(),a=this.getDataset().data||[],i=n.data;for(t=0,e=a.length;t<e;++t)i[t]=i[t]||this.createMetaData(t);n.dataset=n.dataset||this.createMetaDataset()},addElementAndReset:function(t){var e=this.createMetaData(t);this.getMeta().data.splice(t,0,e),this.updateElement(e,t,!0)},buildOrUpdateElements:function(){var t,e,n=this,a=n.getDataset(),i=a.data||(a.data=[]);n._data!==i&&(n._data&&tt(n._data,n),i&&Object.isExtensible(i)&&(e=n,(t=i)._chartjs?t._chartjs.listeners.push(e):(Object.defineProperty(t,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[e]}}),Q.forEach((function(e){var n="onData"+e.charAt(0).toUpperCase()+e.slice(1),a=t[e];Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value:function(){var e=Array.prototype.slice.call(arguments),i=a.apply(this,e);return z.each(t._chartjs.listeners,(function(t){"function"==typeof t[n]&&t[n].apply(t,e)})),i}})})))),n._data=i),n.resyncElements()},_configure:function(){this._config=z.merge({},[this.chart.options.datasets[this._type],this.getDataset()],{merger:function(t,e,n){"_meta"!==t&&"data"!==t&&z._merger(t,e,n)}})},_update:function(t){this._configure(),this._cachedDataOpts=null,this.update(t)},update:z.noop,transition:function(t){for(var e=this.getMeta(),n=e.data||[],a=n.length,i=0;i<a;++i)n[i].transition(t);e.dataset&&e.dataset.transition(t)},draw:function(){var t=this.getMeta(),e=t.data||[],n=e.length,a=0;for(t.dataset&&t.dataset.draw();a<n;++a)e[a].draw()},getStyle:function(t){var e,n=this.getMeta(),a=n.dataset;return this._configure(),a&&void 0===t?e=this._resolveDatasetElementOptions(a||{}):(t=t||0,e=this._resolveDataElementOptions(n.data[t]||{},t)),!1!==e.fill&&null!==e.fill||(e.backgroundColor=e.borderColor),e},_resolveDatasetElementOptions:function(t,e){var n,a,i,r,o=this,s=o.chart,l=o._config,c=t.custom||{},u=s.options.elements[o.datasetElementType.prototype._type]||{},d=o._datasetElementOptions,h={},f={chart:s,dataset:o.getDataset(),datasetIndex:o.index,hover:e};for(n=0,a=d.length;n<a;++n)i=d[n],r=e?"hover"+i.charAt(0).toUpperCase()+i.slice(1):i,h[i]=J([c[r],l[r],u[r]],f);return h},_resolveDataElementOptions:function(t,e){var n=this,a=t&&t.custom,i=n._cachedDataOpts;if(i&&!a)return i;var r,o,s,l,c=n.chart,u=n._config,d=c.options.elements[n.dataElementType.prototype._type]||{},h=n._dataElementOptions,f={},g={chart:c,dataIndex:e,dataset:n.getDataset(),datasetIndex:n.index},m={cacheable:!a};if(a=a||{},z.isArray(h))for(o=0,s=h.length;o<s;++o)f[l=h[o]]=J([a[l],u[l],d[l]],g,e,m);else for(o=0,s=(r=Object.keys(h)).length;o<s;++o)f[l=r[o]]=J([a[l],u[h[l]],u[l],d[l]],g,e,m);return m.cacheable&&(n._cachedDataOpts=Object.freeze(f)),f},removeHoverStyle:function(t){z.merge(t._model,t.$previousStyle||{}),delete t.$previousStyle},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],n=t._index,a=t.custom||{},i=t._model,r=z.getHoverColor;t.$previousStyle={backgroundColor:i.backgroundColor,borderColor:i.borderColor,borderWidth:i.borderWidth},i.backgroundColor=J([a.hoverBackgroundColor,e.hoverBackgroundColor,r(i.backgroundColor)],void 0,n),i.borderColor=J([a.hoverBorderColor,e.hoverBorderColor,r(i.borderColor)],void 0,n),i.borderWidth=J([a.hoverBorderWidth,e.hoverBorderWidth,i.borderWidth],void 0,n)},_removeDatasetHoverStyle:function(){var t=this.getMeta().dataset;t&&this.removeHoverStyle(t)},_setDatasetHoverStyle:function(){var t,e,n,a,i,r,o=this.getMeta().dataset,s={};if(o){for(r=o._model,i=this._resolveDatasetElementOptions(o,!0),t=0,e=(a=Object.keys(i)).length;t<e;++t)s[n=a[t]]=r[n],r[n]=i[n];o.$previousStyle=s}},resyncElements:function(){var t=this.getMeta(),e=this.getDataset().data,n=t.data.length,a=e.length;a<n?t.data.splice(a,n-a):a>n&&this.insertElements(n,a-n)},insertElements:function(t,e){for(var n=0;n<e;++n)this.addElementAndReset(t+n)},onDataPush:function(){var t=arguments.length;this.insertElements(this.getDataset().data.length-t,t)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(t,e){this.getMeta().data.splice(t,e),this.insertElements(t,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),et.extend=z.inherits;var nt=et,at=2*Math.PI;function it(t,e){var n=e.startAngle,a=e.endAngle,i=e.pixelMargin,r=i/e.outerRadius,o=e.x,s=e.y;t.beginPath(),t.arc(o,s,e.outerRadius,n-r,a+r),e.innerRadius>i?(r=i/e.innerRadius,t.arc(o,s,e.innerRadius-i,a+r,n-r,!0)):t.arc(o,s,i,a+Math.PI/2,n-Math.PI/2),t.closePath(),t.clip()}function rt(t,e,n){var a="inner"===e.borderAlign;a?(t.lineWidth=2*e.borderWidth,t.lineJoin="round"):(t.lineWidth=e.borderWidth,t.lineJoin="bevel"),n.fullCircles&&function(t,e,n,a){var i,r=n.endAngle;for(a&&(n.endAngle=n.startAngle+at,it(t,n),n.endAngle=r,n.endAngle===n.startAngle&&n.fullCircles&&(n.endAngle+=at,n.fullCircles--)),t.beginPath(),t.arc(n.x,n.y,n.innerRadius,n.startAngle+at,n.startAngle,!0),i=0;i<n.fullCircles;++i)t.stroke();for(t.beginPath(),t.arc(n.x,n.y,e.outerRadius,n.startAngle,n.startAngle+at),i=0;i<n.fullCircles;++i)t.stroke()}(t,e,n,a),a&&it(t,n),t.beginPath(),t.arc(n.x,n.y,e.outerRadius,n.startAngle,n.endAngle),t.arc(n.x,n.y,n.innerRadius,n.endAngle,n.startAngle,!0),t.closePath(),t.stroke()}R._set("global",{elements:{arc:{backgroundColor:R.global.defaultColor,borderColor:"#fff",borderWidth:2,borderAlign:"center"}}});var ot=Z.extend({_type:"arc",inLabelRange:function(t){var e=this._view;return!!e&&Math.pow(t-e.x,2)<Math.pow(e.radius+e.hoverRadius,2)},inRange:function(t,e){var n=this._view;if(n){for(var a=z.getAngleFromPoint(n,{x:t,y:e}),i=a.angle,r=a.distance,o=n.startAngle,s=n.endAngle;s<o;)s+=at;for(;i>s;)i-=at;for(;i<o;)i+=at;var l=i>=o&&i<=s,c=r>=n.innerRadius&&r<=n.outerRadius;return l&&c}return!1},getCenterPoint:function(){var t=this._view,e=(t.startAngle+t.endAngle)/2,n=(t.innerRadius+t.outerRadius)/2;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},getArea:function(){var t=this._view;return Math.PI*((t.endAngle-t.startAngle)/(2*Math.PI))*(Math.pow(t.outerRadius,2)-Math.pow(t.innerRadius,2))},tooltipPosition:function(){var t=this._view,e=t.startAngle+(t.endAngle-t.startAngle)/2,n=(t.outerRadius-t.innerRadius)/2+t.innerRadius;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},draw:function(){var t,e=this._chart.ctx,n=this._view,a="inner"===n.borderAlign?.33:0,i={x:n.x,y:n.y,innerRadius:n.innerRadius,outerRadius:Math.max(n.outerRadius-a,0),pixelMargin:a,startAngle:n.startAngle,endAngle:n.endAngle,fullCircles:Math.floor(n.circumference/at)};if(e.save(),e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,i.fullCircles){for(i.endAngle=i.startAngle+at,e.beginPath(),e.arc(i.x,i.y,i.outerRadius,i.startAngle,i.endAngle),e.arc(i.x,i.y,i.innerRadius,i.endAngle,i.startAngle,!0),e.closePath(),t=0;t<i.fullCircles;++t)e.fill();i.endAngle=i.startAngle+n.circumference%at}e.beginPath(),e.arc(i.x,i.y,i.outerRadius,i.startAngle,i.endAngle),e.arc(i.x,i.y,i.innerRadius,i.endAngle,i.startAngle,!0),e.closePath(),e.fill(),n.borderWidth&&rt(e,n,i),e.restore()}}),st=z.valueOrDefault,lt=R.global.defaultColor;R._set("global",{elements:{line:{tension:.4,backgroundColor:lt,borderWidth:3,borderColor:lt,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}});var ct=Z.extend({_type:"line",draw:function(){var t,e,n,a=this,i=a._view,r=a._chart.ctx,o=i.spanGaps,s=a._children.slice(),l=R.global,c=l.elements.line,u=-1,d=a._loop;if(s.length){if(a._loop){for(t=0;t<s.length;++t)if(e=z.previousItem(s,t),!s[t]._view.skip&&e._view.skip){s=s.slice(t).concat(s.slice(0,t)),d=o;break}d&&s.push(s[0])}for(r.save(),r.lineCap=i.borderCapStyle||c.borderCapStyle,r.setLineDash&&r.setLineDash(i.borderDash||c.borderDash),r.lineDashOffset=st(i.borderDashOffset,c.borderDashOffset),r.lineJoin=i.borderJoinStyle||c.borderJoinStyle,r.lineWidth=st(i.borderWidth,c.borderWidth),r.strokeStyle=i.borderColor||l.defaultColor,r.beginPath(),(n=s[0]._view).skip||(r.moveTo(n.x,n.y),u=0),t=1;t<s.length;++t)n=s[t]._view,e=-1===u?z.previousItem(s,t):s[u],n.skip||(u!==t-1&&!o||-1===u?r.moveTo(n.x,n.y):z.canvas.lineTo(r,e._view,n),u=t);d&&r.closePath(),r.stroke(),r.restore()}}}),ut=z.valueOrDefault,dt=R.global.defaultColor;function ht(t){var e=this._view;return!!e&&Math.abs(t-e.x)<e.radius+e.hitRadius}R._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:dt,borderColor:dt,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var ft=Z.extend({_type:"point",inRange:function(t,e){var n=this._view;return!!n&&Math.pow(t-n.x,2)+Math.pow(e-n.y,2)<Math.pow(n.hitRadius+n.radius,2)},inLabelRange:ht,inXRange:ht,inYRange:function(t){var e=this._view;return!!e&&Math.abs(t-e.y)<e.radius+e.hitRadius},getCenterPoint:function(){var t=this._view;return{x:t.x,y:t.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y,padding:t.radius+t.borderWidth}},draw:function(t){var e=this._view,n=this._chart.ctx,a=e.pointStyle,i=e.rotation,r=e.radius,o=e.x,s=e.y,l=R.global,c=l.defaultColor;e.skip||(void 0===t||z.canvas._isPointInArea(e,t))&&(n.strokeStyle=e.borderColor||c,n.lineWidth=ut(e.borderWidth,l.elements.point.borderWidth),n.fillStyle=e.backgroundColor||c,z.canvas.drawPoint(n,a,r,o,s,i))}}),gt=R.global.defaultColor;function mt(t){return t&&void 0!==t.width}function pt(t){var e,n,a,i,r;return mt(t)?(r=t.width/2,e=t.x-r,n=t.x+r,a=Math.min(t.y,t.base),i=Math.max(t.y,t.base)):(r=t.height/2,e=Math.min(t.x,t.base),n=Math.max(t.x,t.base),a=t.y-r,i=t.y+r),{left:e,top:a,right:n,bottom:i}}function bt(t,e,n){return t===e?n:t===n?e:t}function vt(t,e,n){var a,i,r,o,s=t.borderWidth,l=function(t){var e=t.borderSkipped,n={};return e?(t.horizontal?t.base>t.x&&(e=bt(e,"left","right")):t.base<t.y&&(e=bt(e,"bottom","top")),n[e]=!0,n):n}(t);return z.isObject(s)?(a=+s.top||0,i=+s.right||0,r=+s.bottom||0,o=+s.left||0):a=i=r=o=+s||0,{t:l.top||a<0?0:a>n?n:a,r:l.right||i<0?0:i>e?e:i,b:l.bottom||r<0?0:r>n?n:r,l:l.left||o<0?0:o>e?e:o}}function yt(t,e,n){var a=null===e,i=null===n,r=!(!t||a&&i)&&pt(t);return r&&(a||e>=r.left&&e<=r.right)&&(i||n>=r.top&&n<=r.bottom)}R._set("global",{elements:{rectangle:{backgroundColor:gt,borderColor:gt,borderSkipped:"bottom",borderWidth:0}}});var xt=Z.extend({_type:"rectangle",draw:function(){var t=this._chart.ctx,e=this._view,n=function(t){var e=pt(t),n=e.right-e.left,a=e.bottom-e.top,i=vt(t,n/2,a/2);return{outer:{x:e.left,y:e.top,w:n,h:a},inner:{x:e.left+i.l,y:e.top+i.t,w:n-i.l-i.r,h:a-i.t-i.b}}}(e),a=n.outer,i=n.inner;t.fillStyle=e.backgroundColor,t.fillRect(a.x,a.y,a.w,a.h),a.w===i.w&&a.h===i.h||(t.save(),t.beginPath(),t.rect(a.x,a.y,a.w,a.h),t.clip(),t.fillStyle=e.borderColor,t.rect(i.x,i.y,i.w,i.h),t.fill("evenodd"),t.restore())},height:function(){var t=this._view;return t.base-t.y},inRange:function(t,e){return yt(this._view,t,e)},inLabelRange:function(t,e){var n=this._view;return mt(n)?yt(n,t,null):yt(n,null,e)},inXRange:function(t){return yt(this._view,t,null)},inYRange:function(t){return yt(this._view,null,t)},getCenterPoint:function(){var t,e,n=this._view;return mt(n)?(t=n.x,e=(n.y+n.base)/2):(t=(n.x+n.base)/2,e=n.y),{x:t,y:e}},getArea:function(){var t=this._view;return mt(t)?t.width*Math.abs(t.y-t.base):t.height*Math.abs(t.x-t.base)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y}}}),_t={},Ot=ot,wt=ct,kt=ft,Mt=xt;_t.Arc=Ot,_t.Line=wt,_t.Point=kt,_t.Rectangle=Mt;var jt=z._deprecated,St=z.valueOrDefault;function Dt(t,e,n){var a,i,r=n.barThickness,o=e.stackCount,s=e.pixels[t],l=z.isNullOrUndef(r)?function(t,e){var n,a,i,r,o=t._length;for(i=1,r=e.length;i<r;++i)o=Math.min(o,Math.abs(e[i]-e[i-1]));for(i=0,r=t.getTicks().length;i<r;++i)a=t.getPixelForTick(i),o=i>0?Math.min(o,Math.abs(a-n)):o,n=a;return o}(e.scale,e.pixels):-1;return z.isNullOrUndef(r)?(a=l*n.categoryPercentage,i=n.barPercentage):(a=r*o,i=1),{chunk:a/o,ratio:i,start:s-a/2}}R._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}}),R._set("global",{datasets:{bar:{categoryPercentage:.8,barPercentage:.9}}});var Ct=nt.extend({dataElementType:_t.Rectangle,_dataElementOptions:["backgroundColor","borderColor","borderSkipped","borderWidth","barPercentage","barThickness","categoryPercentage","maxBarThickness","minBarLength"],initialize:function(){var t,e,n=this;nt.prototype.initialize.apply(n,arguments),(t=n.getMeta()).stack=n.getDataset().stack,t.bar=!0,e=n._getIndexScale().options,jt("bar chart",e.barPercentage,"scales.[x/y]Axes.barPercentage","dataset.barPercentage"),jt("bar chart",e.barThickness,"scales.[x/y]Axes.barThickness","dataset.barThickness"),jt("bar chart",e.categoryPercentage,"scales.[x/y]Axes.categoryPercentage","dataset.categoryPercentage"),jt("bar chart",n._getValueScale().options.minBarLength,"scales.[x/y]Axes.minBarLength","dataset.minBarLength"),jt("bar chart",e.maxBarThickness,"scales.[x/y]Axes.maxBarThickness","dataset.maxBarThickness")},update:function(t){var e,n,a=this.getMeta().data;for(this._ruler=this.getRuler(),e=0,n=a.length;e<n;++e)this.updateElement(a[e],e,t)},updateElement:function(t,e,n){var a=this,i=a.getMeta(),r=a.getDataset(),o=a._resolveDataElementOptions(t,e);t._xScale=a.getScaleForId(i.xAxisID),t._yScale=a.getScaleForId(i.yAxisID),t._datasetIndex=a.index,t._index=e,t._model={backgroundColor:o.backgroundColor,borderColor:o.borderColor,borderSkipped:o.borderSkipped,borderWidth:o.borderWidth,datasetLabel:r.label,label:a.chart.data.labels[e]},z.isArray(r.data[e])&&(t._model.borderSkipped=null),a._updateElementGeometry(t,e,n,o),t.pivot()},_updateElementGeometry:function(t,e,n,a){var i=this,r=t._model,o=i._getValueScale(),s=o.getBasePixel(),l=o.isHorizontal(),c=i._ruler||i.getRuler(),u=i.calculateBarValuePixels(i.index,e,a),d=i.calculateBarIndexPixels(i.index,e,c,a);r.horizontal=l,r.base=n?s:u.base,r.x=l?n?s:u.head:d.center,r.y=l?d.center:n?s:u.head,r.height=l?d.size:void 0,r.width=l?void 0:d.size},_getStacks:function(t){var e,n,a=this._getIndexScale(),i=a._getMatchingVisibleMetas(this._type),r=a.options.stacked,o=i.length,s=[];for(e=0;e<o&&(n=i[e],(!1===r||-1===s.indexOf(n.stack)||void 0===r&&void 0===n.stack)&&s.push(n.stack),n.index!==t);++e);return s},getStackCount:function(){return this._getStacks().length},getStackIndex:function(t,e){var n=this._getStacks(t),a=void 0!==e?n.indexOf(e):-1;return-1===a?n.length-1:a},getRuler:function(){var t,e,n=this._getIndexScale(),a=[];for(t=0,e=this.getMeta().data.length;t<e;++t)a.push(n.getPixelForValue(null,t,this.index));return{pixels:a,start:n._startPixel,end:n._endPixel,stackCount:this.getStackCount(),scale:n}},calculateBarValuePixels:function(t,e,n){var a,i,r,o,s,l,c,u=this.chart,d=this._getValueScale(),h=d.isHorizontal(),f=u.data.datasets,g=d._getMatchingVisibleMetas(this._type),m=d._parseValue(f[t].data[e]),p=n.minBarLength,b=d.options.stacked,v=this.getMeta().stack,y=void 0===m.start?0:m.max>=0&&m.min>=0?m.min:m.max,x=void 0===m.start?m.end:m.max>=0&&m.min>=0?m.max-m.min:m.min-m.max,_=g.length;if(b||void 0===b&&void 0!==v)for(a=0;a<_&&(i=g[a]).index!==t;++a)i.stack===v&&(r=void 0===(c=d._parseValue(f[i.index].data[e])).start?c.end:c.min>=0&&c.max>=0?c.max:c.min,(m.min<0&&r<0||m.max>=0&&r>0)&&(y+=r));return o=d.getPixelForValue(y),l=(s=d.getPixelForValue(y+x))-o,void 0!==p&&Math.abs(l)<p&&(l=p,s=x>=0&&!h||x<0&&h?o-p:o+p),{size:l,base:o,head:s,center:s+l/2}},calculateBarIndexPixels:function(t,e,n,a){var i="flex"===a.barThickness?function(t,e,n){var a,i=e.pixels,r=i[t],o=t>0?i[t-1]:null,s=t<i.length-1?i[t+1]:null,l=n.categoryPercentage;return null===o&&(o=r-(null===s?e.end-e.start:s-r)),null===s&&(s=r+r-o),a=r-(r-Math.min(o,s))/2*l,{chunk:Math.abs(s-o)/2*l/e.stackCount,ratio:n.barPercentage,start:a}}(e,n,a):Dt(e,n,a),r=this.getStackIndex(t,this.getMeta().stack),o=i.start+i.chunk*r+i.chunk/2,s=Math.min(St(a.maxBarThickness,1/0),i.chunk*i.ratio);return{base:o-s/2,head:o+s/2,center:o,size:s}},draw:function(){var t=this.chart,e=this._getValueScale(),n=this.getMeta().data,a=this.getDataset(),i=n.length,r=0;for(z.canvas.clipArea(t.ctx,t.chartArea);r<i;++r){var o=e._parseValue(a.data[r]);isNaN(o.min)||isNaN(o.max)||n[r].draw()}z.canvas.unclipArea(t.ctx)},_resolveDataElementOptions:function(){var t=this,e=z.extend({},nt.prototype._resolveDataElementOptions.apply(t,arguments)),n=t._getIndexScale().options,a=t._getValueScale().options;return e.barPercentage=St(n.barPercentage,e.barPercentage),e.barThickness=St(n.barThickness,e.barThickness),e.categoryPercentage=St(n.categoryPercentage,e.categoryPercentage),e.maxBarThickness=St(n.maxBarThickness,e.maxBarThickness),e.minBarLength=St(a.minBarLength,e.minBarLength),e}}),Pt=z.valueOrDefault,Tt=z.options.resolve;R._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.datasets[t.datasetIndex].label||"",a=e.datasets[t.datasetIndex].data[t.index];return n+": ("+t.xLabel+", "+t.yLabel+", "+a.r+")"}}}});var At=nt.extend({dataElementType:_t.Point,_dataElementOptions:["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle","rotation"],update:function(t){var e=this,n=e.getMeta().data;z.each(n,(function(n,a){e.updateElement(n,a,t)}))},updateElement:function(t,e,n){var a=this,i=a.getMeta(),r=t.custom||{},o=a.getScaleForId(i.xAxisID),s=a.getScaleForId(i.yAxisID),l=a._resolveDataElementOptions(t,e),c=a.getDataset().data[e],u=a.index,d=n?o.getPixelForDecimal(.5):o.getPixelForValue("object"==typeof c?c:NaN,e,u),h=n?s.getBasePixel():s.getPixelForValue(c,e,u);t._xScale=o,t._yScale=s,t._options=l,t._datasetIndex=u,t._index=e,t._model={backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,hitRadius:l.hitRadius,pointStyle:l.pointStyle,rotation:l.rotation,radius:n?0:l.radius,skip:r.skip||isNaN(d)||isNaN(h),x:d,y:h},t.pivot()},setHoverStyle:function(t){var e=t._model,n=t._options,a=z.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Pt(n.hoverBackgroundColor,a(n.backgroundColor)),e.borderColor=Pt(n.hoverBorderColor,a(n.borderColor)),e.borderWidth=Pt(n.hoverBorderWidth,n.borderWidth),e.radius=n.radius+n.hoverRadius},_resolveDataElementOptions:function(t,e){var n=this,a=n.chart,i=n.getDataset(),r=t.custom||{},o=i.data[e]||{},s=nt.prototype._resolveDataElementOptions.apply(n,arguments),l={chart:a,dataIndex:e,dataset:i,datasetIndex:n.index};return n._cachedDataOpts===s&&(s=z.extend({},s)),s.radius=Tt([r.radius,o.r,n._config.radius,a.options.elements.point.radius],l,e),s}}),Ft=z.valueOrDefault,It=Math.PI,Nt=2*It,Rt=It/2;R._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(t){var e,n,a,i=document.createElement("ul"),r=t.data,o=r.datasets,s=r.labels;if(i.setAttribute("class",t.id+"-legend"),o.length)for(e=0,n=o[0].data.length;e<n;++e)(a=i.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=o[0].backgroundColor[e],s[e]&&a.appendChild(document.createTextNode(s[e]));return i.outerHTML},legend:{labels:{generateLabels:function(t){var e=t.data;return e.labels.length&&e.datasets.length?e.labels.map((function(n,a){var i=t.getDatasetMeta(0),r=i.controller.getStyle(a);return{text:n,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,hidden:isNaN(e.datasets[0].data[a])||i.data[a].hidden,index:a}})):[]}},onClick:function(t,e){var n,a,i,r=e.index,o=this.chart;for(n=0,a=(o.data.datasets||[]).length;n<a;++n)(i=o.getDatasetMeta(n)).data[r]&&(i.data[r].hidden=!i.data[r].hidden);o.update()}},cutoutPercentage:50,rotation:-Rt,circumference:Nt,tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.labels[t.index],a=": "+e.datasets[t.datasetIndex].data[t.index];return z.isArray(n)?(n=n.slice())[0]+=a:n+=a,n}}}});var Lt=nt.extend({dataElementType:_t.Arc,linkScales:z.noop,_dataElementOptions:["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"],getRingIndex:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&++e;return e},update:function(t){var e,n,a,i,r=this,o=r.chart,s=o.chartArea,l=o.options,c=1,u=1,d=0,h=0,f=r.getMeta(),g=f.data,m=l.cutoutPercentage/100||0,p=l.circumference,b=r._getRingWeight(r.index);if(p<Nt){var v=l.rotation%Nt,y=(v+=v>=It?-Nt:v<-It?Nt:0)+p,x=Math.cos(v),_=Math.sin(v),O=Math.cos(y),w=Math.sin(y),k=v<=0&&y>=0||y>=Nt,M=v<=Rt&&y>=Rt||y>=Nt+Rt,j=v<=-Rt&&y>=-Rt||y>=It+Rt,S=v===-It||y>=It?-1:Math.min(x,x*m,O,O*m),D=j?-1:Math.min(_,_*m,w,w*m),C=k?1:Math.max(x,x*m,O,O*m),P=M?1:Math.max(_,_*m,w,w*m);c=(C-S)/2,u=(P-D)/2,d=-(C+S)/2,h=-(P+D)/2}for(a=0,i=g.length;a<i;++a)g[a]._options=r._resolveDataElementOptions(g[a],a);for(o.borderWidth=r.getMaxBorderWidth(),e=(s.right-s.left-o.borderWidth)/c,n=(s.bottom-s.top-o.borderWidth)/u,o.outerRadius=Math.max(Math.min(e,n)/2,0),o.innerRadius=Math.max(o.outerRadius*m,0),o.radiusLength=(o.outerRadius-o.innerRadius)/(r._getVisibleDatasetWeightTotal()||1),o.offsetX=d*o.outerRadius,o.offsetY=h*o.outerRadius,f.total=r.calculateTotal(),r.outerRadius=o.outerRadius-o.radiusLength*r._getRingWeightOffset(r.index),r.innerRadius=Math.max(r.outerRadius-o.radiusLength*b,0),a=0,i=g.length;a<i;++a)r.updateElement(g[a],a,t)},updateElement:function(t,e,n){var a=this,i=a.chart,r=i.chartArea,o=i.options,s=o.animation,l=(r.left+r.right)/2,c=(r.top+r.bottom)/2,u=o.rotation,d=o.rotation,h=a.getDataset(),f=n&&s.animateRotate||t.hidden?0:a.calculateCircumference(h.data[e])*(o.circumference/Nt),g=n&&s.animateScale?0:a.innerRadius,m=n&&s.animateScale?0:a.outerRadius,p=t._options||{};z.extend(t,{_datasetIndex:a.index,_index:e,_model:{backgroundColor:p.backgroundColor,borderColor:p.borderColor,borderWidth:p.borderWidth,borderAlign:p.borderAlign,x:l+i.offsetX,y:c+i.offsetY,startAngle:u,endAngle:d,circumference:f,outerRadius:m,innerRadius:g,label:z.valueAtIndexOrDefault(h.label,e,i.data.labels[e])}});var b=t._model;n&&s.animateRotate||(b.startAngle=0===e?o.rotation:a.getMeta().data[e-1]._model.endAngle,b.endAngle=b.startAngle+b.circumference),t.pivot()},calculateTotal:function(){var t,e=this.getDataset(),n=this.getMeta(),a=0;return z.each(n.data,(function(n,i){t=e.data[i],isNaN(t)||n.hidden||(a+=Math.abs(t))})),a},calculateCircumference:function(t){var e=this.getMeta().total;return e>0&&!isNaN(t)?Nt*(Math.abs(t)/e):0},getMaxBorderWidth:function(t){var e,n,a,i,r,o,s,l,c=0,u=this.chart;if(!t)for(e=0,n=u.data.datasets.length;e<n;++e)if(u.isDatasetVisible(e)){t=(a=u.getDatasetMeta(e)).data,e!==this.index&&(r=a.controller);break}if(!t)return 0;for(e=0,n=t.length;e<n;++e)i=t[e],r?(r._configure(),o=r._resolveDataElementOptions(i,e)):o=i._options,"inner"!==o.borderAlign&&(s=o.borderWidth,c=(l=o.hoverBorderWidth)>(c=s>c?s:c)?l:c);return c},setHoverStyle:function(t){var e=t._model,n=t._options,a=z.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth},e.backgroundColor=Ft(n.hoverBackgroundColor,a(n.backgroundColor)),e.borderColor=Ft(n.hoverBorderColor,a(n.borderColor)),e.borderWidth=Ft(n.hoverBorderWidth,n.borderWidth)},_getRingWeightOffset:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(e+=this._getRingWeight(n));return e},_getRingWeight:function(t){return Math.max(Ft(this.chart.data.datasets[t].weight,1),0)},_getVisibleDatasetWeightTotal:function(){return this._getRingWeightOffset(this.chart.data.datasets.length)}});R._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{type:"category",position:"left",offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{mode:"index",axis:"y"}}),R._set("global",{datasets:{horizontalBar:{categoryPercentage:.8,barPercentage:.9}}});var Yt=Ct.extend({_getValueScaleId:function(){return this.getMeta().xAxisID},_getIndexScaleId:function(){return this.getMeta().yAxisID}}),Wt=z.valueOrDefault,Et=z.options.resolve,zt=z.canvas._isPointInArea;function Vt(t,e){var n=t&&t.options.ticks||{},a=n.reverse,i=void 0===n.min?e:0,r=void 0===n.max?e:0;return{start:a?r:i,end:a?i:r}}function Bt(t,e,n){var a=n/2,i=Vt(t,a),r=Vt(e,a);return{top:r.end,right:i.end,bottom:r.start,left:i.start}}function Ht(t){var e,n,a,i;return z.isObject(t)?(e=t.top,n=t.right,a=t.bottom,i=t.left):e=n=a=i=t,{top:e,right:n,bottom:a,left:i}}R._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}});var Ut=nt.extend({datasetElementType:_t.Line,dataElementType:_t.Point,_datasetElementOptions:["backgroundColor","borderCapStyle","borderColor","borderDash","borderDashOffset","borderJoinStyle","borderWidth","cubicInterpolationMode","fill"],_dataElementOptions:{backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},update:function(t){var e,n,a=this,i=a.getMeta(),r=i.dataset,o=i.data||[],s=a.chart.options,l=a._config,c=a._showLine=Wt(l.showLine,s.showLines);for(a._xScale=a.getScaleForId(i.xAxisID),a._yScale=a.getScaleForId(i.yAxisID),c&&(void 0!==l.tension&&void 0===l.lineTension&&(l.lineTension=l.tension),r._scale=a._yScale,r._datasetIndex=a.index,r._children=o,r._model=a._resolveDatasetElementOptions(r),r.pivot()),e=0,n=o.length;e<n;++e)a.updateElement(o[e],e,t);for(c&&0!==r._model.tension&&a.updateBezierControlPoints(),e=0,n=o.length;e<n;++e)o[e].pivot()},updateElement:function(t,e,n){var a,i,r=this,o=r.getMeta(),s=t.custom||{},l=r.getDataset(),c=r.index,u=l.data[e],d=r._xScale,h=r._yScale,f=o.dataset._model,g=r._resolveDataElementOptions(t,e);a=d.getPixelForValue("object"==typeof u?u:NaN,e,c),i=n?h.getBasePixel():r.calculatePointY(u,e,c),t._xScale=d,t._yScale=h,t._options=g,t._datasetIndex=c,t._index=e,t._model={x:a,y:i,skip:s.skip||isNaN(a)||isNaN(i),radius:g.radius,pointStyle:g.pointStyle,rotation:g.rotation,backgroundColor:g.backgroundColor,borderColor:g.borderColor,borderWidth:g.borderWidth,tension:Wt(s.tension,f?f.tension:0),steppedLine:!!f&&f.steppedLine,hitRadius:g.hitRadius}},_resolveDatasetElementOptions:function(t){var e=this,n=e._config,a=t.custom||{},i=e.chart.options,r=i.elements.line,o=nt.prototype._resolveDatasetElementOptions.apply(e,arguments);return o.spanGaps=Wt(n.spanGaps,i.spanGaps),o.tension=Wt(n.lineTension,r.tension),o.steppedLine=Et([a.steppedLine,n.steppedLine,r.stepped]),o.clip=Ht(Wt(n.clip,Bt(e._xScale,e._yScale,o.borderWidth))),o},calculatePointY:function(t,e,n){var a,i,r,o,s,l,c,u=this.chart,d=this._yScale,h=0,f=0;if(d.options.stacked){for(s=+d.getRightValue(t),c=(l=u._getSortedVisibleDatasetMetas()).length,a=0;a<c&&(r=l[a]).index!==n;++a)i=u.data.datasets[r.index],"line"===r.type&&r.yAxisID===d.id&&((o=+d.getRightValue(i.data[e]))<0?f+=o||0:h+=o||0);return s<0?d.getPixelForValue(f+s):d.getPixelForValue(h+s)}return d.getPixelForValue(t)},updateBezierControlPoints:function(){var t,e,n,a,i=this.chart,r=this.getMeta(),o=r.dataset._model,s=i.chartArea,l=r.data||[];function c(t,e,n){return Math.max(Math.min(t,n),e)}if(o.spanGaps&&(l=l.filter((function(t){return!t._model.skip}))),"monotone"===o.cubicInterpolationMode)z.splineCurveMonotone(l);else for(t=0,e=l.length;t<e;++t)n=l[t]._model,a=z.splineCurve(z.previousItem(l,t)._model,n,z.nextItem(l,t)._model,o.tension),n.controlPointPreviousX=a.previous.x,n.controlPointPreviousY=a.previous.y,n.controlPointNextX=a.next.x,n.controlPointNextY=a.next.y;if(i.options.elements.line.capBezierPoints)for(t=0,e=l.length;t<e;++t)n=l[t]._model,zt(n,s)&&(t>0&&zt(l[t-1]._model,s)&&(n.controlPointPreviousX=c(n.controlPointPreviousX,s.left,s.right),n.controlPointPreviousY=c(n.controlPointPreviousY,s.top,s.bottom)),t<l.length-1&&zt(l[t+1]._model,s)&&(n.controlPointNextX=c(n.controlPointNextX,s.left,s.right),n.controlPointNextY=c(n.controlPointNextY,s.top,s.bottom)))},draw:function(){var t,e=this.chart,n=this.getMeta(),a=n.data||[],i=e.chartArea,r=e.canvas,o=0,s=a.length;for(this._showLine&&(t=n.dataset._model.clip,z.canvas.clipArea(e.ctx,{left:!1===t.left?0:i.left-t.left,right:!1===t.right?r.width:i.right+t.right,top:!1===t.top?0:i.top-t.top,bottom:!1===t.bottom?r.height:i.bottom+t.bottom}),n.dataset.draw(),z.canvas.unclipArea(e.ctx));o<s;++o)a[o].draw(i)},setHoverStyle:function(t){var e=t._model,n=t._options,a=z.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Wt(n.hoverBackgroundColor,a(n.backgroundColor)),e.borderColor=Wt(n.hoverBorderColor,a(n.borderColor)),e.borderWidth=Wt(n.hoverBorderWidth,n.borderWidth),e.radius=Wt(n.hoverRadius,n.radius)}}),Gt=z.options.resolve;R._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(t){var e,n,a,i=document.createElement("ul"),r=t.data,o=r.datasets,s=r.labels;if(i.setAttribute("class",t.id+"-legend"),o.length)for(e=0,n=o[0].data.length;e<n;++e)(a=i.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=o[0].backgroundColor[e],s[e]&&a.appendChild(document.createTextNode(s[e]));return i.outerHTML},legend:{labels:{generateLabels:function(t){var e=t.data;return e.labels.length&&e.datasets.length?e.labels.map((function(n,a){var i=t.getDatasetMeta(0),r=i.controller.getStyle(a);return{text:n,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,hidden:isNaN(e.datasets[0].data[a])||i.data[a].hidden,index:a}})):[]}},onClick:function(t,e){var n,a,i,r=e.index,o=this.chart;for(n=0,a=(o.data.datasets||[]).length;n<a;++n)(i=o.getDatasetMeta(n)).data[r].hidden=!i.data[r].hidden;o.update()}},tooltips:{callbacks:{title:function(){return""},label:function(t,e){return e.labels[t.index]+": "+t.yLabel}}}});var qt=nt.extend({dataElementType:_t.Arc,linkScales:z.noop,_dataElementOptions:["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"],_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(t){var e,n,a,i=this,r=i.getDataset(),o=i.getMeta(),s=i.chart.options.startAngle||0,l=i._starts=[],c=i._angles=[],u=o.data;for(i._updateRadius(),o.count=i.countVisibleElements(),e=0,n=r.data.length;e<n;e++)l[e]=s,a=i._computeAngle(e),c[e]=a,s+=a;for(e=0,n=u.length;e<n;++e)u[e]._options=i._resolveDataElementOptions(u[e],e),i.updateElement(u[e],e,t)},_updateRadius:function(){var t=this,e=t.chart,n=e.chartArea,a=e.options,i=Math.min(n.right-n.left,n.bottom-n.top);e.outerRadius=Math.max(i/2,0),e.innerRadius=Math.max(a.cutoutPercentage?e.outerRadius/100*a.cutoutPercentage:1,0),e.radiusLength=(e.outerRadius-e.innerRadius)/e.getVisibleDatasetCount(),t.outerRadius=e.outerRadius-e.radiusLength*t.index,t.innerRadius=t.outerRadius-e.radiusLength},updateElement:function(t,e,n){var a=this,i=a.chart,r=a.getDataset(),o=i.options,s=o.animation,l=i.scale,c=i.data.labels,u=l.xCenter,d=l.yCenter,h=o.startAngle,f=t.hidden?0:l.getDistanceFromCenterForValue(r.data[e]),g=a._starts[e],m=g+(t.hidden?0:a._angles[e]),p=s.animateScale?0:l.getDistanceFromCenterForValue(r.data[e]),b=t._options||{};z.extend(t,{_datasetIndex:a.index,_index:e,_scale:l,_model:{backgroundColor:b.backgroundColor,borderColor:b.borderColor,borderWidth:b.borderWidth,borderAlign:b.borderAlign,x:u,y:d,innerRadius:0,outerRadius:n?p:f,startAngle:n&&s.animateRotate?h:g,endAngle:n&&s.animateRotate?h:m,label:z.valueAtIndexOrDefault(c,e,c[e])}}),t.pivot()},countVisibleElements:function(){var t=this.getDataset(),e=this.getMeta(),n=0;return z.each(e.data,(function(e,a){isNaN(t.data[a])||e.hidden||n++})),n},setHoverStyle:function(t){var e=t._model,n=t._options,a=z.getHoverColor,i=z.valueOrDefault;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth},e.backgroundColor=i(n.hoverBackgroundColor,a(n.backgroundColor)),e.borderColor=i(n.hoverBorderColor,a(n.borderColor)),e.borderWidth=i(n.hoverBorderWidth,n.borderWidth)},_computeAngle:function(t){var e=this,n=this.getMeta().count,a=e.getDataset(),i=e.getMeta();if(isNaN(a.data[t])||i.data[t].hidden)return 0;var r={chart:e.chart,dataIndex:t,dataset:a,datasetIndex:e.index};return Gt([e.chart.options.elements.arc.angle,2*Math.PI/n],r,t)}});R._set("pie",z.clone(R.doughnut)),R._set("pie",{cutoutPercentage:0});var Zt=Lt,$t=z.valueOrDefault;R._set("radar",{spanGaps:!1,scale:{type:"radialLinear"},elements:{line:{fill:"start",tension:0}}});var Xt=nt.extend({datasetElementType:_t.Line,dataElementType:_t.Point,linkScales:z.noop,_datasetElementOptions:["backgroundColor","borderWidth","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","fill"],_dataElementOptions:{backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(t){var e,n,a=this,i=a.getMeta(),r=i.dataset,o=i.data||[],s=a.chart.scale,l=a._config;for(void 0!==l.tension&&void 0===l.lineTension&&(l.lineTension=l.tension),r._scale=s,r._datasetIndex=a.index,r._children=o,r._loop=!0,r._model=a._resolveDatasetElementOptions(r),r.pivot(),e=0,n=o.length;e<n;++e)a.updateElement(o[e],e,t);for(a.updateBezierControlPoints(),e=0,n=o.length;e<n;++e)o[e].pivot()},updateElement:function(t,e,n){var a=this,i=t.custom||{},r=a.getDataset(),o=a.chart.scale,s=o.getPointPositionForValue(e,r.data[e]),l=a._resolveDataElementOptions(t,e),c=a.getMeta().dataset._model,u=n?o.xCenter:s.x,d=n?o.yCenter:s.y;t._scale=o,t._options=l,t._datasetIndex=a.index,t._index=e,t._model={x:u,y:d,skip:i.skip||isNaN(u)||isNaN(d),radius:l.radius,pointStyle:l.pointStyle,rotation:l.rotation,backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,tension:$t(i.tension,c?c.tension:0),hitRadius:l.hitRadius}},_resolveDatasetElementOptions:function(){var t=this,e=t._config,n=t.chart.options,a=nt.prototype._resolveDatasetElementOptions.apply(t,arguments);return a.spanGaps=$t(e.spanGaps,n.spanGaps),a.tension=$t(e.lineTension,n.elements.line.tension),a},updateBezierControlPoints:function(){var t,e,n,a,i=this.getMeta(),r=this.chart.chartArea,o=i.data||[];function s(t,e,n){return Math.max(Math.min(t,n),e)}for(i.dataset._model.spanGaps&&(o=o.filter((function(t){return!t._model.skip}))),t=0,e=o.length;t<e;++t)n=o[t]._model,a=z.splineCurve(z.previousItem(o,t,!0)._model,n,z.nextItem(o,t,!0)._model,n.tension),n.controlPointPreviousX=s(a.previous.x,r.left,r.right),n.controlPointPreviousY=s(a.previous.y,r.top,r.bottom),n.controlPointNextX=s(a.next.x,r.left,r.right),n.controlPointNextY=s(a.next.y,r.top,r.bottom)},setHoverStyle:function(t){var e=t._model,n=t._options,a=z.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=$t(n.hoverBackgroundColor,a(n.backgroundColor)),e.borderColor=$t(n.hoverBorderColor,a(n.borderColor)),e.borderWidth=$t(n.hoverBorderWidth,n.borderWidth),e.radius=$t(n.hoverRadius,n.radius)}});R._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},tooltips:{callbacks:{title:function(){return""},label:function(t){return"("+t.xLabel+", "+t.yLabel+")"}}}}),R._set("global",{datasets:{scatter:{showLine:!1}}});var Kt={bar:Ct,bubble:At,doughnut:Lt,horizontalBar:Yt,line:Ut,polarArea:qt,pie:Zt,radar:Xt,scatter:Ut};function Jt(t,e){return t.native?{x:t.x,y:t.y}:z.getRelativePosition(t,e)}function Qt(t,e){var n,a,i,r,o,s,l=t._getSortedVisibleDatasetMetas();for(a=0,r=l.length;a<r;++a)for(i=0,o=(n=l[a].data).length;i<o;++i)(s=n[i])._view.skip||e(s)}function te(t,e){var n=[];return Qt(t,(function(t){t.inRange(e.x,e.y)&&n.push(t)})),n}function ee(t,e,n,a){var i=Number.POSITIVE_INFINITY,r=[];return Qt(t,(function(t){if(!n||t.inRange(e.x,e.y)){var o=t.getCenterPoint(),s=a(e,o);s<i?(r=[t],i=s):s===i&&r.push(t)}})),r}function ne(t){var e=-1!==t.indexOf("x"),n=-1!==t.indexOf("y");return function(t,a){var i=e?Math.abs(t.x-a.x):0,r=n?Math.abs(t.y-a.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(r,2))}}function ae(t,e,n){var a=Jt(e,t);n.axis=n.axis||"x";var i=ne(n.axis),r=n.intersect?te(t,a):ee(t,a,!1,i),o=[];return r.length?(t._getSortedVisibleDatasetMetas().forEach((function(t){var e=t.data[r[0]._index];e&&!e._view.skip&&o.push(e)})),o):[]}var ie={modes:{single:function(t,e){var n=Jt(e,t),a=[];return Qt(t,(function(t){if(t.inRange(n.x,n.y))return a.push(t),a})),a.slice(0,1)},label:ae,index:ae,dataset:function(t,e,n){var a=Jt(e,t);n.axis=n.axis||"xy";var i=ne(n.axis),r=n.intersect?te(t,a):ee(t,a,!1,i);return r.length>0&&(r=t.getDatasetMeta(r[0]._datasetIndex).data),r},"x-axis":function(t,e){return ae(t,e,{intersect:!1})},point:function(t,e){return te(t,Jt(e,t))},nearest:function(t,e,n){var a=Jt(e,t);n.axis=n.axis||"xy";var i=ne(n.axis);return ee(t,a,n.intersect,i)},x:function(t,e,n){var a=Jt(e,t),i=[],r=!1;return Qt(t,(function(t){t.inXRange(a.x)&&i.push(t),t.inRange(a.x,a.y)&&(r=!0)})),n.intersect&&!r&&(i=[]),i},y:function(t,e,n){var a=Jt(e,t),i=[],r=!1;return Qt(t,(function(t){t.inYRange(a.y)&&i.push(t),t.inRange(a.x,a.y)&&(r=!0)})),n.intersect&&!r&&(i=[]),i}}},re=z.extend;function oe(t,e){return z.where(t,(function(t){return t.pos===e}))}function se(t,e){return t.sort((function(t,n){var a=e?n:t,i=e?t:n;return a.weight===i.weight?a.index-i.index:a.weight-i.weight}))}function le(t,e,n,a){return Math.max(t[n],e[n])+Math.max(t[a],e[a])}function ce(t,e,n){var a,i,r=n.box,o=t.maxPadding;if(n.size&&(t[n.pos]-=n.size),n.size=n.horizontal?r.height:r.width,t[n.pos]+=n.size,r.getPadding){var s=r.getPadding();o.top=Math.max(o.top,s.top),o.left=Math.max(o.left,s.left),o.bottom=Math.max(o.bottom,s.bottom),o.right=Math.max(o.right,s.right)}if(a=e.outerWidth-le(o,t,"left","right"),i=e.outerHeight-le(o,t,"top","bottom"),a!==t.w||i!==t.h)return t.w=a,t.h=i,n.horizontal?a!==t.w:i!==t.h}function ue(t,e){var n=e.maxPadding;function a(t){var a={left:0,top:0,right:0,bottom:0};return t.forEach((function(t){a[t]=Math.max(e[t],n[t])})),a}return a(t?["left","right"]:["top","bottom"])}function de(t,e,n){var a,i,r,o,s,l,c=[];for(a=0,i=t.length;a<i;++a)(o=(r=t[a]).box).update(r.width||e.w,r.height||e.h,ue(r.horizontal,e)),ce(e,n,r)&&(l=!0,c.length&&(s=!0)),o.fullWidth||c.push(r);return s&&de(c,e,n)||l}function he(t,e,n){var a,i,r,o,s=n.padding,l=e.x,c=e.y;for(a=0,i=t.length;a<i;++a)o=(r=t[a]).box,r.horizontal?(o.left=o.fullWidth?s.left:e.left,o.right=o.fullWidth?n.outerWidth-s.right:e.left+e.w,o.top=c,o.bottom=c+o.height,o.width=o.right-o.left,c=o.bottom):(o.left=l,o.right=l+o.width,o.top=e.top,o.bottom=e.top+e.h,o.height=o.bottom-o.top,l=o.right);e.x=l,e.y=c}R._set("global",{layout:{padding:{top:0,right:0,bottom:0,left:0}}});var fe,ge={defaults:{},addBox:function(t,e){t.boxes||(t.boxes=[]),e.fullWidth=e.fullWidth||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw:function(){e.draw.apply(e,arguments)}}]},t.boxes.push(e)},removeBox:function(t,e){var n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure:function(t,e,n){for(var a,i=["fullWidth","position","weight"],r=i.length,o=0;o<r;++o)a=i[o],n.hasOwnProperty(a)&&(e[a]=n[a])},update:function(t,e,n){if(t){var a=t.options.layout||{},i=z.options.toPadding(a.padding),r=e-i.width,o=n-i.height,s=function(t){var e=function(t){var e,n,a,i=[];for(e=0,n=(t||[]).length;e<n;++e)a=t[e],i.push({index:e,box:a,pos:a.position,horizontal:a.isHorizontal(),weight:a.weight});return i}(t),n=se(oe(e,"left"),!0),a=se(oe(e,"right")),i=se(oe(e,"top"),!0),r=se(oe(e,"bottom"));return{leftAndTop:n.concat(i),rightAndBottom:a.concat(r),chartArea:oe(e,"chartArea"),vertical:n.concat(a),horizontal:i.concat(r)}}(t.boxes),l=s.vertical,c=s.horizontal,u=Object.freeze({outerWidth:e,outerHeight:n,padding:i,availableWidth:r,vBoxMaxWidth:r/2/l.length,hBoxMaxHeight:o/2}),d=re({maxPadding:re({},i),w:r,h:o,x:i.left,y:i.top},i);!function(t,e){var n,a,i;for(n=0,a=t.length;n<a;++n)(i=t[n]).width=i.horizontal?i.box.fullWidth&&e.availableWidth:e.vBoxMaxWidth,i.height=i.horizontal&&e.hBoxMaxHeight}(l.concat(c),u),de(l,d,u),de(c,d,u)&&de(l,d,u),function(t){var e=t.maxPadding;function n(n){var a=Math.max(e[n]-t[n],0);return t[n]+=a,a}t.y+=n("top"),t.x+=n("left"),n("right"),n("bottom")}(d),he(s.leftAndTop,d,u),d.x+=d.w,d.y+=d.h,he(s.rightAndBottom,d,u),t.chartArea={left:d.left,top:d.top,right:d.left+d.w,bottom:d.top+d.h},z.each(s.chartArea,(function(e){var n=e.box;re(n,t.chartArea),n.update(d.w,d.h)}))}}},me=(fe=Object.freeze({__proto__:null,default:"/*\n * DOM element rendering detection\n * https://davidwalsh.name/detect-node-insertion\n */\n@keyframes chartjs-render-animation {\n\tfrom { opacity: 0.99; }\n\tto { opacity: 1; }\n}\n\n.chartjs-render-monitor {\n\tanimation: chartjs-render-animation 0.001s;\n}\n\n/*\n * DOM element resizing detection\n * https://github.com/marcj/css-element-queries\n */\n.chartjs-size-monitor,\n.chartjs-size-monitor-expand,\n.chartjs-size-monitor-shrink {\n\tposition: absolute;\n\tdirection: ltr;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\toverflow: hidden;\n\tpointer-events: none;\n\tvisibility: hidden;\n\tz-index: -1;\n}\n\n.chartjs-size-monitor-expand > div {\n\tposition: absolute;\n\twidth: 1000000px;\n\theight: 1000000px;\n\tleft: 0;\n\ttop: 0;\n}\n\n.chartjs-size-monitor-shrink > div {\n\tposition: absolute;\n\twidth: 200%;\n\theight: 200%;\n\tleft: 0;\n\ttop: 0;\n}\n"}))&&fe.default||fe,pe=["animationstart","webkitAnimationStart"],be={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};function ve(t,e){var n=z.getStyle(t,e),a=n&&n.match(/^(\d+)(\.\d+)?px$/);return a?Number(a[1]):void 0}var ye=!!function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("e",null,e)}catch(t){}return t}()&&{passive:!0};function xe(t,e,n){t.addEventListener(e,n,ye)}function _e(t,e,n){t.removeEventListener(e,n,ye)}function Oe(t,e,n,a,i){return{type:t,chart:e,native:i||null,x:void 0!==n?n:null,y:void 0!==a?a:null}}function we(t){var e=document.createElement("div");return e.className=t||"",e}function ke(t,e,n){var a,i,r,o,s=t.$chartjs||(t.$chartjs={}),l=s.resizer=function(t){var e=we("chartjs-size-monitor"),n=we("chartjs-size-monitor-expand"),a=we("chartjs-size-monitor-shrink");n.appendChild(we()),a.appendChild(we()),e.appendChild(n),e.appendChild(a),e._reset=function(){n.scrollLeft=1e6,n.scrollTop=1e6,a.scrollLeft=1e6,a.scrollTop=1e6};var i=function(){e._reset(),t()};return xe(n,"scroll",i.bind(n,"expand")),xe(a,"scroll",i.bind(a,"shrink")),e}((a=function(){if(s.resizer){var a=n.options.maintainAspectRatio&&t.parentNode,i=a?a.clientWidth:0;e(Oe("resize",n)),a&&a.clientWidth<i&&n.canvas&&e(Oe("resize",n))}},r=!1,o=[],function(){o=Array.prototype.slice.call(arguments),i=i||this,r||(r=!0,z.requestAnimFrame.call(window,(function(){r=!1,a.apply(i,o)})))}));!function(t,e){var n=t.$chartjs||(t.$chartjs={}),a=n.renderProxy=function(t){"chartjs-render-animation"===t.animationName&&e()};z.each(pe,(function(e){xe(t,e,a)})),n.reflow=!!t.offsetParent,t.classList.add("chartjs-render-monitor")}(t,(function(){if(s.resizer){var e=t.parentNode;e&&e!==l.parentNode&&e.insertBefore(l,e.firstChild),l._reset()}}))}function Me(t){var e=t.$chartjs||{},n=e.resizer;delete e.resizer,function(t){var e=t.$chartjs||{},n=e.renderProxy;n&&(z.each(pe,(function(e){_e(t,e,n)})),delete e.renderProxy),t.classList.remove("chartjs-render-monitor")}(t),n&&n.parentNode&&n.parentNode.removeChild(n)}var je={disableCSSInjection:!1,_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,_ensureLoaded:function(t){if(!this.disableCSSInjection){var e=t.getRootNode?t.getRootNode():document;!function(t,e){var n=t.$chartjs||(t.$chartjs={});if(!n.containsStyles){n.containsStyles=!0,e="/* Chart.js */\n"+e;var a=document.createElement("style");a.setAttribute("type","text/css"),a.appendChild(document.createTextNode(e)),t.appendChild(a)}}(e.host?e:document.head,me)}},acquireContext:function(t,e){"string"==typeof t?t=document.getElementById(t):t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas);var n=t&&t.getContext&&t.getContext("2d");return n&&n.canvas===t?(this._ensureLoaded(t),function(t,e){var n=t.style,a=t.getAttribute("height"),i=t.getAttribute("width");if(t.$chartjs={initial:{height:a,width:i,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",null===i||""===i){var r=ve(t,"width");void 0!==r&&(t.width=r)}if(null===a||""===a)if(""===t.style.height)t.height=t.width/(e.options.aspectRatio||2);else{var o=ve(t,"height");void 0!==r&&(t.height=o)}}(t,e),n):null},releaseContext:function(t){var e=t.canvas;if(e.$chartjs){var n=e.$chartjs.initial;["height","width"].forEach((function(t){var a=n[t];z.isNullOrUndef(a)?e.removeAttribute(t):e.setAttribute(t,a)})),z.each(n.style||{},(function(t,n){e.style[n]=t})),e.width=e.width,delete e.$chartjs}},addEventListener:function(t,e,n){var a=t.canvas;if("resize"!==e){var i=n.$chartjs||(n.$chartjs={});xe(a,e,(i.proxies||(i.proxies={}))[t.id+"_"+e]=function(e){n(function(t,e){var n=be[t.type]||t.type,a=z.getRelativePosition(t,e);return Oe(n,e,a.x,a.y,t)}(e,t))})}else ke(a,n,t)},removeEventListener:function(t,e,n){var a=t.canvas;if("resize"!==e){var i=((n.$chartjs||{}).proxies||{})[t.id+"_"+e];i&&_e(a,e,i)}else Me(a)}};z.addEvent=xe,z.removeEvent=_e;var Se=je._enabled?je:{acquireContext:function(t){return t&&t.canvas&&(t=t.canvas),t&&t.getContext("2d")||null}},De=z.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},Se);R._set("global",{plugins:{}});var Ce={_plugins:[],_cacheId:0,register:function(t){var e=this._plugins;[].concat(t).forEach((function(t){-1===e.indexOf(t)&&e.push(t)})),this._cacheId++},unregister:function(t){var e=this._plugins;[].concat(t).forEach((function(t){var n=e.indexOf(t);-1!==n&&e.splice(n,1)})),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(t,e,n){var a,i,r,o,s,l=this.descriptors(t),c=l.length;for(a=0;a<c;++a)if("function"==typeof(s=(r=(i=l[a]).plugin)[e])&&((o=[t].concat(n||[])).push(i.options),!1===s.apply(r,o)))return!1;return!0},descriptors:function(t){var e=t.$plugins||(t.$plugins={});if(e.id===this._cacheId)return e.descriptors;var n=[],a=[],i=t&&t.config||{},r=i.options&&i.options.plugins||{};return this._plugins.concat(i.plugins||[]).forEach((function(t){if(-1===n.indexOf(t)){var e=t.id,i=r[e];!1!==i&&(!0===i&&(i=z.clone(R.global.plugins[e])),n.push(t),a.push({plugin:t,options:i||{}}))}})),e.descriptors=a,e.id=this._cacheId,a},_invalidate:function(t){delete t.$plugins}},Pe={constructors:{},defaults:{},registerScaleType:function(t,e,n){this.constructors[t]=e,this.defaults[t]=z.clone(n)},getScaleConstructor:function(t){return this.constructors.hasOwnProperty(t)?this.constructors[t]:void 0},getScaleDefaults:function(t){return this.defaults.hasOwnProperty(t)?z.merge({},[R.scale,this.defaults[t]]):{}},updateScaleDefaults:function(t,e){this.defaults.hasOwnProperty(t)&&(this.defaults[t]=z.extend(this.defaults[t],e))},addScalesToLayout:function(t){z.each(t.scales,(function(e){e.fullWidth=e.options.fullWidth,e.position=e.options.position,e.weight=e.options.weight,ge.addBox(t,e)}))}},Te=z.valueOrDefault,Ae=z.rtl.getRtlAdapter;R._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:z.noop,title:function(t,e){var n="",a=e.labels,i=a?a.length:0;if(t.length>0){var r=t[0];r.label?n=r.label:r.xLabel?n=r.xLabel:i>0&&r.index<i&&(n=a[r.index])}return n},afterTitle:z.noop,beforeBody:z.noop,beforeLabel:z.noop,label:function(t,e){var n=e.datasets[t.datasetIndex].label||"";return n&&(n+=": "),z.isNullOrUndef(t.value)?n+=t.yLabel:n+=t.value,n},labelColor:function(t,e){var n=e.getDatasetMeta(t.datasetIndex).data[t.index]._view;return{borderColor:n.borderColor,backgroundColor:n.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:z.noop,afterBody:z.noop,beforeFooter:z.noop,footer:z.noop,afterFooter:z.noop}}});var Fe={average:function(t){if(!t.length)return!1;var e,n,a=0,i=0,r=0;for(e=0,n=t.length;e<n;++e){var o=t[e];if(o&&o.hasValue()){var s=o.tooltipPosition();a+=s.x,i+=s.y,++r}}return{x:a/r,y:i/r}},nearest:function(t,e){var n,a,i,r=e.x,o=e.y,s=Number.POSITIVE_INFINITY;for(n=0,a=t.length;n<a;++n){var l=t[n];if(l&&l.hasValue()){var c=l.getCenterPoint(),u=z.distanceBetweenPoints(e,c);u<s&&(s=u,i=l)}}if(i){var d=i.tooltipPosition();r=d.x,o=d.y}return{x:r,y:o}}};function Ie(t,e){return e&&(z.isArray(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Ne(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function Re(t){var e=R.global;return{xPadding:t.xPadding,yPadding:t.yPadding,xAlign:t.xAlign,yAlign:t.yAlign,rtl:t.rtl,textDirection:t.textDirection,bodyFontColor:t.bodyFontColor,_bodyFontFamily:Te(t.bodyFontFamily,e.defaultFontFamily),_bodyFontStyle:Te(t.bodyFontStyle,e.defaultFontStyle),_bodyAlign:t.bodyAlign,bodyFontSize:Te(t.bodyFontSize,e.defaultFontSize),bodySpacing:t.bodySpacing,titleFontColor:t.titleFontColor,_titleFontFamily:Te(t.titleFontFamily,e.defaultFontFamily),_titleFontStyle:Te(t.titleFontStyle,e.defaultFontStyle),titleFontSize:Te(t.titleFontSize,e.defaultFontSize),_titleAlign:t.titleAlign,titleSpacing:t.titleSpacing,titleMarginBottom:t.titleMarginBottom,footerFontColor:t.footerFontColor,_footerFontFamily:Te(t.footerFontFamily,e.defaultFontFamily),_footerFontStyle:Te(t.footerFontStyle,e.defaultFontStyle),footerFontSize:Te(t.footerFontSize,e.defaultFontSize),_footerAlign:t.footerAlign,footerSpacing:t.footerSpacing,footerMarginTop:t.footerMarginTop,caretSize:t.caretSize,cornerRadius:t.cornerRadius,backgroundColor:t.backgroundColor,opacity:0,legendColorBackground:t.multiKeyBackground,displayColors:t.displayColors,borderColor:t.borderColor,borderWidth:t.borderWidth}}function Le(t,e){return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-t.xPadding:t.x+t.xPadding}function Ye(t){return Ie([],Ne(t))}var We=Z.extend({initialize:function(){this._model=Re(this._options),this._lastActive=[]},getTitle:function(){var t=this,e=t._options,n=e.callbacks,a=n.beforeTitle.apply(t,arguments),i=n.title.apply(t,arguments),r=n.afterTitle.apply(t,arguments),o=[];return o=Ie(o,Ne(a)),o=Ie(o,Ne(i)),o=Ie(o,Ne(r))},getBeforeBody:function(){return Ye(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(t,e){var n=this,a=n._options.callbacks,i=[];return z.each(t,(function(t){var r={before:[],lines:[],after:[]};Ie(r.before,Ne(a.beforeLabel.call(n,t,e))),Ie(r.lines,a.label.call(n,t,e)),Ie(r.after,Ne(a.afterLabel.call(n,t,e))),i.push(r)})),i},getAfterBody:function(){return Ye(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var t=this,e=t._options.callbacks,n=e.beforeFooter.apply(t,arguments),a=e.footer.apply(t,arguments),i=e.afterFooter.apply(t,arguments),r=[];return r=Ie(r,Ne(n)),r=Ie(r,Ne(a)),r=Ie(r,Ne(i))},update:function(t){var e,n,a,i,r,o,s,l,c,u,d=this,h=d._options,f=d._model,g=d._model=Re(h),m=d._active,p=d._data,b={xAlign:f.xAlign,yAlign:f.yAlign},v={x:f.x,y:f.y},y={width:f.width,height:f.height},x={x:f.caretX,y:f.caretY};if(m.length){g.opacity=1;var _=[],O=[];x=Fe[h.position].call(d,m,d._eventPosition);var w=[];for(e=0,n=m.length;e<n;++e)w.push((a=m[e],i=void 0,r=void 0,o=void 0,s=void 0,l=void 0,c=void 0,u=void 0,i=a._xScale,r=a._yScale||a._scale,o=a._index,s=a._datasetIndex,l=a._chart.getDatasetMeta(s).controller,c=l._getIndexScale(),u=l._getValueScale(),{xLabel:i?i.getLabelForIndex(o,s):"",yLabel:r?r.getLabelForIndex(o,s):"",label:c?""+c.getLabelForIndex(o,s):"",value:u?""+u.getLabelForIndex(o,s):"",index:o,datasetIndex:s,x:a._model.x,y:a._model.y}));h.filter&&(w=w.filter((function(t){return h.filter(t,p)}))),h.itemSort&&(w=w.sort((function(t,e){return h.itemSort(t,e,p)}))),z.each(w,(function(t){_.push(h.callbacks.labelColor.call(d,t,d._chart)),O.push(h.callbacks.labelTextColor.call(d,t,d._chart))})),g.title=d.getTitle(w,p),g.beforeBody=d.getBeforeBody(w,p),g.body=d.getBody(w,p),g.afterBody=d.getAfterBody(w,p),g.footer=d.getFooter(w,p),g.x=x.x,g.y=x.y,g.caretPadding=h.caretPadding,g.labelColors=_,g.labelTextColors=O,g.dataPoints=w,y=function(t,e){var n=t._chart.ctx,a=2*e.yPadding,i=0,r=e.body,o=r.reduce((function(t,e){return t+e.before.length+e.lines.length+e.after.length}),0);o+=e.beforeBody.length+e.afterBody.length;var s=e.title.length,l=e.footer.length,c=e.titleFontSize,u=e.bodyFontSize,d=e.footerFontSize;a+=s*c,a+=s?(s-1)*e.titleSpacing:0,a+=s?e.titleMarginBottom:0,a+=o*u,a+=o?(o-1)*e.bodySpacing:0,a+=l?e.footerMarginTop:0,a+=l*d,a+=l?(l-1)*e.footerSpacing:0;var h=0,f=function(t){i=Math.max(i,n.measureText(t).width+h)};return n.font=z.fontString(c,e._titleFontStyle,e._titleFontFamily),z.each(e.title,f),n.font=z.fontString(u,e._bodyFontStyle,e._bodyFontFamily),z.each(e.beforeBody.concat(e.afterBody),f),h=e.displayColors?u+2:0,z.each(r,(function(t){z.each(t.before,f),z.each(t.lines,f),z.each(t.after,f)})),h=0,n.font=z.fontString(d,e._footerFontStyle,e._footerFontFamily),z.each(e.footer,f),{width:i+=2*e.xPadding,height:a}}(this,g),v=function(t,e,n,a){var i=t.x,r=t.y,o=t.caretSize,s=t.caretPadding,l=t.cornerRadius,c=n.xAlign,u=n.yAlign,d=o+s,h=l+s;return"right"===c?i-=e.width:"center"===c&&((i-=e.width/2)+e.width>a.width&&(i=a.width-e.width),i<0&&(i=0)),"top"===u?r+=d:r-="bottom"===u?e.height+d:e.height/2,"center"===u?"left"===c?i+=d:"right"===c&&(i-=d):"left"===c?i-=h:"right"===c&&(i+=h),{x:i,y:r}}(g,y,b=function(t,e){var n,a,i,r,o,s=t._model,l=t._chart,c=t._chart.chartArea,u="center",d="center";s.y<e.height?d="top":s.y>l.height-e.height&&(d="bottom");var h=(c.left+c.right)/2,f=(c.top+c.bottom)/2;"center"===d?(n=function(t){return t<=h},a=function(t){return t>h}):(n=function(t){return t<=e.width/2},a=function(t){return t>=l.width-e.width/2}),i=function(t){return t+e.width+s.caretSize+s.caretPadding>l.width},r=function(t){return t-e.width-s.caretSize-s.caretPadding<0},o=function(t){return t<=f?"top":"bottom"},n(s.x)?(u="left",i(s.x)&&(u="center",d=o(s.y))):a(s.x)&&(u="right",r(s.x)&&(u="center",d=o(s.y)));var g=t._options;return{xAlign:g.xAlign?g.xAlign:u,yAlign:g.yAlign?g.yAlign:d}}(this,y),d._chart)}else g.opacity=0;return g.xAlign=b.xAlign,g.yAlign=b.yAlign,g.x=v.x,g.y=v.y,g.width=y.width,g.height=y.height,g.caretX=x.x,g.caretY=x.y,d._model=g,t&&h.custom&&h.custom.call(d,g),d},drawCaret:function(t,e){var n=this._chart.ctx,a=this._view,i=this.getCaretPosition(t,e,a);n.lineTo(i.x1,i.y1),n.lineTo(i.x2,i.y2),n.lineTo(i.x3,i.y3)},getCaretPosition:function(t,e,n){var a,i,r,o,s,l,c=n.caretSize,u=n.cornerRadius,d=n.xAlign,h=n.yAlign,f=t.x,g=t.y,m=e.width,p=e.height;if("center"===h)s=g+p/2,"left"===d?(i=(a=f)-c,r=a,o=s+c,l=s-c):(i=(a=f+m)+c,r=a,o=s-c,l=s+c);else if("left"===d?(a=(i=f+u+c)-c,r=i+c):"right"===d?(a=(i=f+m-u-c)-c,r=i+c):(a=(i=n.caretX)-c,r=i+c),"top"===h)s=(o=g)-c,l=o;else{s=(o=g+p)+c,l=o;var b=r;r=a,a=b}return{x1:a,x2:i,x3:r,y1:o,y2:s,y3:l}},drawTitle:function(t,e,n){var a,i,r,o=e.title,s=o.length;if(s){var l=Ae(e.rtl,e.x,e.width);for(t.x=Le(e,e._titleAlign),n.textAlign=l.textAlign(e._titleAlign),n.textBaseline="middle",a=e.titleFontSize,i=e.titleSpacing,n.fillStyle=e.titleFontColor,n.font=z.fontString(a,e._titleFontStyle,e._titleFontFamily),r=0;r<s;++r)n.fillText(o[r],l.x(t.x),t.y+a/2),t.y+=a+i,r+1===s&&(t.y+=e.titleMarginBottom-i)}},drawBody:function(t,e,n){var a,i,r,o,s,l,c,u,d=e.bodyFontSize,h=e.bodySpacing,f=e._bodyAlign,g=e.body,m=e.displayColors,p=0,b=m?Le(e,"left"):0,v=Ae(e.rtl,e.x,e.width),y=function(e){n.fillText(e,v.x(t.x+p),t.y+d/2),t.y+=d+h},x=v.textAlign(f);for(n.textAlign=f,n.textBaseline="middle",n.font=z.fontString(d,e._bodyFontStyle,e._bodyFontFamily),t.x=Le(e,x),n.fillStyle=e.bodyFontColor,z.each(e.beforeBody,y),p=m&&"right"!==x?"center"===f?d/2+1:d+2:0,s=0,c=g.length;s<c;++s){for(a=g[s],i=e.labelTextColors[s],r=e.labelColors[s],n.fillStyle=i,z.each(a.before,y),l=0,u=(o=a.lines).length;l<u;++l){if(m){var _=v.x(b);n.fillStyle=e.legendColorBackground,n.fillRect(v.leftForLtr(_,d),t.y,d,d),n.lineWidth=1,n.strokeStyle=r.borderColor,n.strokeRect(v.leftForLtr(_,d),t.y,d,d),n.fillStyle=r.backgroundColor,n.fillRect(v.leftForLtr(v.xPlus(_,1),d-2),t.y+1,d-2,d-2),n.fillStyle=i}y(o[l])}z.each(a.after,y)}p=0,z.each(e.afterBody,y),t.y-=h},drawFooter:function(t,e,n){var a,i,r=e.footer,o=r.length;if(o){var s=Ae(e.rtl,e.x,e.width);for(t.x=Le(e,e._footerAlign),t.y+=e.footerMarginTop,n.textAlign=s.textAlign(e._footerAlign),n.textBaseline="middle",a=e.footerFontSize,n.fillStyle=e.footerFontColor,n.font=z.fontString(a,e._footerFontStyle,e._footerFontFamily),i=0;i<o;++i)n.fillText(r[i],s.x(t.x),t.y+a/2),t.y+=a+e.footerSpacing}},drawBackground:function(t,e,n,a){n.fillStyle=e.backgroundColor,n.strokeStyle=e.borderColor,n.lineWidth=e.borderWidth;var i=e.xAlign,r=e.yAlign,o=t.x,s=t.y,l=a.width,c=a.height,u=e.cornerRadius;n.beginPath(),n.moveTo(o+u,s),"top"===r&&this.drawCaret(t,a),n.lineTo(o+l-u,s),n.quadraticCurveTo(o+l,s,o+l,s+u),"center"===r&&"right"===i&&this.drawCaret(t,a),n.lineTo(o+l,s+c-u),n.quadraticCurveTo(o+l,s+c,o+l-u,s+c),"bottom"===r&&this.drawCaret(t,a),n.lineTo(o+u,s+c),n.quadraticCurveTo(o,s+c,o,s+c-u),"center"===r&&"left"===i&&this.drawCaret(t,a),n.lineTo(o,s+u),n.quadraticCurveTo(o,s,o+u,s),n.closePath(),n.fill(),e.borderWidth>0&&n.stroke()},draw:function(){var t=this._chart.ctx,e=this._view;if(0!==e.opacity){var n={width:e.width,height:e.height},a={x:e.x,y:e.y},i=Math.abs(e.opacity<.001)?0:e.opacity,r=e.title.length||e.beforeBody.length||e.body.length||e.afterBody.length||e.footer.length;this._options.enabled&&r&&(t.save(),t.globalAlpha=i,this.drawBackground(a,e,t,n),a.y+=e.yPadding,z.rtl.overrideTextDirection(t,e.textDirection),this.drawTitle(a,e,t),this.drawBody(a,e,t),this.drawFooter(a,e,t),z.rtl.restoreTextDirection(t,e.textDirection),t.restore())}},handleEvent:function(t){var e,n=this,a=n._options;return n._lastActive=n._lastActive||[],"mouseout"===t.type?n._active=[]:(n._active=n._chart.getElementsAtEventForMode(t,a.mode,a),a.reverse&&n._active.reverse()),(e=!z.arrayEquals(n._active,n._lastActive))&&(n._lastActive=n._active,(a.enabled||a.custom)&&(n._eventPosition={x:t.x,y:t.y},n.update(!0),n.pivot())),e}}),Ee=Fe,ze=We;ze.positioners=Ee;var Ve=z.valueOrDefault;function Be(){return z.merge({},[].slice.call(arguments),{merger:function(t,e,n,a){if("xAxes"===t||"yAxes"===t){var i,r,o,s=n[t].length;for(e[t]||(e[t]=[]),i=0;i<s;++i)o=n[t][i],r=Ve(o.type,"xAxes"===t?"category":"linear"),i>=e[t].length&&e[t].push({}),!e[t][i].type||o.type&&o.type!==e[t][i].type?z.merge(e[t][i],[Pe.getScaleDefaults(r),o]):z.merge(e[t][i],o)}else z._merger(t,e,n,a)}})}function He(){return z.merge({},[].slice.call(arguments),{merger:function(t,e,n,a){var i=e[t]||{},r=n[t];"scales"===t?e[t]=Be(i,r):"scale"===t?e[t]=z.merge(i,[Pe.getScaleDefaults(r.type),r]):z._merger(t,e,n,a)}})}function Ue(t){var e=t.options;z.each(t.scales,(function(e){ge.removeBox(t,e)})),e=He(R.global,R[t.config.type],e),t.options=t.config.options=e,t.ensureScalesHaveIDs(),t.buildOrUpdateScales(),t.tooltip._options=e.tooltips,t.tooltip.initialize()}function Ge(t,e,n){var a,i=function(t){return t.id===a};do{a=e+n++}while(z.findIndex(t,i)>=0);return a}function qe(t){return"top"===t||"bottom"===t}function Ze(t,e){return function(n,a){return n[t]===a[t]?n[e]-a[e]:n[t]-a[t]}}R._set("global",{elements:{},events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,maintainAspectRatio:!0,responsive:!0,responsiveAnimationDuration:0});var $e=function(t,e){return this.construct(t,e),this};z.extend($e.prototype,{construct:function(t,e){var n=this;e=function(t){var e=(t=t||{}).data=t.data||{};return e.datasets=e.datasets||[],e.labels=e.labels||[],t.options=He(R.global,R[t.type],t.options||{}),t}(e);var a=De.acquireContext(t,e),i=a&&a.canvas,r=i&&i.height,o=i&&i.width;n.id=z.uid(),n.ctx=a,n.canvas=i,n.config=e,n.width=o,n.height=r,n.aspectRatio=r?o/r:null,n.options=e.options,n._bufferedRender=!1,n._layers=[],n.chart=n,n.controller=n,$e.instances[n.id]=n,Object.defineProperty(n,"data",{get:function(){return n.config.data},set:function(t){n.config.data=t}}),a&&i?(n.initialize(),n.update()):console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var t=this;return Ce.notify(t,"beforeInit"),z.retinaScale(t,t.options.devicePixelRatio),t.bindEvents(),t.options.responsive&&t.resize(!0),t.initToolTip(),Ce.notify(t,"afterInit"),t},clear:function(){return z.canvas.clear(this),this},stop:function(){return K.cancelAnimation(this),this},resize:function(t){var e=this,n=e.options,a=e.canvas,i=n.maintainAspectRatio&&e.aspectRatio||null,r=Math.max(0,Math.floor(z.getMaximumWidth(a))),o=Math.max(0,Math.floor(i?r/i:z.getMaximumHeight(a)));if((e.width!==r||e.height!==o)&&(a.width=e.width=r,a.height=e.height=o,a.style.width=r+"px",a.style.height=o+"px",z.retinaScale(e,n.devicePixelRatio),!t)){var s={width:r,height:o};Ce.notify(e,"resize",[s]),n.onResize&&n.onResize(e,s),e.stop(),e.update({duration:n.responsiveAnimationDuration})}},ensureScalesHaveIDs:function(){var t=this.options,e=t.scales||{},n=t.scale;z.each(e.xAxes,(function(t,n){t.id||(t.id=Ge(e.xAxes,"x-axis-",n))})),z.each(e.yAxes,(function(t,n){t.id||(t.id=Ge(e.yAxes,"y-axis-",n))})),n&&(n.id=n.id||"scale")},buildOrUpdateScales:function(){var t=this,e=t.options,n=t.scales||{},a=[],i=Object.keys(n).reduce((function(t,e){return t[e]=!1,t}),{});e.scales&&(a=a.concat((e.scales.xAxes||[]).map((function(t){return{options:t,dtype:"category",dposition:"bottom"}})),(e.scales.yAxes||[]).map((function(t){return{options:t,dtype:"linear",dposition:"left"}})))),e.scale&&a.push({options:e.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),z.each(a,(function(e){var a=e.options,r=a.id,o=Ve(a.type,e.dtype);qe(a.position)!==qe(e.dposition)&&(a.position=e.dposition),i[r]=!0;var s=null;if(r in n&&n[r].type===o)(s=n[r]).options=a,s.ctx=t.ctx,s.chart=t;else{var l=Pe.getScaleConstructor(o);if(!l)return;s=new l({id:r,type:o,options:a,ctx:t.ctx,chart:t}),n[s.id]=s}s.mergeTicksOptions(),e.isDefault&&(t.scale=s)})),z.each(i,(function(t,e){t||delete n[e]})),t.scales=n,Pe.addScalesToLayout(this)},buildOrUpdateControllers:function(){var t,e,n=this,a=[],i=n.data.datasets;for(t=0,e=i.length;t<e;t++){var r=i[t],o=n.getDatasetMeta(t),s=r.type||n.config.type;if(o.type&&o.type!==s&&(n.destroyDatasetMeta(t),o=n.getDatasetMeta(t)),o.type=s,o.order=r.order||0,o.index=t,o.controller)o.controller.updateIndex(t),o.controller.linkScales();else{var l=Kt[o.type];if(void 0===l)throw new Error('"'+o.type+'" is not a chart type.');o.controller=new l(n,t),a.push(o.controller)}}return a},resetElements:function(){var t=this;z.each(t.data.datasets,(function(e,n){t.getDatasetMeta(n).controller.reset()}),t)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(t){var e,n,a=this;if(t&&"object"==typeof t||(t={duration:t,lazy:arguments[1]}),Ue(a),Ce._invalidate(a),!1!==Ce.notify(a,"beforeUpdate")){a.tooltip._data=a.data;var i=a.buildOrUpdateControllers();for(e=0,n=a.data.datasets.length;e<n;e++)a.getDatasetMeta(e).controller.buildOrUpdateElements();a.updateLayout(),a.options.animation&&a.options.animation.duration&&z.each(i,(function(t){t.reset()})),a.updateDatasets(),a.tooltip.initialize(),a.lastActive=[],Ce.notify(a,"afterUpdate"),a._layers.sort(Ze("z","_idx")),a._bufferedRender?a._bufferedRequest={duration:t.duration,easing:t.easing,lazy:t.lazy}:a.render(t)}},updateLayout:function(){var t=this;!1!==Ce.notify(t,"beforeLayout")&&(ge.update(this,this.width,this.height),t._layers=[],z.each(t.boxes,(function(e){e._configure&&e._configure(),t._layers.push.apply(t._layers,e._layers())}),t),t._layers.forEach((function(t,e){t._idx=e})),Ce.notify(t,"afterScaleUpdate"),Ce.notify(t,"afterLayout"))},updateDatasets:function(){if(!1!==Ce.notify(this,"beforeDatasetsUpdate")){for(var t=0,e=this.data.datasets.length;t<e;++t)this.updateDataset(t);Ce.notify(this,"afterDatasetsUpdate")}},updateDataset:function(t){var e=this.getDatasetMeta(t),n={meta:e,index:t};!1!==Ce.notify(this,"beforeDatasetUpdate",[n])&&(e.controller._update(),Ce.notify(this,"afterDatasetUpdate",[n]))},render:function(t){var e=this;t&&"object"==typeof t||(t={duration:t,lazy:arguments[1]});var n=e.options.animation,a=Ve(t.duration,n&&n.duration),i=t.lazy;if(!1!==Ce.notify(e,"beforeRender")){var r=function(t){Ce.notify(e,"afterRender"),z.callback(n&&n.onComplete,[t],e)};if(n&&a){var o=new X({numSteps:a/16.66,easing:t.easing||n.easing,render:function(t,e){var n=z.easing.effects[e.easing],a=e.currentStep,i=a/e.numSteps;t.draw(n(i),i,a)},onAnimationProgress:n.onProgress,onAnimationComplete:r});K.addAnimation(e,o,a,i)}else e.draw(),r(new X({numSteps:0,chart:e}));return e}},draw:function(t){var e,n,a=this;if(a.clear(),z.isNullOrUndef(t)&&(t=1),a.transition(t),!(a.width<=0||a.height<=0)&&!1!==Ce.notify(a,"beforeDraw",[t])){for(n=a._layers,e=0;e<n.length&&n[e].z<=0;++e)n[e].draw(a.chartArea);for(a.drawDatasets(t);e<n.length;++e)n[e].draw(a.chartArea);a._drawTooltip(t),Ce.notify(a,"afterDraw",[t])}},transition:function(t){for(var e=0,n=(this.data.datasets||[]).length;e<n;++e)this.isDatasetVisible(e)&&this.getDatasetMeta(e).controller.transition(t);this.tooltip.transition(t)},_getSortedDatasetMetas:function(t){var e,n,a=[];for(e=0,n=(this.data.datasets||[]).length;e<n;++e)t&&!this.isDatasetVisible(e)||a.push(this.getDatasetMeta(e));return a.sort(Ze("order","index")),a},_getSortedVisibleDatasetMetas:function(){return this._getSortedDatasetMetas(!0)},drawDatasets:function(t){var e,n;if(!1!==Ce.notify(this,"beforeDatasetsDraw",[t])){for(n=(e=this._getSortedVisibleDatasetMetas()).length-1;n>=0;--n)this.drawDataset(e[n],t);Ce.notify(this,"afterDatasetsDraw",[t])}},drawDataset:function(t,e){var n={meta:t,index:t.index,easingValue:e};!1!==Ce.notify(this,"beforeDatasetDraw",[n])&&(t.controller.draw(e),Ce.notify(this,"afterDatasetDraw",[n]))},_drawTooltip:function(t){var e=this.tooltip,n={tooltip:e,easingValue:t};!1!==Ce.notify(this,"beforeTooltipDraw",[n])&&(e.draw(),Ce.notify(this,"afterTooltipDraw",[n]))},getElementAtEvent:function(t){return ie.modes.single(this,t)},getElementsAtEvent:function(t){return ie.modes.label(this,t,{intersect:!0})},getElementsAtXAxis:function(t){return ie.modes["x-axis"](this,t,{intersect:!0})},getElementsAtEventForMode:function(t,e,n){var a=ie.modes[e];return"function"==typeof a?a(this,t,n):[]},getDatasetAtEvent:function(t){return ie.modes.dataset(this,t,{intersect:!0})},getDatasetMeta:function(t){var e=this.data.datasets[t];e._meta||(e._meta={});var n=e._meta[this.id];return n||(n=e._meta[this.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e.order||0,index:t}),n},getVisibleDatasetCount:function(){for(var t=0,e=0,n=this.data.datasets.length;e<n;++e)this.isDatasetVisible(e)&&t++;return t},isDatasetVisible:function(t){var e=this.getDatasetMeta(t);return"boolean"==typeof e.hidden?!e.hidden:!this.data.datasets[t].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(t){var e=this.id,n=this.data.datasets[t],a=n._meta&&n._meta[e];a&&(a.controller.destroy(),delete n._meta[e])},destroy:function(){var t,e,n=this,a=n.canvas;for(n.stop(),t=0,e=n.data.datasets.length;t<e;++t)n.destroyDatasetMeta(t);a&&(n.unbindEvents(),z.canvas.clear(n),De.releaseContext(n.ctx),n.canvas=null,n.ctx=null),Ce.notify(n,"destroy"),delete $e.instances[n.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var t=this;t.tooltip=new ze({_chart:t,_chartInstance:t,_data:t.data,_options:t.options.tooltips},t)},bindEvents:function(){var t=this,e=t._listeners={},n=function(){t.eventHandler.apply(t,arguments)};z.each(t.options.events,(function(a){De.addEventListener(t,a,n),e[a]=n})),t.options.responsive&&(n=function(){t.resize()},De.addEventListener(t,"resize",n),e.resize=n)},unbindEvents:function(){var t=this,e=t._listeners;e&&(delete t._listeners,z.each(e,(function(e,n){De.removeEventListener(t,n,e)})))},updateHoverStyle:function(t,e,n){var a,i,r,o=n?"set":"remove";for(i=0,r=t.length;i<r;++i)(a=t[i])&&this.getDatasetMeta(a._datasetIndex).controller[o+"HoverStyle"](a);"dataset"===e&&this.getDatasetMeta(t[0]._datasetIndex).controller["_"+o+"DatasetHoverStyle"]()},eventHandler:function(t){var e=this,n=e.tooltip;if(!1!==Ce.notify(e,"beforeEvent",[t])){e._bufferedRender=!0,e._bufferedRequest=null;var a=e.handleEvent(t);n&&(a=n._start?n.handleEvent(t):a|n.handleEvent(t)),Ce.notify(e,"afterEvent",[t]);var i=e._bufferedRequest;return i?e.render(i):a&&!e.animating&&(e.stop(),e.render({duration:e.options.hover.animationDuration,lazy:!0})),e._bufferedRender=!1,e._bufferedRequest=null,e}},handleEvent:function(t){var e,n=this,a=n.options||{},i=a.hover;return n.lastActive=n.lastActive||[],"mouseout"===t.type?n.active=[]:n.active=n.getElementsAtEventForMode(t,i.mode,i),z.callback(a.onHover||a.hover.onHover,[t.native,n.active],n),"mouseup"!==t.type&&"click"!==t.type||a.onClick&&a.onClick.call(n,t.native,n.active),n.lastActive.length&&n.updateHoverStyle(n.lastActive,i.mode,!1),n.active.length&&i.mode&&n.updateHoverStyle(n.active,i.mode,!0),e=!z.arrayEquals(n.active,n.lastActive),n.lastActive=n.active,e}}),$e.instances={};var Xe=$e;function Ke(){throw new Error("This method is not implemented: either no adapter can be found or an incomplete integration was provided.")}function Je(t){this.options=t||{}}$e.Controller=$e,$e.types={},z.configMerge=He,z.scaleMerge=Be,z.extend(Je.prototype,{formats:Ke,parse:Ke,format:Ke,add:Ke,diff:Ke,startOf:Ke,endOf:Ke,_create:function(t){return t}}),Je.override=function(t){z.extend(Je.prototype,t)};var Qe={_date:Je},tn={formatters:{values:function(t){return z.isArray(t)?t:""+t},linear:function(t,e,n){var a=n.length>3?n[2]-n[1]:n[1]-n[0];Math.abs(a)>1&&t!==Math.floor(t)&&(a=t-Math.floor(t));var i=z.log10(Math.abs(a)),r="";if(0!==t)if(Math.max(Math.abs(n[0]),Math.abs(n[n.length-1]))<1e-4){var o=z.log10(Math.abs(t)),s=Math.floor(o)-Math.floor(i);s=Math.max(Math.min(s,20),0),r=t.toExponential(s)}else{var l=-1*Math.floor(i);l=Math.max(Math.min(l,20),0),r=t.toFixed(l)}else r="0";return r},logarithmic:function(t,e,n){var a=t/Math.pow(10,Math.floor(z.log10(t)));return 0===t?"0":1===a||2===a||5===a||0===e||e===n.length-1?t.toExponential():""}}},en=z.isArray,nn=z.isNullOrUndef,an=z.valueOrDefault,rn=z.valueAtIndexOrDefault;function on(t,e,n){var a,i=t.getTicks().length,r=Math.min(e,i-1),o=t.getPixelForTick(r),s=t._startPixel,l=t._endPixel;if(!(n&&(a=1===i?Math.max(o-s,l-o):0===e?(t.getPixelForTick(1)-o)/2:(o-t.getPixelForTick(r-1))/2,(o+=r<e?a:-a)<s-1e-6||o>l+1e-6)))return o}function sn(t,e,n,a){var i,r,o,s,l,c,u,d,h,f,g,m,p,b=n.length,v=[],y=[],x=[];for(i=0;i<b;++i){if(s=n[i].label,l=n[i].major?e.major:e.minor,t.font=c=l.string,u=a[c]=a[c]||{data:{},gc:[]},d=l.lineHeight,h=f=0,nn(s)||en(s)){if(en(s))for(r=0,o=s.length;r<o;++r)g=s[r],nn(g)||en(g)||(h=z.measureText(t,u.data,u.gc,h,g),f+=d)}else h=z.measureText(t,u.data,u.gc,h,s),f=d;v.push(h),y.push(f),x.push(d/2)}function _(t){return{width:v[t]||0,height:y[t]||0,offset:x[t]||0}}return function(t,e){z.each(t,(function(t){var n,a=t.gc,i=a.length/2;if(i>e){for(n=0;n<i;++n)delete t.data[a[n]];a.splice(0,i)}}))}(a,b),m=v.indexOf(Math.max.apply(null,v)),p=y.indexOf(Math.max.apply(null,y)),{first:_(0),last:_(b-1),widest:_(m),highest:_(p)}}function ln(t){return t.drawTicks?t.tickMarkLength:0}function cn(t){var e,n;return t.display?(e=z.options._parseFont(t),n=z.options.toPadding(t.padding),e.lineHeight+n.height):0}function un(t,e){return z.extend(z.options._parseFont({fontFamily:an(e.fontFamily,t.fontFamily),fontSize:an(e.fontSize,t.fontSize),fontStyle:an(e.fontStyle,t.fontStyle),lineHeight:an(e.lineHeight,t.lineHeight)}),{color:z.options.resolve([e.fontColor,t.fontColor,R.global.defaultFontColor])})}function dn(t){var e=un(t,t.minor);return{minor:e,major:t.major.enabled?un(t,t.major):e}}function hn(t){var e,n,a,i=[];for(n=0,a=t.length;n<a;++n)void 0!==(e=t[n])._index&&i.push(e);return i}function fn(t,e,n,a){var i,r,o,s,l=an(n,0),c=Math.min(an(a,t.length),t.length),u=0;for(e=Math.ceil(e),a&&(e=(i=a-n)/Math.floor(i/e)),s=l;s<0;)u++,s=Math.round(l+u*e);for(r=Math.max(l,0);r<c;r++)o=t[r],r===s?(o._index=r,u++,s=Math.round(l+u*e)):delete o.label}R._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0,0,0,0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:tn.formatters.values,minor:{},major:{}}});var gn=Z.extend({zeroLineIndex:0,getPadding:function(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}},getTicks:function(){return this._ticks},_getLabels:function(){var t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]},mergeTicksOptions:function(){},beforeUpdate:function(){z.callback(this.options.beforeUpdate,[this])},update:function(t,e,n){var a,i,r,o,s,l=this,c=l.options.ticks,u=c.sampleSize;if(l.beforeUpdate(),l.maxWidth=t,l.maxHeight=e,l.margins=z.extend({left:0,right:0,top:0,bottom:0},n),l._ticks=null,l.ticks=null,l._labelSizes=null,l._maxLabelLines=0,l.longestLabelWidth=0,l.longestTextCache=l.longestTextCache||{},l._gridLineItems=null,l._labelItems=null,l.beforeSetDimensions(),l.setDimensions(),l.afterSetDimensions(),l.beforeDataLimits(),l.determineDataLimits(),l.afterDataLimits(),l.beforeBuildTicks(),o=l.buildTicks()||[],(!(o=l.afterBuildTicks(o)||o)||!o.length)&&l.ticks)for(o=[],a=0,i=l.ticks.length;a<i;++a)o.push({value:l.ticks[a],major:!1});return l._ticks=o,s=u<o.length,r=l._convertTicksToLabels(s?function(t,e){for(var n=[],a=t.length/e,i=0,r=t.length;i<r;i+=a)n.push(t[Math.floor(i)]);return n}(o,u):o),l._configure(),l.beforeCalculateTickRotation(),l.calculateTickRotation(),l.afterCalculateTickRotation(),l.beforeFit(),l.fit(),l.afterFit(),l._ticksToDraw=c.display&&(c.autoSkip||"auto"===c.source)?l._autoSkip(o):o,s&&(r=l._convertTicksToLabels(l._ticksToDraw)),l.ticks=r,l.afterUpdate(),l.minSize},_configure:function(){var t,e,n=this,a=n.options.ticks.reverse;n.isHorizontal()?(t=n.left,e=n.right):(t=n.top,e=n.bottom,a=!a),n._startPixel=t,n._endPixel=e,n._reversePixels=a,n._length=e-t},afterUpdate:function(){z.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){z.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0},afterSetDimensions:function(){z.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){z.callback(this.options.beforeDataLimits,[this])},determineDataLimits:z.noop,afterDataLimits:function(){z.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){z.callback(this.options.beforeBuildTicks,[this])},buildTicks:z.noop,afterBuildTicks:function(t){var e=this;return en(t)&&t.length?z.callback(e.options.afterBuildTicks,[e,t]):(e.ticks=z.callback(e.options.afterBuildTicks,[e,e.ticks])||e.ticks,t)},beforeTickToLabelConversion:function(){z.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var t=this.options.ticks;this.ticks=this.ticks.map(t.userCallback||t.callback,this)},afterTickToLabelConversion:function(){z.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){z.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var t,e,n,a,i,r,o,s=this,l=s.options,c=l.ticks,u=s.getTicks().length,d=c.minRotation||0,h=c.maxRotation,f=d;!s._isVisible()||!c.display||d>=h||u<=1||!s.isHorizontal()?s.labelRotation=d:(e=(t=s._getLabelSizes()).widest.width,n=t.highest.height-t.highest.offset,a=Math.min(s.maxWidth,s.chart.width-e),e+6>(i=l.offset?s.maxWidth/u:a/(u-1))&&(i=a/(u-(l.offset?.5:1)),r=s.maxHeight-ln(l.gridLines)-c.padding-cn(l.scaleLabel),o=Math.sqrt(e*e+n*n),f=z.toDegrees(Math.min(Math.asin(Math.min((t.highest.height+6)/i,1)),Math.asin(Math.min(r/o,1))-Math.asin(n/o))),f=Math.max(d,Math.min(h,f))),s.labelRotation=f)},afterCalculateTickRotation:function(){z.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){z.callback(this.options.beforeFit,[this])},fit:function(){var t=this,e=t.minSize={width:0,height:0},n=t.chart,a=t.options,i=a.ticks,r=a.scaleLabel,o=a.gridLines,s=t._isVisible(),l="bottom"===a.position,c=t.isHorizontal();if(c?e.width=t.maxWidth:s&&(e.width=ln(o)+cn(r)),c?s&&(e.height=ln(o)+cn(r)):e.height=t.maxHeight,i.display&&s){var u=dn(i),d=t._getLabelSizes(),h=d.first,f=d.last,g=d.widest,m=d.highest,p=.4*u.minor.lineHeight,b=i.padding;if(c){var v=0!==t.labelRotation,y=z.toRadians(t.labelRotation),x=Math.cos(y),_=Math.sin(y),O=_*g.width+x*(m.height-(v?m.offset:0))+(v?0:p);e.height=Math.min(t.maxHeight,e.height+O+b);var w,k,M=t.getPixelForTick(0)-t.left,j=t.right-t.getPixelForTick(t.getTicks().length-1);v?(w=l?x*h.width+_*h.offset:_*(h.height-h.offset),k=l?_*(f.height-f.offset):x*f.width+_*f.offset):(w=h.width/2,k=f.width/2),t.paddingLeft=Math.max((w-M)*t.width/(t.width-M),0)+3,t.paddingRight=Math.max((k-j)*t.width/(t.width-j),0)+3}else{var S=i.mirror?0:g.width+b+p;e.width=Math.min(t.maxWidth,e.width+S),t.paddingTop=h.height/2,t.paddingBottom=f.height/2}}t.handleMargins(),c?(t.width=t._length=n.width-t.margins.left-t.margins.right,t.height=e.height):(t.width=e.width,t.height=t._length=n.height-t.margins.top-t.margins.bottom)},handleMargins:function(){var t=this;t.margins&&(t.margins.left=Math.max(t.paddingLeft,t.margins.left),t.margins.top=Math.max(t.paddingTop,t.margins.top),t.margins.right=Math.max(t.paddingRight,t.margins.right),t.margins.bottom=Math.max(t.paddingBottom,t.margins.bottom))},afterFit:function(){z.callback(this.options.afterFit,[this])},isHorizontal:function(){var t=this.options.position;return"top"===t||"bottom"===t},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(t){if(nn(t))return NaN;if(("number"==typeof t||t instanceof Number)&&!isFinite(t))return NaN;if(t)if(this.isHorizontal()){if(void 0!==t.x)return this.getRightValue(t.x)}else if(void 0!==t.y)return this.getRightValue(t.y);return t},_convertTicksToLabels:function(t){var e,n,a,i=this;for(i.ticks=t.map((function(t){return t.value})),i.beforeTickToLabelConversion(),e=i.convertTicksToLabels(t)||i.ticks,i.afterTickToLabelConversion(),n=0,a=t.length;n<a;++n)t[n].label=e[n];return e},_getLabelSizes:function(){var t=this,e=t._labelSizes;return e||(t._labelSizes=e=sn(t.ctx,dn(t.options.ticks),t.getTicks(),t.longestTextCache),t.longestLabelWidth=e.widest.width),e},_parseValue:function(t){var e,n,a,i;return en(t)?(e=+this.getRightValue(t[0]),n=+this.getRightValue(t[1]),a=Math.min(e,n),i=Math.max(e,n)):(e=void 0,n=t=+this.getRightValue(t),a=t,i=t),{min:a,max:i,start:e,end:n}},_getScaleLabel:function(t){var e=this._parseValue(t);return void 0!==e.start?"["+e.start+", "+e.end+"]":+this.getRightValue(t)},getLabelForIndex:z.noop,getPixelForValue:z.noop,getValueForPixel:z.noop,getPixelForTick:function(t){var e=this.options.offset,n=this._ticks.length,a=1/Math.max(n-(e?0:1),1);return t<0||t>n-1?null:this.getPixelForDecimal(t*a+(e?a/2:0))},getPixelForDecimal:function(t){return this._reversePixels&&(t=1-t),this._startPixel+t*this._length},getDecimalForPixel:function(t){var e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var t=this.min,e=this.max;return this.beginAtZero?0:t<0&&e<0?e:t>0&&e>0?t:0},_autoSkip:function(t){var e,n,a,i,r=this.options.ticks,o=this._length,s=r.maxTicksLimit||o/this._tickSize()+1,l=r.major.enabled?function(t){var e,n,a=[];for(e=0,n=t.length;e<n;e++)t[e].major&&a.push(e);return a}(t):[],c=l.length,u=l[0],d=l[c-1];if(c>s)return function(t,e,n){var a,i,r=0,o=e[0];for(n=Math.ceil(n),a=0;a<t.length;a++)i=t[a],a===o?(i._index=a,o=e[++r*n]):delete i.label}(t,l,c/s),hn(t);if(a=function(t,e,n,a){var i,r,o,s,l=function(t){var e,n,a=t.length;if(a<2)return!1;for(n=t[0],e=1;e<a;++e)if(t[e]-t[e-1]!==n)return!1;return n}(t),c=(e.length-1)/a;if(!l)return Math.max(c,1);for(o=0,s=(i=z.math._factorize(l)).length-1;o<s;o++)if((r=i[o])>c)return r;return Math.max(c,1)}(l,t,0,s),c>0){for(e=0,n=c-1;e<n;e++)fn(t,a,l[e],l[e+1]);return i=c>1?(d-u)/(c-1):null,fn(t,a,z.isNullOrUndef(i)?0:u-i,u),fn(t,a,d,z.isNullOrUndef(i)?t.length:d+i),hn(t)}return fn(t,a),hn(t)},_tickSize:function(){var t=this.options.ticks,e=z.toRadians(this.labelRotation),n=Math.abs(Math.cos(e)),a=Math.abs(Math.sin(e)),i=this._getLabelSizes(),r=t.autoSkipPadding||0,o=i?i.widest.width+r:0,s=i?i.highest.height+r:0;return this.isHorizontal()?s*n>o*a?o/n:s/a:s*a<o*n?s/n:o/a},_isVisible:function(){var t,e,n,a=this.chart,i=this.options.display;if("auto"!==i)return!!i;for(t=0,e=a.data.datasets.length;t<e;++t)if(a.isDatasetVisible(t)&&((n=a.getDatasetMeta(t)).xAxisID===this.id||n.yAxisID===this.id))return!0;return!1},_computeGridLineItems:function(t){var e,n,a,i,r,o,s,l,c,u,d,h,f,g,m,p,b,v=this,y=v.chart,x=v.options,_=x.gridLines,O=x.position,w=_.offsetGridLines,k=v.isHorizontal(),M=v._ticksToDraw,j=M.length+(w?1:0),S=ln(_),D=[],C=_.drawBorder?rn(_.lineWidth,0,0):0,P=C/2,T=z._alignPixel,A=function(t){return T(y,t,C)};for("top"===O?(e=A(v.bottom),s=v.bottom-S,c=e-P,d=A(t.top)+P,f=t.bottom):"bottom"===O?(e=A(v.top),d=t.top,f=A(t.bottom)-P,s=e+P,c=v.top+S):"left"===O?(e=A(v.right),o=v.right-S,l=e-P,u=A(t.left)+P,h=t.right):(e=A(v.left),u=t.left,h=A(t.right)-P,o=e+P,l=v.left+S),n=0;n<j;++n)a=M[n]||{},nn(a.label)&&n<M.length||(n===v.zeroLineIndex&&x.offset===w?(g=_.zeroLineWidth,m=_.zeroLineColor,p=_.zeroLineBorderDash||[],b=_.zeroLineBorderDashOffset||0):(g=rn(_.lineWidth,n,1),m=rn(_.color,n,"rgba(0,0,0,0.1)"),p=_.borderDash||[],b=_.borderDashOffset||0),void 0!==(i=on(v,a._index||n,w))&&(r=T(y,i,g),k?o=l=u=h=r:s=c=d=f=r,D.push({tx1:o,ty1:s,tx2:l,ty2:c,x1:u,y1:d,x2:h,y2:f,width:g,color:m,borderDash:p,borderDashOffset:b})));return D.ticksLength=j,D.borderValue=e,D},_computeLabelItems:function(){var t,e,n,a,i,r,o,s,l,c,u,d,h=this,f=h.options,g=f.ticks,m=f.position,p=g.mirror,b=h.isHorizontal(),v=h._ticksToDraw,y=dn(g),x=g.padding,_=ln(f.gridLines),O=-z.toRadians(h.labelRotation),w=[];for("top"===m?(r=h.bottom-_-x,o=O?"left":"center"):"bottom"===m?(r=h.top+_+x,o=O?"right":"center"):"left"===m?(i=h.right-(p?0:_)-x,o=p?"left":"right"):(i=h.left+(p?0:_)+x,o=p?"right":"left"),t=0,e=v.length;t<e;++t)a=(n=v[t]).label,nn(a)||(s=h.getPixelForTick(n._index||t)+g.labelOffset,c=(l=n.major?y.major:y.minor).lineHeight,u=en(a)?a.length:1,b?(i=s,d="top"===m?((O?1:.5)-u)*c:(O?0:.5)*c):(r=s,d=(1-u)*c/2),w.push({x:i,y:r,rotation:O,label:a,font:l,textOffset:d,textAlign:o}));return w},_drawGrid:function(t){var e=this,n=e.options.gridLines;if(n.display){var a,i,r,o,s,l=e.ctx,c=e.chart,u=z._alignPixel,d=n.drawBorder?rn(n.lineWidth,0,0):0,h=e._gridLineItems||(e._gridLineItems=e._computeGridLineItems(t));for(r=0,o=h.length;r<o;++r)a=(s=h[r]).width,i=s.color,a&&i&&(l.save(),l.lineWidth=a,l.strokeStyle=i,l.setLineDash&&(l.setLineDash(s.borderDash),l.lineDashOffset=s.borderDashOffset),l.beginPath(),n.drawTicks&&(l.moveTo(s.tx1,s.ty1),l.lineTo(s.tx2,s.ty2)),n.drawOnChartArea&&(l.moveTo(s.x1,s.y1),l.lineTo(s.x2,s.y2)),l.stroke(),l.restore());if(d){var f,g,m,p,b=d,v=rn(n.lineWidth,h.ticksLength-1,1),y=h.borderValue;e.isHorizontal()?(f=u(c,e.left,b)-b/2,g=u(c,e.right,v)+v/2,m=p=y):(m=u(c,e.top,b)-b/2,p=u(c,e.bottom,v)+v/2,f=g=y),l.lineWidth=d,l.strokeStyle=rn(n.color,0),l.beginPath(),l.moveTo(f,m),l.lineTo(g,p),l.stroke()}}},_drawLabels:function(){var t=this;if(t.options.ticks.display){var e,n,a,i,r,o,s,l,c=t.ctx,u=t._labelItems||(t._labelItems=t._computeLabelItems());for(e=0,a=u.length;e<a;++e){if(o=(r=u[e]).font,c.save(),c.translate(r.x,r.y),c.rotate(r.rotation),c.font=o.string,c.fillStyle=o.color,c.textBaseline="middle",c.textAlign=r.textAlign,s=r.label,l=r.textOffset,en(s))for(n=0,i=s.length;n<i;++n)c.fillText(""+s[n],0,l),l+=o.lineHeight;else c.fillText(s,0,l);c.restore()}}},_drawTitle:function(){var t=this,e=t.ctx,n=t.options,a=n.scaleLabel;if(a.display){var i,r,o=an(a.fontColor,R.global.defaultFontColor),s=z.options._parseFont(a),l=z.options.toPadding(a.padding),c=s.lineHeight/2,u=n.position,d=0;if(t.isHorizontal())i=t.left+t.width/2,r="bottom"===u?t.bottom-c-l.bottom:t.top+c+l.top;else{var h="left"===u;i=h?t.left+c+l.top:t.right-c-l.top,r=t.top+t.height/2,d=h?-.5*Math.PI:.5*Math.PI}e.save(),e.translate(i,r),e.rotate(d),e.textAlign="center",e.textBaseline="middle",e.fillStyle=o,e.font=s.string,e.fillText(a.labelString,0,0),e.restore()}},draw:function(t){this._isVisible()&&(this._drawGrid(t),this._drawTitle(),this._drawLabels())},_layers:function(){var t=this,e=t.options,n=e.ticks&&e.ticks.z||0,a=e.gridLines&&e.gridLines.z||0;return t._isVisible()&&n!==a&&t.draw===t._draw?[{z:a,draw:function(){t._drawGrid.apply(t,arguments),t._drawTitle.apply(t,arguments)}},{z:n,draw:function(){t._drawLabels.apply(t,arguments)}}]:[{z:n,draw:function(){t.draw.apply(t,arguments)}}]},_getMatchingVisibleMetas:function(t){var e=this,n=e.isHorizontal();return e.chart._getSortedVisibleDatasetMetas().filter((function(a){return(!t||a.type===t)&&(n?a.xAxisID===e.id:a.yAxisID===e.id)}))}});gn.prototype._draw=gn.prototype.draw;var mn=gn,pn=z.isNullOrUndef,bn=mn.extend({determineDataLimits:function(){var t,e=this,n=e._getLabels(),a=e.options.ticks,i=a.min,r=a.max,o=0,s=n.length-1;void 0!==i&&(t=n.indexOf(i))>=0&&(o=t),void 0!==r&&(t=n.indexOf(r))>=0&&(s=t),e.minIndex=o,e.maxIndex=s,e.min=n[o],e.max=n[s]},buildTicks:function(){var t=this._getLabels(),e=this.minIndex,n=this.maxIndex;this.ticks=0===e&&n===t.length-1?t:t.slice(e,n+1)},getLabelForIndex:function(t,e){var n=this.chart;return n.getDatasetMeta(e).controller._getValueScaleId()===this.id?this.getRightValue(n.data.datasets[e].data[t]):this._getLabels()[t]},_configure:function(){var t=this,e=t.options.offset,n=t.ticks;mn.prototype._configure.call(t),t.isHorizontal()||(t._reversePixels=!t._reversePixels),n&&(t._startValue=t.minIndex-(e?.5:0),t._valueRange=Math.max(n.length-(e?0:1),1))},getPixelForValue:function(t,e,n){var a,i,r,o=this;return pn(e)||pn(n)||(t=o.chart.data.datasets[n].data[e]),pn(t)||(a=o.isHorizontal()?t.x:t.y),(void 0!==a||void 0!==t&&isNaN(e))&&(i=o._getLabels(),t=z.valueOrDefault(a,t),e=-1!==(r=i.indexOf(t))?r:e,isNaN(e)&&(e=t)),o.getPixelForDecimal((e-o._startValue)/o._valueRange)},getPixelForTick:function(t){var e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t],t+this.minIndex)},getValueForPixel:function(t){var e=Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange);return Math.min(Math.max(e,0),this.ticks.length-1)},getBasePixel:function(){return this.bottom}}),vn={position:"bottom"};bn._defaults=vn;var yn=z.noop,xn=z.isNullOrUndef,_n=mn.extend({getRightValue:function(t){return"string"==typeof t?+t:mn.prototype.getRightValue.call(this,t)},handleTickRangeOptions:function(){var t=this,e=t.options.ticks;if(e.beginAtZero){var n=z.sign(t.min),a=z.sign(t.max);n<0&&a<0?t.max=0:n>0&&a>0&&(t.min=0)}var i=void 0!==e.min||void 0!==e.suggestedMin,r=void 0!==e.max||void 0!==e.suggestedMax;void 0!==e.min?t.min=e.min:void 0!==e.suggestedMin&&(null===t.min?t.min=e.suggestedMin:t.min=Math.min(t.min,e.suggestedMin)),void 0!==e.max?t.max=e.max:void 0!==e.suggestedMax&&(null===t.max?t.max=e.suggestedMax:t.max=Math.max(t.max,e.suggestedMax)),i!==r&&t.min>=t.max&&(i?t.max=t.min+1:t.min=t.max-1),t.min===t.max&&(t.max++,e.beginAtZero||t.min--)},getTickLimit:function(){var t,e=this.options.ticks,n=e.stepSize,a=e.maxTicksLimit;return n?t=Math.ceil(this.max/n)-Math.floor(this.min/n)+1:(t=this._computeTickLimit(),a=a||11),a&&(t=Math.min(a,t)),t},_computeTickLimit:function(){return Number.POSITIVE_INFINITY},handleDirectionalChanges:yn,buildTicks:function(){var t=this,e=t.options.ticks,n=t.getTickLimit(),a={maxTicks:n=Math.max(2,n),min:e.min,max:e.max,precision:e.precision,stepSize:z.valueOrDefault(e.fixedStepSize,e.stepSize)},i=t.ticks=function(t,e){var n,a,i,r,o=[],s=t.stepSize,l=s||1,c=t.maxTicks-1,u=t.min,d=t.max,h=t.precision,f=e.min,g=e.max,m=z.niceNum((g-f)/c/l)*l;if(m<1e-14&&xn(u)&&xn(d))return[f,g];(r=Math.ceil(g/m)-Math.floor(f/m))>c&&(m=z.niceNum(r*m/c/l)*l),s||xn(h)?n=Math.pow(10,z._decimalPlaces(m)):(n=Math.pow(10,h),m=Math.ceil(m*n)/n),a=Math.floor(f/m)*m,i=Math.ceil(g/m)*m,s&&(!xn(u)&&z.almostWhole(u/m,m/1e3)&&(a=u),!xn(d)&&z.almostWhole(d/m,m/1e3)&&(i=d)),r=(i-a)/m,r=z.almostEquals(r,Math.round(r),m/1e3)?Math.round(r):Math.ceil(r),a=Math.round(a*n)/n,i=Math.round(i*n)/n,o.push(xn(u)?a:u);for(var p=1;p<r;++p)o.push(Math.round((a+p*m)*n)/n);return o.push(xn(d)?i:d),o}(a,t);t.handleDirectionalChanges(),t.max=z.max(i),t.min=z.min(i),e.reverse?(i.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max)},convertTicksToLabels:function(){var t=this;t.ticksAsNumbers=t.ticks.slice(),t.zeroLineIndex=t.ticks.indexOf(0),mn.prototype.convertTicksToLabels.call(t)},_configure:function(){var t,e=this,n=e.getTicks(),a=e.min,i=e.max;mn.prototype._configure.call(e),e.options.offset&&n.length&&(a-=t=(i-a)/Math.max(n.length-1,1)/2,i+=t),e._startValue=a,e._endValue=i,e._valueRange=i-a}}),On={position:"left",ticks:{callback:tn.formatters.linear}};function wn(t,e,n,a){var i,r,o=t.options,s=function(t,e,n){var a=[n.type,void 0===e&&void 0===n.stack?n.index:"",n.stack].join(".");return void 0===t[a]&&(t[a]={pos:[],neg:[]}),t[a]}(e,o.stacked,n),l=s.pos,c=s.neg,u=a.length;for(i=0;i<u;++i)r=t._parseValue(a[i]),isNaN(r.min)||isNaN(r.max)||n.data[i].hidden||(l[i]=l[i]||0,c[i]=c[i]||0,o.relativePoints?l[i]=100:r.min<0||r.max<0?c[i]+=r.min:l[i]+=r.max)}function kn(t,e,n){var a,i,r=n.length;for(a=0;a<r;++a)i=t._parseValue(n[a]),isNaN(i.min)||isNaN(i.max)||e.data[a].hidden||(t.min=Math.min(t.min,i.min),t.max=Math.max(t.max,i.max))}var Mn=_n.extend({determineDataLimits:function(){var t,e,n,a,i=this,r=i.options,o=i.chart.data.datasets,s=i._getMatchingVisibleMetas(),l=r.stacked,c={},u=s.length;if(i.min=Number.POSITIVE_INFINITY,i.max=Number.NEGATIVE_INFINITY,void 0===l)for(t=0;!l&&t<u;++t)l=void 0!==(e=s[t]).stack;for(t=0;t<u;++t)n=o[(e=s[t]).index].data,l?wn(i,c,e,n):kn(i,e,n);z.each(c,(function(t){a=t.pos.concat(t.neg),i.min=Math.min(i.min,z.min(a)),i.max=Math.max(i.max,z.max(a))})),i.min=z.isFinite(i.min)&&!isNaN(i.min)?i.min:0,i.max=z.isFinite(i.max)&&!isNaN(i.max)?i.max:1,i.handleTickRangeOptions()},_computeTickLimit:function(){var t;return this.isHorizontal()?Math.ceil(this.width/40):(t=z.options._parseFont(this.options.ticks),Math.ceil(this.height/t.lineHeight))},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(t,e){return this._getScaleLabel(this.chart.data.datasets[e].data[t])},getPixelForValue:function(t){return this.getPixelForDecimal((+this.getRightValue(t)-this._startValue)/this._valueRange)},getValueForPixel:function(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange},getPixelForTick:function(t){var e=this.ticksAsNumbers;return t<0||t>e.length-1?null:this.getPixelForValue(e[t])}}),jn=On;Mn._defaults=jn;var Sn=z.valueOrDefault,Dn=z.math.log10,Cn={position:"left",ticks:{callback:tn.formatters.logarithmic}};function Pn(t,e){return z.isFinite(t)&&t>=0?t:e}var Tn=mn.extend({determineDataLimits:function(){var t,e,n,a,i,r,o=this,s=o.options,l=o.chart,c=l.data.datasets,u=o.isHorizontal();function d(t){return u?t.xAxisID===o.id:t.yAxisID===o.id}o.min=Number.POSITIVE_INFINITY,o.max=Number.NEGATIVE_INFINITY,o.minNotZero=Number.POSITIVE_INFINITY;var h=s.stacked;if(void 0===h)for(t=0;t<c.length;t++)if(e=l.getDatasetMeta(t),l.isDatasetVisible(t)&&d(e)&&void 0!==e.stack){h=!0;break}if(s.stacked||h){var f={};for(t=0;t<c.length;t++){var g=[(e=l.getDatasetMeta(t)).type,void 0===s.stacked&&void 0===e.stack?t:"",e.stack].join(".");if(l.isDatasetVisible(t)&&d(e))for(void 0===f[g]&&(f[g]=[]),i=0,r=(a=c[t].data).length;i<r;i++){var m=f[g];n=o._parseValue(a[i]),isNaN(n.min)||isNaN(n.max)||e.data[i].hidden||n.min<0||n.max<0||(m[i]=m[i]||0,m[i]+=n.max)}}z.each(f,(function(t){if(t.length>0){var e=z.min(t),n=z.max(t);o.min=Math.min(o.min,e),o.max=Math.max(o.max,n)}}))}else for(t=0;t<c.length;t++)if(e=l.getDatasetMeta(t),l.isDatasetVisible(t)&&d(e))for(i=0,r=(a=c[t].data).length;i<r;i++)n=o._parseValue(a[i]),isNaN(n.min)||isNaN(n.max)||e.data[i].hidden||n.min<0||n.max<0||(o.min=Math.min(n.min,o.min),o.max=Math.max(n.max,o.max),0!==n.min&&(o.minNotZero=Math.min(n.min,o.minNotZero)));o.min=z.isFinite(o.min)?o.min:null,o.max=z.isFinite(o.max)?o.max:null,o.minNotZero=z.isFinite(o.minNotZero)?o.minNotZero:null,this.handleTickRangeOptions()},handleTickRangeOptions:function(){var t=this,e=t.options.ticks;t.min=Pn(e.min,t.min),t.max=Pn(e.max,t.max),t.min===t.max&&(0!==t.min&&null!==t.min?(t.min=Math.pow(10,Math.floor(Dn(t.min))-1),t.max=Math.pow(10,Math.floor(Dn(t.max))+1)):(t.min=1,t.max=10)),null===t.min&&(t.min=Math.pow(10,Math.floor(Dn(t.max))-1)),null===t.max&&(t.max=0!==t.min?Math.pow(10,Math.floor(Dn(t.min))+1):10),null===t.minNotZero&&(t.min>0?t.minNotZero=t.min:t.max<1?t.minNotZero=Math.pow(10,Math.floor(Dn(t.max))):t.minNotZero=1)},buildTicks:function(){var t=this,e=t.options.ticks,n=!t.isHorizontal(),a={min:Pn(e.min),max:Pn(e.max)},i=t.ticks=function(t,e){var n,a,i=[],r=Sn(t.min,Math.pow(10,Math.floor(Dn(e.min)))),o=Math.floor(Dn(e.max)),s=Math.ceil(e.max/Math.pow(10,o));0===r?(n=Math.floor(Dn(e.minNotZero)),a=Math.floor(e.minNotZero/Math.pow(10,n)),i.push(r),r=a*Math.pow(10,n)):(n=Math.floor(Dn(r)),a=Math.floor(r/Math.pow(10,n)));var l=n<0?Math.pow(10,Math.abs(n)):1;do{i.push(r),10==++a&&(a=1,l=++n>=0?1:l),r=Math.round(a*Math.pow(10,n)*l)/l}while(n<o||n===o&&a<s);var c=Sn(t.max,r);return i.push(c),i}(a,t);t.max=z.max(i),t.min=z.min(i),e.reverse?(n=!n,t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),n&&i.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),mn.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(t,e){return this._getScaleLabel(this.chart.data.datasets[e].data[t])},getPixelForTick:function(t){var e=this.tickValues;return t<0||t>e.length-1?null:this.getPixelForValue(e[t])},_getFirstTickValue:function(t){var e=Math.floor(Dn(t));return Math.floor(t/Math.pow(10,e))*Math.pow(10,e)},_configure:function(){var t=this,e=t.min,n=0;mn.prototype._configure.call(t),0===e&&(e=t._getFirstTickValue(t.minNotZero),n=Sn(t.options.ticks.fontSize,R.global.defaultFontSize)/t._length),t._startValue=Dn(e),t._valueOffset=n,t._valueRange=(Dn(t.max)-Dn(e))/(1-n)},getPixelForValue:function(t){var e=this,n=0;return(t=+e.getRightValue(t))>e.min&&t>0&&(n=(Dn(t)-e._startValue)/e._valueRange+e._valueOffset),e.getPixelForDecimal(n)},getValueForPixel:function(t){var e=this,n=e.getDecimalForPixel(t);return 0===n&&0===e.min?0:Math.pow(10,e._startValue+(n-e._valueOffset)*e._valueRange)}}),An=Cn;Tn._defaults=An;var Fn=z.valueOrDefault,In=z.valueAtIndexOrDefault,Nn=z.options.resolve,Rn={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0,0,0,0.1)",lineWidth:1,borderDash:[],borderDashOffset:0},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:tn.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(t){return t}}};function Ln(t){var e=t.ticks;return e.display&&t.display?Fn(e.fontSize,R.global.defaultFontSize)+2*e.backdropPaddingY:0}function Yn(t,e,n,a,i){return t===a||t===i?{start:e-n/2,end:e+n/2}:t<a||t>i?{start:e-n,end:e}:{start:e,end:e+n}}function Wn(t){return 0===t||180===t?"center":t<180?"left":"right"}function En(t,e,n,a){var i,r,o=n.y+a/2;if(z.isArray(e))for(i=0,r=e.length;i<r;++i)t.fillText(e[i],n.x,o),o+=a;else t.fillText(e,n.x,o)}function zn(t,e,n){90===t||270===t?n.y-=e.h/2:(t>270||t<90)&&(n.y-=e.h)}function Vn(t){return z.isNumber(t)?t:0}var Bn=_n.extend({setDimensions:function(){var t=this;t.width=t.maxWidth,t.height=t.maxHeight,t.paddingTop=Ln(t.options)/2,t.xCenter=Math.floor(t.width/2),t.yCenter=Math.floor((t.height-t.paddingTop)/2),t.drawingArea=Math.min(t.height-t.paddingTop,t.width)/2},determineDataLimits:function(){var t=this,e=t.chart,n=Number.POSITIVE_INFINITY,a=Number.NEGATIVE_INFINITY;z.each(e.data.datasets,(function(i,r){if(e.isDatasetVisible(r)){var o=e.getDatasetMeta(r);z.each(i.data,(function(e,i){var r=+t.getRightValue(e);isNaN(r)||o.data[i].hidden||(n=Math.min(r,n),a=Math.max(r,a))}))}})),t.min=n===Number.POSITIVE_INFINITY?0:n,t.max=a===Number.NEGATIVE_INFINITY?0:a,t.handleTickRangeOptions()},_computeTickLimit:function(){return Math.ceil(this.drawingArea/Ln(this.options))},convertTicksToLabels:function(){var t=this;_n.prototype.convertTicksToLabels.call(t),t.pointLabels=t.chart.data.labels.map((function(){var e=z.callback(t.options.pointLabels.callback,arguments,t);return e||0===e?e:""}))},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},fit:function(){var t=this.options;t.display&&t.pointLabels.display?function(t){var e,n,a,i=z.options._parseFont(t.options.pointLabels),r={l:0,r:t.width,t:0,b:t.height-t.paddingTop},o={};t.ctx.font=i.string,t._pointLabelSizes=[];var s,l,c,u=t.chart.data.labels.length;for(e=0;e<u;e++){a=t.getPointPosition(e,t.drawingArea+5),s=t.ctx,l=i.lineHeight,c=t.pointLabels[e],n=z.isArray(c)?{w:z.longestText(s,s.font,c),h:c.length*l}:{w:s.measureText(c).width,h:l},t._pointLabelSizes[e]=n;var d=t.getIndexAngle(e),h=z.toDegrees(d)%360,f=Yn(h,a.x,n.w,0,180),g=Yn(h,a.y,n.h,90,270);f.start<r.l&&(r.l=f.start,o.l=d),f.end>r.r&&(r.r=f.end,o.r=d),g.start<r.t&&(r.t=g.start,o.t=d),g.end>r.b&&(r.b=g.end,o.b=d)}t.setReductions(t.drawingArea,r,o)}(this):this.setCenterPoint(0,0,0,0)},setReductions:function(t,e,n){var a=this,i=e.l/Math.sin(n.l),r=Math.max(e.r-a.width,0)/Math.sin(n.r),o=-e.t/Math.cos(n.t),s=-Math.max(e.b-(a.height-a.paddingTop),0)/Math.cos(n.b);i=Vn(i),r=Vn(r),o=Vn(o),s=Vn(s),a.drawingArea=Math.min(Math.floor(t-(i+r)/2),Math.floor(t-(o+s)/2)),a.setCenterPoint(i,r,o,s)},setCenterPoint:function(t,e,n,a){var i=this,r=i.width-e-i.drawingArea,o=t+i.drawingArea,s=n+i.drawingArea,l=i.height-i.paddingTop-a-i.drawingArea;i.xCenter=Math.floor((o+r)/2+i.left),i.yCenter=Math.floor((s+l)/2+i.top+i.paddingTop)},getIndexAngle:function(t){var e=this.chart,n=(t*(360/e.data.labels.length)+((e.options||{}).startAngle||0))%360;return(n<0?n+360:n)*Math.PI*2/360},getDistanceFromCenterForValue:function(t){var e=this;if(z.isNullOrUndef(t))return NaN;var n=e.drawingArea/(e.max-e.min);return e.options.ticks.reverse?(e.max-t)*n:(t-e.min)*n},getPointPosition:function(t,e){var n=this.getIndexAngle(t)-Math.PI/2;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter}},getPointPositionForValue:function(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))},getBasePosition:function(t){var e=this.min,n=this.max;return this.getPointPositionForValue(t||0,this.beginAtZero?0:e<0&&n<0?n:e>0&&n>0?e:0)},_drawGrid:function(){var t,e,n,a=this,i=a.ctx,r=a.options,o=r.gridLines,s=r.angleLines,l=Fn(s.lineWidth,o.lineWidth),c=Fn(s.color,o.color);if(r.pointLabels.display&&function(t){var e=t.ctx,n=t.options,a=n.pointLabels,i=Ln(n),r=t.getDistanceFromCenterForValue(n.ticks.reverse?t.min:t.max),o=z.options._parseFont(a);e.save(),e.font=o.string,e.textBaseline="middle";for(var s=t.chart.data.labels.length-1;s>=0;s--){var l=0===s?i/2:0,c=t.getPointPosition(s,r+l+5),u=In(a.fontColor,s,R.global.defaultFontColor);e.fillStyle=u;var d=t.getIndexAngle(s),h=z.toDegrees(d);e.textAlign=Wn(h),zn(h,t._pointLabelSizes[s],c),En(e,t.pointLabels[s],c,o.lineHeight)}e.restore()}(a),o.display&&z.each(a.ticks,(function(t,n){0!==n&&(e=a.getDistanceFromCenterForValue(a.ticksAsNumbers[n]),function(t,e,n,a){var i,r=t.ctx,o=e.circular,s=t.chart.data.labels.length,l=In(e.color,a-1),c=In(e.lineWidth,a-1);if((o||s)&&l&&c){if(r.save(),r.strokeStyle=l,r.lineWidth=c,r.setLineDash&&(r.setLineDash(e.borderDash||[]),r.lineDashOffset=e.borderDashOffset||0),r.beginPath(),o)r.arc(t.xCenter,t.yCenter,n,0,2*Math.PI);else{i=t.getPointPosition(0,n),r.moveTo(i.x,i.y);for(var u=1;u<s;u++)i=t.getPointPosition(u,n),r.lineTo(i.x,i.y)}r.closePath(),r.stroke(),r.restore()}}(a,o,e,n))})),s.display&&l&&c){for(i.save(),i.lineWidth=l,i.strokeStyle=c,i.setLineDash&&(i.setLineDash(Nn([s.borderDash,o.borderDash,[]])),i.lineDashOffset=Nn([s.borderDashOffset,o.borderDashOffset,0])),t=a.chart.data.labels.length-1;t>=0;t--)e=a.getDistanceFromCenterForValue(r.ticks.reverse?a.min:a.max),n=a.getPointPosition(t,e),i.beginPath(),i.moveTo(a.xCenter,a.yCenter),i.lineTo(n.x,n.y),i.stroke();i.restore()}},_drawLabels:function(){var t=this,e=t.ctx,n=t.options.ticks;if(n.display){var a,i,r=t.getIndexAngle(0),o=z.options._parseFont(n),s=Fn(n.fontColor,R.global.defaultFontColor);e.save(),e.font=o.string,e.translate(t.xCenter,t.yCenter),e.rotate(r),e.textAlign="center",e.textBaseline="middle",z.each(t.ticks,(function(r,l){(0!==l||n.reverse)&&(a=t.getDistanceFromCenterForValue(t.ticksAsNumbers[l]),n.showLabelBackdrop&&(i=e.measureText(r).width,e.fillStyle=n.backdropColor,e.fillRect(-i/2-n.backdropPaddingX,-a-o.size/2-n.backdropPaddingY,i+2*n.backdropPaddingX,o.size+2*n.backdropPaddingY)),e.fillStyle=s,e.fillText(r,0,-a))})),e.restore()}},_drawTitle:z.noop}),Hn=Rn;Bn._defaults=Hn;var Un=z._deprecated,Gn=z.options.resolve,qn=z.valueOrDefault,Zn=Number.MIN_SAFE_INTEGER||-9007199254740991,$n=Number.MAX_SAFE_INTEGER||9007199254740991,Xn={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Kn=Object.keys(Xn);function Jn(t,e){return t-e}function Qn(t){return z.valueOrDefault(t.time.min,t.ticks.min)}function ta(t){return z.valueOrDefault(t.time.max,t.ticks.max)}function ea(t,e,n,a){var i=function(t,e,n){for(var a,i,r,o=0,s=t.length-1;o>=0&&o<=s;){if(i=t[(a=o+s>>1)-1]||null,r=t[a],!i)return{lo:null,hi:r};if(r[e]<n)o=a+1;else{if(!(i[e]>n))return{lo:i,hi:r};s=a-1}}return{lo:r,hi:null}}(t,e,n),r=i.lo?i.hi?i.lo:t[t.length-2]:t[0],o=i.lo?i.hi?i.hi:t[t.length-1]:t[1],s=o[e]-r[e],l=s?(n-r[e])/s:0,c=(o[a]-r[a])*l;return r[a]+c}function na(t,e){var n=t._adapter,a=t.options.time,i=a.parser,r=i||a.format,o=e;return"function"==typeof i&&(o=i(o)),z.isFinite(o)||(o="string"==typeof r?n.parse(o,r):n.parse(o)),null!==o?+o:(i||"function"!=typeof r||(o=r(e),z.isFinite(o)||(o=n.parse(o))),o)}function aa(t,e){if(z.isNullOrUndef(e))return null;var n=t.options.time,a=na(t,t.getRightValue(e));return null===a||n.round&&(a=+t._adapter.startOf(a,n.round)),a}function ia(t,e,n,a){var i,r,o,s=Kn.length;for(i=Kn.indexOf(t);i<s-1;++i)if(o=(r=Xn[Kn[i]]).steps?r.steps:$n,r.common&&Math.ceil((n-e)/(o*r.size))<=a)return Kn[i];return Kn[s-1]}function ra(t,e,n){var a,i,r=[],o={},s=e.length;for(a=0;a<s;++a)o[i=e[a]]=a,r.push({value:i,major:!1});return 0!==s&&n?function(t,e,n,a){var i,r,o=t._adapter,s=+o.startOf(e[0].value,a),l=e[e.length-1].value;for(i=s;i<=l;i=+o.add(i,1,a))(r=n[i])>=0&&(e[r].major=!0);return e}(t,r,o,n):r}var oa=mn.extend({initialize:function(){this.mergeTicksOptions(),mn.prototype.initialize.call(this)},update:function(){var t=this,e=t.options,n=e.time||(e.time={}),a=t._adapter=new Qe._date(e.adapters.date);return Un("time scale",n.format,"time.format","time.parser"),Un("time scale",n.min,"time.min","ticks.min"),Un("time scale",n.max,"time.max","ticks.max"),z.mergeIf(n.displayFormats,a.formats()),mn.prototype.update.apply(t,arguments)},getRightValue:function(t){return t&&void 0!==t.t&&(t=t.t),mn.prototype.getRightValue.call(this,t)},determineDataLimits:function(){var t,e,n,a,i,r,o,s=this,l=s.chart,c=s._adapter,u=s.options,d=u.time.unit||"day",h=$n,f=Zn,g=[],m=[],p=[],b=s._getLabels();for(t=0,n=b.length;t<n;++t)p.push(aa(s,b[t]));for(t=0,n=(l.data.datasets||[]).length;t<n;++t)if(l.isDatasetVisible(t))if(i=l.data.datasets[t].data,z.isObject(i[0]))for(m[t]=[],e=0,a=i.length;e<a;++e)r=aa(s,i[e]),g.push(r),m[t][e]=r;else m[t]=p.slice(0),o||(g=g.concat(p),o=!0);else m[t]=[];p.length&&(h=Math.min(h,p[0]),f=Math.max(f,p[p.length-1])),g.length&&(g=n>1?function(t){var e,n,a,i={},r=[];for(e=0,n=t.length;e<n;++e)i[a=t[e]]||(i[a]=!0,r.push(a));return r}(g).sort(Jn):g.sort(Jn),h=Math.min(h,g[0]),f=Math.max(f,g[g.length-1])),h=aa(s,Qn(u))||h,f=aa(s,ta(u))||f,h=h===$n?+c.startOf(Date.now(),d):h,f=f===Zn?+c.endOf(Date.now(),d)+1:f,s.min=Math.min(h,f),s.max=Math.max(h+1,f),s._table=[],s._timestamps={data:g,datasets:m,labels:p}},buildTicks:function(){var t,e,n,a=this,i=a.min,r=a.max,o=a.options,s=o.ticks,l=o.time,c=a._timestamps,u=[],d=a.getLabelCapacity(i),h=s.source,f=o.distribution;for(c="data"===h||"auto"===h&&"series"===f?c.data:"labels"===h?c.labels:function(t,e,n,a){var i,r=t._adapter,o=t.options,s=o.time,l=s.unit||ia(s.minUnit,e,n,a),c=Gn([s.stepSize,s.unitStepSize,1]),u="week"===l&&s.isoWeekday,d=e,h=[];if(u&&(d=+r.startOf(d,"isoWeek",u)),d=+r.startOf(d,u?"day":l),r.diff(n,e,l)>1e5*c)throw e+" and "+n+" are too far apart with stepSize of "+c+" "+l;for(i=d;i<n;i=+r.add(i,c,l))h.push(i);return i!==n&&"ticks"!==o.bounds||h.push(i),h}(a,i,r,d),"ticks"===o.bounds&&c.length&&(i=c[0],r=c[c.length-1]),i=aa(a,Qn(o))||i,r=aa(a,ta(o))||r,t=0,e=c.length;t<e;++t)(n=c[t])>=i&&n<=r&&u.push(n);return a.min=i,a.max=r,a._unit=l.unit||(s.autoSkip?ia(l.minUnit,a.min,a.max,d):function(t,e,n,a,i){var r,o;for(r=Kn.length-1;r>=Kn.indexOf(n);r--)if(o=Kn[r],Xn[o].common&&t._adapter.diff(i,a,o)>=e-1)return o;return Kn[n?Kn.indexOf(n):0]}(a,u.length,l.minUnit,a.min,a.max)),a._majorUnit=s.major.enabled&&"year"!==a._unit?function(t){for(var e=Kn.indexOf(t)+1,n=Kn.length;e<n;++e)if(Xn[Kn[e]].common)return Kn[e]}(a._unit):void 0,a._table=function(t,e,n,a){if("linear"===a||!t.length)return[{time:e,pos:0},{time:n,pos:1}];var i,r,o,s,l,c=[],u=[e];for(i=0,r=t.length;i<r;++i)(s=t[i])>e&&s<n&&u.push(s);for(u.push(n),i=0,r=u.length;i<r;++i)l=u[i+1],o=u[i-1],s=u[i],void 0!==o&&void 0!==l&&Math.round((l+o)/2)===s||c.push({time:s,pos:i/(r-1)});return c}(a._timestamps.data,i,r,f),a._offsets=function(t,e,n,a,i){var r,o,s=0,l=0;return i.offset&&e.length&&(r=ea(t,"time",e[0],"pos"),s=1===e.length?1-r:(ea(t,"time",e[1],"pos")-r)/2,o=ea(t,"time",e[e.length-1],"pos"),l=1===e.length?o:(o-ea(t,"time",e[e.length-2],"pos"))/2),{start:s,end:l,factor:1/(s+1+l)}}(a._table,u,0,0,o),s.reverse&&u.reverse(),ra(a,u,a._majorUnit)},getLabelForIndex:function(t,e){var n=this,a=n._adapter,i=n.chart.data,r=n.options.time,o=i.labels&&t<i.labels.length?i.labels[t]:"",s=i.datasets[e].data[t];return z.isObject(s)&&(o=n.getRightValue(s)),r.tooltipFormat?a.format(na(n,o),r.tooltipFormat):"string"==typeof o?o:a.format(na(n,o),r.displayFormats.datetime)},tickFormatFunction:function(t,e,n,a){var i=this._adapter,r=this.options,o=r.time.displayFormats,s=o[this._unit],l=this._majorUnit,c=o[l],u=n[e],d=r.ticks,h=l&&c&&u&&u.major,f=i.format(t,a||(h?c:s)),g=h?d.major:d.minor,m=Gn([g.callback,g.userCallback,d.callback,d.userCallback]);return m?m(f,e,n):f},convertTicksToLabels:function(t){var e,n,a=[];for(e=0,n=t.length;e<n;++e)a.push(this.tickFormatFunction(t[e].value,e,t));return a},getPixelForOffset:function(t){var e=this._offsets,n=ea(this._table,"time",t,"pos");return this.getPixelForDecimal((e.start+n)*e.factor)},getPixelForValue:function(t,e,n){var a=null;if(void 0!==e&&void 0!==n&&(a=this._timestamps.datasets[n][e]),null===a&&(a=aa(this,t)),null!==a)return this.getPixelForOffset(a)},getPixelForTick:function(t){var e=this.getTicks();return t>=0&&t<e.length?this.getPixelForOffset(e[t].value):null},getValueForPixel:function(t){var e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end,a=ea(this._table,"pos",n,"time");return this._adapter._create(a)},_getLabelSize:function(t){var e=this.options.ticks,n=this.ctx.measureText(t).width,a=z.toRadians(this.isHorizontal()?e.maxRotation:e.minRotation),i=Math.cos(a),r=Math.sin(a),o=qn(e.fontSize,R.global.defaultFontSize);return{w:n*i+o*r,h:n*r+o*i}},getLabelWidth:function(t){return this._getLabelSize(t).w},getLabelCapacity:function(t){var e=this,n=e.options.time,a=n.displayFormats,i=a[n.unit]||a.millisecond,r=e.tickFormatFunction(t,0,ra(e,[t],e._majorUnit),i),o=e._getLabelSize(r),s=Math.floor(e.isHorizontal()?e.width/o.w:e.height/o.h);return e.options.offset&&s--,s>0?s:1}}),sa={position:"bottom",distribution:"linear",bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}};oa._defaults=sa;var la={category:bn,linear:Mn,logarithmic:Tn,radialLinear:Bn,time:oa},ca={datetime:"MMM D, YYYY, h:mm:ss a",millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"};Qe._date.override("function"==typeof t?{_id:"moment",formats:function(){return ca},parse:function(e,n){return"string"==typeof e&&"string"==typeof n?e=t(e,n):e instanceof t||(e=t(e)),e.isValid()?e.valueOf():null},format:function(e,n){return t(e).format(n)},add:function(e,n,a){return t(e).add(n,a).valueOf()},diff:function(e,n,a){return t(e).diff(t(n),a)},startOf:function(e,n,a){return e=t(e),"isoWeek"===n?e.isoWeekday(a).valueOf():e.startOf(n).valueOf()},endOf:function(e,n){return t(e).endOf(n).valueOf()},_create:function(e){return t(e)}}:{}),R._set("global",{plugins:{filler:{propagate:!0}}});var ua={dataset:function(t){var e=t.fill,n=t.chart,a=n.getDatasetMeta(e),i=a&&n.isDatasetVisible(e)&&a.dataset._children||[],r=i.length||0;return r?function(t,e){return e<r&&i[e]._view||null}:null},boundary:function(t){var e=t.boundary,n=e?e.x:null,a=e?e.y:null;return z.isArray(e)?function(t,n){return e[n]}:function(t){return{x:null===n?t.x:n,y:null===a?t.y:a}}}};function da(t,e,n){var a,i=t._model||{},r=i.fill;if(void 0===r&&(r=!!i.backgroundColor),!1===r||null===r)return!1;if(!0===r)return"origin";if(a=parseFloat(r,10),isFinite(a)&&Math.floor(a)===a)return"-"!==r[0]&&"+"!==r[0]||(a=e+a),!(a===e||a<0||a>=n)&&a;switch(r){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return r;default:return!1}}function ha(t){return(t.el._scale||{}).getPointPositionForValue?function(t){var e,n,a,i,r,o=t.el._scale,s=o.options,l=o.chart.data.labels.length,c=t.fill,u=[];if(!l)return null;for(e=s.ticks.reverse?o.max:o.min,n=s.ticks.reverse?o.min:o.max,a=o.getPointPositionForValue(0,e),i=0;i<l;++i)r="start"===c||"end"===c?o.getPointPositionForValue(i,"start"===c?e:n):o.getBasePosition(i),s.gridLines.circular&&(r.cx=a.x,r.cy=a.y,r.angle=o.getIndexAngle(i)-Math.PI/2),u.push(r);return u}(t):function(t){var e,n=t.el._model||{},a=t.el._scale||{},i=t.fill,r=null;if(isFinite(i))return null;if("start"===i?r=void 0===n.scaleBottom?a.bottom:n.scaleBottom:"end"===i?r=void 0===n.scaleTop?a.top:n.scaleTop:void 0!==n.scaleZero?r=n.scaleZero:a.getBasePixel&&(r=a.getBasePixel()),null!=r){if(void 0!==r.x&&void 0!==r.y)return r;if(z.isFinite(r))return{x:(e=a.isHorizontal())?r:null,y:e?null:r}}return null}(t)}function fa(t,e,n){var a,i=t[e].fill,r=[e];if(!n)return i;for(;!1!==i&&-1===r.indexOf(i);){if(!isFinite(i))return i;if(!(a=t[i]))return!1;if(a.visible)return i;r.push(i),i=a.fill}return!1}function ga(t){var e=t.fill,n="dataset";return!1===e?null:(isFinite(e)||(n="boundary"),ua[n](t))}function ma(t){return t&&!t.skip}function pa(t,e,n,a,i){var r,o,s,l;if(a&&i){for(t.moveTo(e[0].x,e[0].y),r=1;r<a;++r)z.canvas.lineTo(t,e[r-1],e[r]);if(void 0===n[0].angle)for(t.lineTo(n[i-1].x,n[i-1].y),r=i-1;r>0;--r)z.canvas.lineTo(t,n[r],n[r-1],!0);else for(o=n[0].cx,s=n[0].cy,l=Math.sqrt(Math.pow(n[0].x-o,2)+Math.pow(n[0].y-s,2)),r=i-1;r>0;--r)t.arc(o,s,l,n[r].angle,n[r-1].angle,!0)}}function ba(t,e,n,a,i,r){var o,s,l,c,u,d,h,f,g=e.length,m=a.spanGaps,p=[],b=[],v=0,y=0;for(t.beginPath(),o=0,s=g;o<s;++o)u=n(c=e[l=o%g]._view,l,a),d=ma(c),h=ma(u),r&&void 0===f&&d&&(s=g+(f=o+1)),d&&h?(v=p.push(c),y=b.push(u)):v&&y&&(m?(d&&p.push(c),h&&b.push(u)):(pa(t,p,b,v,y),v=y=0,p=[],b=[]));pa(t,p,b,v,y),t.closePath(),t.fillStyle=i,t.fill()}var va={id:"filler",afterDatasetsUpdate:function(t,e){var n,a,i,r,o=(t.data.datasets||[]).length,s=e.propagate,l=[];for(a=0;a<o;++a)r=null,(i=(n=t.getDatasetMeta(a)).dataset)&&i._model&&i instanceof _t.Line&&(r={visible:t.isDatasetVisible(a),fill:da(i,a,o),chart:t,el:i}),n.$filler=r,l.push(r);for(a=0;a<o;++a)(r=l[a])&&(r.fill=fa(l,a,s),r.boundary=ha(r),r.mapper=ga(r))},beforeDatasetsDraw:function(t){var e,n,a,i,r,o,s,l=t._getSortedVisibleDatasetMetas(),c=t.ctx;for(n=l.length-1;n>=0;--n)(e=l[n].$filler)&&e.visible&&(i=(a=e.el)._view,r=a._children||[],o=e.mapper,s=i.backgroundColor||R.global.defaultColor,o&&s&&r.length&&(z.canvas.clipArea(c,t.chartArea),ba(c,r,o,i,s,a._loop),z.canvas.unclipArea(c)))}},ya=z.rtl.getRtlAdapter,xa=z.noop,_a=z.valueOrDefault;function Oa(t,e){return t.usePointStyle&&t.boxWidth>e?e:t.boxWidth}R._set("global",{legend:{display:!0,position:"top",align:"center",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(t,e){var n=e.datasetIndex,a=this.chart,i=a.getDatasetMeta(n);i.hidden=null===i.hidden?!a.data.datasets[n].hidden:null,a.update()},onHover:null,onLeave:null,labels:{boxWidth:40,padding:10,generateLabels:function(t){var e=t.data.datasets,n=t.options.legend||{},a=n.labels&&n.labels.usePointStyle;return t._getSortedDatasetMetas().map((function(n){var i=n.controller.getStyle(a?0:void 0);return{text:e[n.index].label,fillStyle:i.backgroundColor,hidden:!t.isDatasetVisible(n.index),lineCap:i.borderCapStyle,lineDash:i.borderDash,lineDashOffset:i.borderDashOffset,lineJoin:i.borderJoinStyle,lineWidth:i.borderWidth,strokeStyle:i.borderColor,pointStyle:i.pointStyle,rotation:i.rotation,datasetIndex:n.index}}),this)}}},legendCallback:function(t){var e,n,a,i=document.createElement("ul"),r=t.data.datasets;for(i.setAttribute("class",t.id+"-legend"),e=0,n=r.length;e<n;e++)(a=i.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=r[e].backgroundColor,r[e].label&&a.appendChild(document.createTextNode(r[e].label));return i.outerHTML}});var wa=Z.extend({initialize:function(t){z.extend(this,t),this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1},beforeUpdate:xa,update:function(t,e,n){var a=this;return a.beforeUpdate(),a.maxWidth=t,a.maxHeight=e,a.margins=n,a.beforeSetDimensions(),a.setDimensions(),a.afterSetDimensions(),a.beforeBuildLabels(),a.buildLabels(),a.afterBuildLabels(),a.beforeFit(),a.fit(),a.afterFit(),a.afterUpdate(),a.minSize},afterUpdate:xa,beforeSetDimensions:xa,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:xa,beforeBuildLabels:xa,buildLabels:function(){var t=this,e=t.options.labels||{},n=z.callback(e.generateLabels,[t.chart],t)||[];e.filter&&(n=n.filter((function(n){return e.filter(n,t.chart.data)}))),t.options.reverse&&n.reverse(),t.legendItems=n},afterBuildLabels:xa,beforeFit:xa,fit:function(){var t=this,e=t.options,n=e.labels,a=e.display,i=t.ctx,r=z.options._parseFont(n),o=r.size,s=t.legendHitBoxes=[],l=t.minSize,c=t.isHorizontal();if(c?(l.width=t.maxWidth,l.height=a?10:0):(l.width=a?10:0,l.height=t.maxHeight),a){if(i.font=r.string,c){var u=t.lineWidths=[0],d=0;i.textAlign="left",i.textBaseline="middle",z.each(t.legendItems,(function(t,e){var a=Oa(n,o)+o/2+i.measureText(t.text).width;(0===e||u[u.length-1]+a+2*n.padding>l.width)&&(d+=o+n.padding,u[u.length-(e>0?0:1)]=0),s[e]={left:0,top:0,width:a,height:o},u[u.length-1]+=a+n.padding})),l.height+=d}else{var h=n.padding,f=t.columnWidths=[],g=t.columnHeights=[],m=n.padding,p=0,b=0;z.each(t.legendItems,(function(t,e){var a=Oa(n,o)+o/2+i.measureText(t.text).width;e>0&&b+o+2*h>l.height&&(m+=p+n.padding,f.push(p),g.push(b),p=0,b=0),p=Math.max(p,a),b+=o+h,s[e]={left:0,top:0,width:a,height:o}})),m+=p,f.push(p),g.push(b),l.width+=m}t.width=l.width,t.height=l.height}else t.width=l.width=t.height=l.height=0},afterFit:xa,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var t=this,e=t.options,n=e.labels,a=R.global,i=a.defaultColor,r=a.elements.line,o=t.height,s=t.columnHeights,l=t.width,c=t.lineWidths;if(e.display){var u,d=ya(e.rtl,t.left,t.minSize.width),h=t.ctx,f=_a(n.fontColor,a.defaultFontColor),g=z.options._parseFont(n),m=g.size;h.textAlign=d.textAlign("left"),h.textBaseline="middle",h.lineWidth=.5,h.strokeStyle=f,h.fillStyle=f,h.font=g.string;var p=Oa(n,m),b=t.legendHitBoxes,v=function(t,a){switch(e.align){case"start":return n.padding;case"end":return t-a;default:return(t-a+n.padding)/2}},y=t.isHorizontal();u=y?{x:t.left+v(l,c[0]),y:t.top+n.padding,line:0}:{x:t.left+n.padding,y:t.top+v(o,s[0]),line:0},z.rtl.overrideTextDirection(t.ctx,e.textDirection);var x=m+n.padding;z.each(t.legendItems,(function(e,a){var f=h.measureText(e.text).width,g=p+m/2+f,_=u.x,O=u.y;d.setWidth(t.minSize.width),y?a>0&&_+g+n.padding>t.left+t.minSize.width&&(O=u.y+=x,u.line++,_=u.x=t.left+v(l,c[u.line])):a>0&&O+x>t.top+t.minSize.height&&(_=u.x=_+t.columnWidths[u.line]+n.padding,u.line++,O=u.y=t.top+v(o,s[u.line]));var w=d.x(_);!function(t,e,a){if(!(isNaN(p)||p<=0)){h.save();var o=_a(a.lineWidth,r.borderWidth);if(h.fillStyle=_a(a.fillStyle,i),h.lineCap=_a(a.lineCap,r.borderCapStyle),h.lineDashOffset=_a(a.lineDashOffset,r.borderDashOffset),h.lineJoin=_a(a.lineJoin,r.borderJoinStyle),h.lineWidth=o,h.strokeStyle=_a(a.strokeStyle,i),h.setLineDash&&h.setLineDash(_a(a.lineDash,r.borderDash)),n&&n.usePointStyle){var s=p*Math.SQRT2/2,l=d.xPlus(t,p/2),c=e+m/2;z.canvas.drawPoint(h,a.pointStyle,s,l,c,a.rotation)}else h.fillRect(d.leftForLtr(t,p),e,p,m),0!==o&&h.strokeRect(d.leftForLtr(t,p),e,p,m);h.restore()}}(w,O,e),b[a].left=d.leftForLtr(w,b[a].width),b[a].top=O,function(t,e,n,a){var i=m/2,r=d.xPlus(t,p+i),o=e+i;h.fillText(n.text,r,o),n.hidden&&(h.beginPath(),h.lineWidth=2,h.moveTo(r,o),h.lineTo(d.xPlus(r,a),o),h.stroke())}(w,O,e,f),y?u.x+=g+n.padding:u.y+=x})),z.rtl.restoreTextDirection(t.ctx,e.textDirection)}},_getLegendItemAt:function(t,e){var n,a,i,r=this;if(t>=r.left&&t<=r.right&&e>=r.top&&e<=r.bottom)for(i=r.legendHitBoxes,n=0;n<i.length;++n)if(t>=(a=i[n]).left&&t<=a.left+a.width&&e>=a.top&&e<=a.top+a.height)return r.legendItems[n];return null},handleEvent:function(t){var e,n=this,a=n.options,i="mouseup"===t.type?"click":t.type;if("mousemove"===i){if(!a.onHover&&!a.onLeave)return}else{if("click"!==i)return;if(!a.onClick)return}e=n._getLegendItemAt(t.x,t.y),"click"===i?e&&a.onClick&&a.onClick.call(n,t.native,e):(a.onLeave&&e!==n._hoveredItem&&(n._hoveredItem&&a.onLeave.call(n,t.native,n._hoveredItem),n._hoveredItem=e),a.onHover&&e&&a.onHover.call(n,t.native,e))}});function ka(t,e){var n=new wa({ctx:t.ctx,options:e,chart:t});ge.configure(t,n,e),ge.addBox(t,n),t.legend=n}var Ma={id:"legend",_element:wa,beforeInit:function(t){var e=t.options.legend;e&&ka(t,e)},beforeUpdate:function(t){var e=t.options.legend,n=t.legend;e?(z.mergeIf(e,R.global.legend),n?(ge.configure(t,n,e),n.options=e):ka(t,e)):n&&(ge.removeBox(t,n),delete t.legend)},afterEvent:function(t,e){var n=t.legend;n&&n.handleEvent(e)}},ja=z.noop;R._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,padding:10,position:"top",text:"",weight:2e3}});var Sa=Z.extend({initialize:function(t){z.extend(this,t),this.legendHitBoxes=[]},beforeUpdate:ja,update:function(t,e,n){var a=this;return a.beforeUpdate(),a.maxWidth=t,a.maxHeight=e,a.margins=n,a.beforeSetDimensions(),a.setDimensions(),a.afterSetDimensions(),a.beforeBuildLabels(),a.buildLabels(),a.afterBuildLabels(),a.beforeFit(),a.fit(),a.afterFit(),a.afterUpdate(),a.minSize},afterUpdate:ja,beforeSetDimensions:ja,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:ja,beforeBuildLabels:ja,buildLabels:ja,afterBuildLabels:ja,beforeFit:ja,fit:function(){var t,e=this,n=e.options,a=e.minSize={},i=e.isHorizontal();n.display?(t=(z.isArray(n.text)?n.text.length:1)*z.options._parseFont(n).lineHeight+2*n.padding,e.width=a.width=i?e.maxWidth:t,e.height=a.height=i?t:e.maxHeight):e.width=a.width=e.height=a.height=0},afterFit:ja,isHorizontal:function(){var t=this.options.position;return"top"===t||"bottom"===t},draw:function(){var t=this,e=t.ctx,n=t.options;if(n.display){var a,i,r,o=z.options._parseFont(n),s=o.lineHeight,l=s/2+n.padding,c=0,u=t.top,d=t.left,h=t.bottom,f=t.right;e.fillStyle=z.valueOrDefault(n.fontColor,R.global.defaultFontColor),e.font=o.string,t.isHorizontal()?(i=d+(f-d)/2,r=u+l,a=f-d):(i="left"===n.position?d+l:f-l,r=u+(h-u)/2,a=h-u,c=Math.PI*("left"===n.position?-.5:.5)),e.save(),e.translate(i,r),e.rotate(c),e.textAlign="center",e.textBaseline="middle";var g=n.text;if(z.isArray(g))for(var m=0,p=0;p<g.length;++p)e.fillText(g[p],0,m,a),m+=s;else e.fillText(g,0,0,a);e.restore()}}});function Da(t,e){var n=new Sa({ctx:t.ctx,options:e,chart:t});ge.configure(t,n,e),ge.addBox(t,n),t.titleBlock=n}var Ca={},Pa=va,Ta=Ma,Aa={id:"title",_element:Sa,beforeInit:function(t){var e=t.options.title;e&&Da(t,e)},beforeUpdate:function(t){var e=t.options.title,n=t.titleBlock;e?(z.mergeIf(e,R.global.title),n?(ge.configure(t,n,e),n.options=e):Da(t,e)):n&&(ge.removeBox(t,n),delete t.titleBlock)}};for(var Fa in Ca.filler=Pa,Ca.legend=Ta,Ca.title=Aa,Xe.helpers=z,function(){function t(t,e,n){var a;return"string"==typeof t?(a=parseInt(t,10),-1!==t.indexOf("%")&&(a=a/100*e.parentNode[n])):a=t,a}function e(t){return null!=t&&"none"!==t}function n(n,a,i){var r=document.defaultView,o=z._getParentNode(n),s=r.getComputedStyle(n)[a],l=r.getComputedStyle(o)[a],c=e(s),u=e(l),d=Number.POSITIVE_INFINITY;return c||u?Math.min(c?t(s,n,i):d,u?t(l,o,i):d):"none"}z.where=function(t,e){if(z.isArray(t)&&Array.prototype.filter)return t.filter(e);var n=[];return z.each(t,(function(t){e(t)&&n.push(t)})),n},z.findIndex=Array.prototype.findIndex?function(t,e,n){return t.findIndex(e,n)}:function(t,e,n){n=void 0===n?t:n;for(var a=0,i=t.length;a<i;++a)if(e.call(n,t[a],a,t))return a;return-1},z.findNextWhere=function(t,e,n){z.isNullOrUndef(n)&&(n=-1);for(var a=n+1;a<t.length;a++){var i=t[a];if(e(i))return i}},z.findPreviousWhere=function(t,e,n){z.isNullOrUndef(n)&&(n=t.length);for(var a=n-1;a>=0;a--){var i=t[a];if(e(i))return i}},z.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},z.almostEquals=function(t,e,n){return Math.abs(t-e)<n},z.almostWhole=function(t,e){var n=Math.round(t);return n-e<=t&&n+e>=t},z.max=function(t){return t.reduce((function(t,e){return isNaN(e)?t:Math.max(t,e)}),Number.NEGATIVE_INFINITY)},z.min=function(t){return t.reduce((function(t,e){return isNaN(e)?t:Math.min(t,e)}),Number.POSITIVE_INFINITY)},z.sign=Math.sign?function(t){return Math.sign(t)}:function(t){return 0==(t=+t)||isNaN(t)?t:t>0?1:-1},z.toRadians=function(t){return t*(Math.PI/180)},z.toDegrees=function(t){return t*(180/Math.PI)},z._decimalPlaces=function(t){if(z.isFinite(t)){for(var e=1,n=0;Math.round(t*e)/e!==t;)e*=10,n++;return n}},z.getAngleFromPoint=function(t,e){var n=e.x-t.x,a=e.y-t.y,i=Math.sqrt(n*n+a*a),r=Math.atan2(a,n);return r<-.5*Math.PI&&(r+=2*Math.PI),{angle:r,distance:i}},z.distanceBetweenPoints=function(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))},z.aliasPixel=function(t){return t%2==0?0:.5},z._alignPixel=function(t,e,n){var a=t.currentDevicePixelRatio,i=n/2;return Math.round((e-i)*a)/a+i},z.splineCurve=function(t,e,n,a){var i=t.skip?e:t,r=e,o=n.skip?e:n,s=Math.sqrt(Math.pow(r.x-i.x,2)+Math.pow(r.y-i.y,2)),l=Math.sqrt(Math.pow(o.x-r.x,2)+Math.pow(o.y-r.y,2)),c=s/(s+l),u=l/(s+l),d=a*(c=isNaN(c)?0:c),h=a*(u=isNaN(u)?0:u);return{previous:{x:r.x-d*(o.x-i.x),y:r.y-d*(o.y-i.y)},next:{x:r.x+h*(o.x-i.x),y:r.y+h*(o.y-i.y)}}},z.EPSILON=Number.EPSILON||1e-14,z.splineCurveMonotone=function(t){var e,n,a,i,r,o,s,l,c,u=(t||[]).map((function(t){return{model:t._model,deltaK:0,mK:0}})),d=u.length;for(e=0;e<d;++e)if(!(a=u[e]).model.skip){if(n=e>0?u[e-1]:null,(i=e<d-1?u[e+1]:null)&&!i.model.skip){var h=i.model.x-a.model.x;a.deltaK=0!==h?(i.model.y-a.model.y)/h:0}!n||n.model.skip?a.mK=a.deltaK:!i||i.model.skip?a.mK=n.deltaK:this.sign(n.deltaK)!==this.sign(a.deltaK)?a.mK=0:a.mK=(n.deltaK+a.deltaK)/2}for(e=0;e<d-1;++e)a=u[e],i=u[e+1],a.model.skip||i.model.skip||(z.almostEquals(a.deltaK,0,this.EPSILON)?a.mK=i.mK=0:(r=a.mK/a.deltaK,o=i.mK/a.deltaK,(l=Math.pow(r,2)+Math.pow(o,2))<=9||(s=3/Math.sqrt(l),a.mK=r*s*a.deltaK,i.mK=o*s*a.deltaK)));for(e=0;e<d;++e)(a=u[e]).model.skip||(n=e>0?u[e-1]:null,i=e<d-1?u[e+1]:null,n&&!n.model.skip&&(c=(a.model.x-n.model.x)/3,a.model.controlPointPreviousX=a.model.x-c,a.model.controlPointPreviousY=a.model.y-c*a.mK),i&&!i.model.skip&&(c=(i.model.x-a.model.x)/3,a.model.controlPointNextX=a.model.x+c,a.model.controlPointNextY=a.model.y+c*a.mK))},z.nextItem=function(t,e,n){return n?e>=t.length-1?t[0]:t[e+1]:e>=t.length-1?t[t.length-1]:t[e+1]},z.previousItem=function(t,e,n){return n?e<=0?t[t.length-1]:t[e-1]:e<=0?t[0]:t[e-1]},z.niceNum=function(t,e){var n=Math.floor(z.log10(t)),a=t/Math.pow(10,n);return(e?a<1.5?1:a<3?2:a<7?5:10:a<=1?1:a<=2?2:a<=5?5:10)*Math.pow(10,n)},z.requestAnimFrame="undefined"==typeof window?function(t){t()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)},z.getRelativePosition=function(t,e){var n,a,i=t.originalEvent||t,r=t.target||t.srcElement,o=r.getBoundingClientRect(),s=i.touches;s&&s.length>0?(n=s[0].clientX,a=s[0].clientY):(n=i.clientX,a=i.clientY);var l=parseFloat(z.getStyle(r,"padding-left")),c=parseFloat(z.getStyle(r,"padding-top")),u=parseFloat(z.getStyle(r,"padding-right")),d=parseFloat(z.getStyle(r,"padding-bottom")),h=o.right-o.left-l-u,f=o.bottom-o.top-c-d;return{x:n=Math.round((n-o.left-l)/h*r.width/e.currentDevicePixelRatio),y:a=Math.round((a-o.top-c)/f*r.height/e.currentDevicePixelRatio)}},z.getConstraintWidth=function(t){return n(t,"max-width","clientWidth")},z.getConstraintHeight=function(t){return n(t,"max-height","clientHeight")},z._calculatePadding=function(t,e,n){return(e=z.getStyle(t,e)).indexOf("%")>-1?n*parseInt(e,10)/100:parseInt(e,10)},z._getParentNode=function(t){var e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e},z.getMaximumWidth=function(t){var e=z._getParentNode(t);if(!e)return t.clientWidth;var n=e.clientWidth,a=n-z._calculatePadding(e,"padding-left",n)-z._calculatePadding(e,"padding-right",n),i=z.getConstraintWidth(t);return isNaN(i)?a:Math.min(a,i)},z.getMaximumHeight=function(t){var e=z._getParentNode(t);if(!e)return t.clientHeight;var n=e.clientHeight,a=n-z._calculatePadding(e,"padding-top",n)-z._calculatePadding(e,"padding-bottom",n),i=z.getConstraintHeight(t);return isNaN(i)?a:Math.min(a,i)},z.getStyle=function(t,e){return t.currentStyle?t.currentStyle[e]:document.defaultView.getComputedStyle(t,null).getPropertyValue(e)},z.retinaScale=function(t,e){var n=t.currentDevicePixelRatio=e||"undefined"!=typeof window&&window.devicePixelRatio||1;if(1!==n){var a=t.canvas,i=t.height,r=t.width;a.height=i*n,a.width=r*n,t.ctx.scale(n,n),a.style.height||a.style.width||(a.style.height=i+"px",a.style.width=r+"px")}},z.fontString=function(t,e,n){return e+" "+t+"px "+n},z.longestText=function(t,e,n,a){var i=(a=a||{}).data=a.data||{},r=a.garbageCollect=a.garbageCollect||[];a.font!==e&&(i=a.data={},r=a.garbageCollect=[],a.font=e),t.font=e;var o,s,l,c,u,d=0,h=n.length;for(o=0;o<h;o++)if(null!=(c=n[o])&&!0!==z.isArray(c))d=z.measureText(t,i,r,d,c);else if(z.isArray(c))for(s=0,l=c.length;s<l;s++)null==(u=c[s])||z.isArray(u)||(d=z.measureText(t,i,r,d,u));var f=r.length/2;if(f>n.length){for(o=0;o<f;o++)delete i[r[o]];r.splice(0,f)}return d},z.measureText=function(t,e,n,a,i){var r=e[i];return r||(r=e[i]=t.measureText(i).width,n.push(i)),r>a&&(a=r),a},z.numberOfLabelLines=function(t){var e=1;return z.each(t,(function(t){z.isArray(t)&&t.length>e&&(e=t.length)})),e},z.color=O?function(t){return t instanceof CanvasGradient&&(t=R.global.defaultColor),O(t)}:function(t){return console.error("Color.js not found!"),t},z.getHoverColor=function(t){return t instanceof CanvasPattern||t instanceof CanvasGradient?t:z.color(t).saturate(.5).darken(.1).rgbString()}}(),Xe._adapters=Qe,Xe.Animation=X,Xe.animationService=K,Xe.controllers=Kt,Xe.DatasetController=nt,Xe.defaults=R,Xe.Element=Z,Xe.elements=_t,Xe.Interaction=ie,Xe.layouts=ge,Xe.platform=De,Xe.plugins=Ce,Xe.Scale=mn,Xe.scaleService=Pe,Xe.Ticks=tn,Xe.Tooltip=ze,Xe.helpers.each(la,(function(t,e){Xe.scaleService.registerScaleType(e,t,t._defaults)})),Ca)Ca.hasOwnProperty(Fa)&&Xe.plugins.register(Ca[Fa]);Xe.platform.initialize();var Ia=Xe;return"undefined"!=typeof window&&(window.Chart=Xe),Xe.Chart=Xe,Xe.Legend=Ca.legend._element,Xe.Title=Ca.title._element,Xe.pluginService=Xe.plugins,Xe.PluginBase=Xe.Element.extend({}),Xe.canvasHelpers=Xe.helpers.canvas,Xe.layoutService=Xe.layouts,Xe.LinearScaleBase=_n,Xe.helpers.each(["Bar","Bubble","Doughnut","Line","PolarArea","Radar","Scatter"],(function(t){Xe[t]=function(e,n){return new Xe(e,Xe.helpers.merge(n||{},{type:t.charAt(0).toLowerCase()+t.slice(1)}))}})),Ia}(function(){try{return n(50)}catch(t){}}())},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var a=n(41),i=n(42),r=n(43),o=n(39),s=n(40),l=n(13),c=n(30),u=n(17),d=n(34),h={calendar:a.b,longDateFormat:i.a,invalidDate:r.a,ordinal:o.b,dayOfMonthOrdinalParse:o.a,relativeTime:s.a,months:l.b,monthsShort:l.c,week:c.a,weekdays:u.a,weekdaysMin:u.b,weekdaysShort:u.c,meridiemParse:d.a}},function(t,e,n){"use strict";n.d(e,"a",(function(){return a}));var a,i=n(8);a=Object.keys?Object.keys:function(t){var e,n=[];for(e in t)Object(i.a)(t,e)&&n.push(e);return n}},function(t,e,n){"use strict";t.exports.numbers=i,t.exports.sum=o,t.exports.mean=s,t.exports.median=function(t){if(0===(t=i(t)).length)return NaN;var e=t.length/2|0;return(t=r(t)).length%2?t[e]:(t[e-1]+t[e])/2},t.exports.mode=function(t){if(0===(t=i(t)).length)return NaN;for(var e,n={},a=0;a<t.length;a++){var r=t[a],o=n[r]||0;o++,n[r]=o}var s=i(Object.keys(n).sort((function(t,e){return n[e]-n[t]})));if(e=s[0],n[s[1]]==n[e]){if(s.length==t.length)return t;var l=new Set([e]),c=n[e];for(a=1;a<s.length&&n[s[a]]==c;a++)l.add(s[a]);return l}return e},t.exports.variance=c,t.exports.sampleVariance=u,t.exports.populationVariance=c,t.exports.stdev=d,t.exports.sampleStdev=function(t){return Math.sqrt(u(t))},t.exports.populationStdev=d,t.exports.percentile=function(t,e){if(0===(t=i(t)).length||null==e||e<0)return NaN;e>1&&(e=1);var n=(t=r(t)).length*e-.5;if((0|n)===n)return t[n];var a=0|n,o=n-a;return(1-o)*t[a]+o*t[Math.min(a+1,t.length-1)]},t.exports.histogram=function(t,e){if(null==t)return null;if(0===(t=r(i(t))).length)return null;null==e&&(e=Math.sqrt(t.length));(e=Math.round(e))<1&&(e=1);var n=t[0],a=t[t.length-1];n===a&&(n-=.5,a+=.5);var o=a-n,s=(o+.05*o)/e,l=(n+a)/2,c=l-s*Math.floor(e/2);if(e%2!=0)c=l-s/2-s*Math.floor(e/2);for(var u={values:Array(e).fill(0),bins:e,binWidth:s,binLimits:[c,c+s*e]},d=0,h=0;h<t.length;h++){for(;t[h]>(d+1)*s+c;)d++;u.values[d]++}return u};var a=n(49);function i(t){var e=[];if(null==t)return e;for(var n=0;n<t.length;n++)a(t[n])&&e.push(+t[n]);return e}function r(t){return t.sort((function(t,e){return t-e}))}function o(t){t=i(t);for(var e=0,n=0;n<t.length;n++)e+=t[n];return e}function s(t){return 0===(t=i(t)).length?NaN:o(t)/t.length}function l(t){for(var e=s(t=i(t)),n=[],a=0;a<t.length;a++)n.push(Math.pow(t[a]-e,2));return n}function c(t){return s(l(t))}function u(t){var e=l(t);return e.length<=1?NaN:o(e)/(e.length-1)}function d(t){return Math.sqrt(c(t))}},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e){t.exports=function(t){return!isNaN(parseFloat(t))&&isFinite(t)}},function(t,e,n){"use strict";n.r(e);var a=n(2),i=n(9),r=n(22),o=n(26),s=n(11),l=n(12),c=n(20),u=Object(l.a)("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var t=i.a.apply(null,arguments);return this.isValid()&&t.isValid()?t<this?this:t:Object(o.a)()})),d=Object(l.a)("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var t=i.a.apply(null,arguments);return this.isValid()&&t.isValid()?t>this?this:t:Object(o.a)()}));function h(t,e){var n,a;if(1===e.length&&Object(c.a)(e[0])&&(e=e[0]),!e.length)return Object(i.a)();for(n=e[0],a=1;a<e.length;++a)e[a].isValid()&&!e[a][t](n)||(n=e[a]);return n}var f=n(16),g=n(13),m=n(6),p=n(15),b=n(8),v=n(4),y=n(14),x=["year","quarter","month","week","day","hour","minute","second","millisecond"];function _(t){var e=Object(m.b)(t),n=e.year||0,a=e.quarter||0,i=e.month||0,r=e.week||e.isoWeek||0,o=e.day||0,s=e.hour||0,l=e.minute||0,c=e.second||0,u=e.millisecond||0;this._isValid=function(t){var e,n,a=!1;for(e in t)if(Object(b.a)(t,e)&&(-1===y.a.call(x,e)||null!=t[e]&&isNaN(t[e])))return!1;for(n=0;n<x.length;++n)if(t[x[n]]){if(a)return!1;parseFloat(t[x[n]])!==Object(v.a)(t[x[n]])&&(a=!0)}return!0}(e),this._milliseconds=+u+1e3*c+6e4*l+1e3*s*60*60,this._days=+o+7*r,this._months=+i+3*a+12*n,this._data={},this._locale=Object(p.b)(),this._bubble()}function O(t){return t instanceof _}var w=n(24);function k(t){return t<0?-1*Math.round(-1*t):Math.round(t)}var M=n(1),j=n(25),S=n(3),D=n(0),C=n(7),P=n(36),T=n(32),A=n(19);function F(t,e){Object(S.a)(t,0,0,(function(){var t=this.utcOffset(),n="+";return t<0&&(t=-t,n="-"),n+Object(j.a)(~~(t/60),2)+e+Object(j.a)(~~t%60,2)}))}F("Z",":"),F("ZZ",""),Object(D.a)("Z",D.o),Object(D.a)("ZZ",D.o),Object(C.a)(["Z","ZZ"],(function(t,e,n){n._useUTC=!0,n._tzm=N(D.o,t)}));var I=/([\+\-]|\d\d)/gi;function N(t,e){var n,a,i=(e||"").match(t);return null===i?null:0===(a=60*(n=((i[i.length-1]||[])+"").match(I)||["-",0,0])[1]+Object(v.a)(n[2]))?0:"+"===n[0]?a:-a}function R(t,e){var n,r;return e._isUTC?(n=e.clone(),r=(Object(s.c)(t)||Object(T.a)(t)?t.valueOf():Object(i.a)(t).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.a.updateOffset(n,!1),n):Object(i.a)(t).local()}function L(t){return-Math.round(t._d.getTimezoneOffset())}function Y(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}a.a.updateOffset=function(){};var W=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,E=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function z(t,e){var n,a,r,o=t,s=null;return O(t)?o={ms:t._milliseconds,d:t._days,M:t._months}:Object(w.a)(t)||!isNaN(+t)?(o={},e?o[e]=+t:o.milliseconds=+t):(s=W.exec(t))?(n="-"===s[1]?-1:1,o={y:0,d:Object(v.a)(s[M.a])*n,h:Object(v.a)(s[M.b])*n,m:Object(v.a)(s[M.d])*n,s:Object(v.a)(s[M.f])*n,ms:Object(v.a)(k(1e3*s[M.c]))*n}):(s=E.exec(t))?(n="-"===s[1]?-1:1,o={y:V(s[2],n),M:V(s[3],n),w:V(s[4],n),d:V(s[5],n),h:V(s[6],n),m:V(s[7],n),s:V(s[8],n)}):null==o?o={}:"object"==typeof o&&("from"in o||"to"in o)&&(r=function(t,e){var n;if(!t.isValid()||!e.isValid())return{milliseconds:0,months:0};e=R(e,t),t.isBefore(e)?n=B(t,e):((n=B(e,t)).milliseconds=-n.milliseconds,n.months=-n.months);return n}(Object(i.a)(o.from),Object(i.a)(o.to)),(o={}).ms=r.milliseconds,o.M=r.months),a=new _(o),O(t)&&Object(b.a)(t,"_locale")&&(a._locale=t._locale),O(t)&&Object(b.a)(t,"_isValid")&&(a._isValid=t._isValid),a}function V(t,e){var n=t&&parseFloat(t.replace(",","."));return(isNaN(n)?0:n)*e}function B(t,e){var n={};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function H(t,e){return function(n,a){var i;return null===a||isNaN(+a)||(Object(l.b)(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),i=n,n=a,a=i),U(this,z(n,a),t),this}}function U(t,e,n,i){var r=e._milliseconds,o=k(e._days),s=k(e._months);t.isValid()&&(i=null==i||i,s&&Object(g.k)(t,Object(f.a)(t,"Month")+s*n),o&&Object(f.c)(t,"Date",Object(f.a)(t,"Date")+o*n),r&&t._d.setTime(t._d.valueOf()+r*n),i&&a.a.updateOffset(t,o||s))}z.fn=_.prototype,z.invalid=function(){return z(NaN)};var G=H(1,"add"),q=H(-1,"subtract"),Z=n(18),$=n(35),X=n(29);function K(t){return"string"==typeof t||t instanceof String}function J(t){return Object(s.c)(t)||Object(T.a)(t)||K(t)||Object(w.a)(t)||function(t){var e=Object(c.a)(t),n=!1;e&&(n=0===t.filter((function(e){return!Object(w.a)(e)&&K(t)})).length);return e&&n}(t)||function(t){var e,n,a=Object(X.a)(t)&&!Object($.a)(t),i=!1,r=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"];for(e=0;e<r.length;e+=1)n=r[e],i=i||Object(b.a)(t,n);return a&&i}(t)||null==t}function Q(t){var e,n,a=Object(X.a)(t)&&!Object($.a)(t),i=!1,r=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(e=0;e<r.length;e+=1)n=r[e],i=i||Object(b.a)(t,n);return a&&i}var tt=n(21);function et(t,e){if(t.date()<e.date())return-et(e,t);var n=12*(e.year()-t.year())+(e.month()-t.month()),a=t.clone().add(n,"months");return-(n+(e-a<0?(e-a)/(a-t.clone().add(n-1,"months")):(e-a)/(t.clone().add(n+1,"months")-a)))||0}function nt(t){var e;return void 0===t?this._locale._abbr:(null!=(e=Object(p.b)(t))&&(this._locale=e),this)}a.a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var at=Object(l.a)("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(t){return void 0===t?this.localeData():this.locale(t)}));function it(){return this._locale}function rt(t,e){return(t%e+e)%e}function ot(t,e,n){return t<100&&t>=0?new Date(t+400,e,n)-126227808e5:new Date(t,e,n).valueOf()}function st(t,e,n){return t<100&&t>=0?Date.UTC(t+400,e,n)-126227808e5:Date.UTC(t,e,n)}var lt=n(27),ct=n(5);function ut(t,e){return e.erasAbbrRegex(t)}function dt(){var t,e,n=[],a=[],i=[],r=[],o=this.eras();for(t=0,e=o.length;t<e;++t)a.push(Object(D.t)(o[t].name)),n.push(Object(D.t)(o[t].abbr)),i.push(Object(D.t)(o[t].narrow)),r.push(Object(D.t)(o[t].name)),r.push(Object(D.t)(o[t].abbr)),r.push(Object(D.t)(o[t].narrow));this._erasRegex=new RegExp("^("+r.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+a.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+n.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+i.join("|")+")","i")}Object(S.a)("N",0,0,"eraAbbr"),Object(S.a)("NN",0,0,"eraAbbr"),Object(S.a)("NNN",0,0,"eraAbbr"),Object(S.a)("NNNN",0,0,"eraName"),Object(S.a)("NNNNN",0,0,"eraNarrow"),Object(S.a)("y",["y",1],"yo","eraYear"),Object(S.a)("y",["yy",2],0,"eraYear"),Object(S.a)("y",["yyy",3],0,"eraYear"),Object(S.a)("y",["yyyy",4],0,"eraYear"),Object(D.a)("N",ut),Object(D.a)("NN",ut),Object(D.a)("NNN",ut),Object(D.a)("NNNN",(function(t,e){return e.erasNameRegex(t)})),Object(D.a)("NNNNN",(function(t,e){return e.erasNarrowRegex(t)})),Object(C.a)(["N","NN","NNN","NNNN","NNNNN"],(function(t,e,n,a){var i=n._locale.erasParse(t,a,n._strict);i?Object(ct.a)(n).era=i:Object(ct.a)(n).invalidEra=t})),Object(D.a)("y",D.r),Object(D.a)("yy",D.r),Object(D.a)("yyy",D.r),Object(D.a)("yyyy",D.r),Object(D.a)("yo",(function(t,e){return e._eraYearOrdinalRegex||D.r})),Object(C.a)(["y","yy","yyy","yyyy"],M.i),Object(C.a)(["yo"],(function(t,e,n,a){var i;n._locale._eraYearOrdinalRegex&&(i=t.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?e[M.i]=n._locale.eraYearOrdinalParse(t,i):e[M.i]=parseInt(t,10)}));var ht=n(28),ft=n(10),gt=n(23),mt=n(31);function pt(t,e){Object(S.a)(0,[t,t.length],0,e)}function bt(t,e,n,a,i){var r;return null==t?Object(gt.b)(this,a,i).year:(e>(r=Object(gt.c)(t,a,i))&&(e=r),vt.call(this,t,e,n,a,i))}function vt(t,e,n,a,i){var r=Object(gt.a)(t,e,n,a,i),o=Object(mt.b)(r.year,0,r.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}Object(S.a)(0,["gg",2],0,(function(){return this.weekYear()%100})),Object(S.a)(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),pt("gggg","weekYear"),pt("ggggg","weekYear"),pt("GGGG","isoWeekYear"),pt("GGGGG","isoWeekYear"),Object(m.a)("weekYear","gg"),Object(m.a)("isoWeekYear","GG"),Object(ft.a)("weekYear",1),Object(ft.a)("isoWeekYear",1),Object(D.a)("G",D.p),Object(D.a)("g",D.p),Object(D.a)("GG",D.d,D.h),Object(D.a)("gg",D.d,D.h),Object(D.a)("GGGG",D.f,D.k),Object(D.a)("gggg",D.f,D.k),Object(D.a)("GGGGG",D.g,D.m),Object(D.a)("ggggg",D.g,D.m),Object(C.c)(["gggg","ggggg","GGGG","GGGGG"],(function(t,e,n,a){e[a.substr(0,2)]=Object(v.a)(t)})),Object(C.c)(["gg","GG"],(function(t,e,n,i){e[i]=a.a.parseTwoDigitYear(t)})),Object(S.a)("Q",0,"Qo","quarter"),Object(m.a)("quarter","Q"),Object(ft.a)("quarter",7),Object(D.a)("Q",D.c),Object(C.a)("Q",(function(t,e){e[M.e]=3*(Object(v.a)(t)-1)}));var yt=n(30);Object(S.a)("D",["DD",2],"Do","date"),Object(m.a)("date","D"),Object(ft.a)("date",9),Object(D.a)("D",D.d),Object(D.a)("DD",D.d,D.h),Object(D.a)("Do",(function(t,e){return t?e._dayOfMonthOrdinalParse||e._ordinalParse:e._dayOfMonthOrdinalParseLenient})),Object(C.a)(["D","DD"],M.a),Object(C.a)("Do",(function(t,e){e[M.a]=Object(v.a)(t.match(D.d)[0])}));var xt=Object(f.b)("Date",!0),_t=n(17);Object(S.a)("DDD",["DDDD",3],"DDDo","dayOfYear"),Object(m.a)("dayOfYear","DDD"),Object(ft.a)("dayOfYear",4),Object(D.a)("DDD",D.e),Object(D.a)("DDDD",D.i),Object(C.a)(["DDD","DDDD"],(function(t,e,n){n._dayOfYear=Object(v.a)(t)}));var Ot=n(34);Object(S.a)("m",["mm",2],0,"minute"),Object(m.a)("minute","m"),Object(ft.a)("minute",14),Object(D.a)("m",D.d),Object(D.a)("mm",D.d,D.h),Object(C.a)(["m","mm"],M.d);var wt=Object(f.b)("Minutes",!1);Object(S.a)("s",["ss",2],0,"second"),Object(m.a)("second","s"),Object(ft.a)("second",15),Object(D.a)("s",D.d),Object(D.a)("ss",D.d,D.h),Object(C.a)(["s","ss"],M.f);var kt,Mt,jt=Object(f.b)("Seconds",!1);for(Object(S.a)("S",0,0,(function(){return~~(this.millisecond()/100)})),Object(S.a)(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),Object(S.a)(0,["SSS",3],0,"millisecond"),Object(S.a)(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),Object(S.a)(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),Object(S.a)(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),Object(S.a)(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),Object(S.a)(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),Object(S.a)(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),Object(m.a)("millisecond","ms"),Object(ft.a)("millisecond",16),Object(D.a)("S",D.e,D.c),Object(D.a)("SS",D.e,D.h),Object(D.a)("SSS",D.e,D.i),kt="SSSS";kt.length<=9;kt+="S")Object(D.a)(kt,D.r);function St(t,e){e[M.c]=Object(v.a)(1e3*("0."+t))}for(kt="S";kt.length<=9;kt+="S")Object(C.a)(kt,St);Mt=Object(f.b)("Milliseconds",!1),Object(S.a)("z",0,0,"zoneAbbr"),Object(S.a)("zz",0,0,"zoneName");var Dt=s.a.prototype;Dt.add=G,Dt.calendar=function(t,e){1===arguments.length&&(J(arguments[0])?(t=arguments[0],e=void 0):Q(arguments[0])&&(e=arguments[0],t=void 0));var n=t||Object(i.a)(),r=R(n,this).startOf("day"),o=a.a.calendarFormat(this,r)||"sameElse",s=e&&(Object(Z.a)(e[o])?e[o].call(this,n):e[o]);return this.format(s||this.localeData().calendar(o,this,Object(i.a)(n)))},Dt.clone=function(){return new s.a(this)},Dt.diff=function(t,e,n){var a,i,r;if(!this.isValid())return NaN;if(!(a=R(t,this)).isValid())return NaN;switch(i=6e4*(a.utcOffset()-this.utcOffset()),e=Object(m.c)(e)){case"year":r=et(this,a)/12;break;case"month":r=et(this,a);break;case"quarter":r=et(this,a)/3;break;case"second":r=(this-a)/1e3;break;case"minute":r=(this-a)/6e4;break;case"hour":r=(this-a)/36e5;break;case"day":r=(this-a-i)/864e5;break;case"week":r=(this-a-i)/6048e5;break;default:r=this-a}return n?r:Object(tt.a)(r)},Dt.endOf=function(t){var e,n;if(void 0===(t=Object(m.c)(t))||"millisecond"===t||!this.isValid())return this;switch(n=this._isUTC?st:ot,t){case"year":e=n(this.year()+1,0,1)-1;break;case"quarter":e=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":e=n(this.year(),this.month()+1,1)-1;break;case"week":e=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":e=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":e=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":e=this._d.valueOf(),e+=36e5-rt(e+(this._isUTC?0:6e4*this.utcOffset()),36e5)-1;break;case"minute":e=this._d.valueOf(),e+=6e4-rt(e,6e4)-1;break;case"second":e=this._d.valueOf(),e+=1e3-rt(e,1e3)-1}return this._d.setTime(e),a.a.updateOffset(this,!0),this},Dt.format=function(t){t||(t=this.isUtc()?a.a.defaultFormatUtc:a.a.defaultFormat);var e=Object(S.c)(this,t);return this.localeData().postformat(e)},Dt.from=function(t,e){return this.isValid()&&(Object(s.c)(t)&&t.isValid()||Object(i.a)(t).isValid())?z({to:this,from:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()},Dt.fromNow=function(t){return this.from(Object(i.a)(),t)},Dt.to=function(t,e){return this.isValid()&&(Object(s.c)(t)&&t.isValid()||Object(i.a)(t).isValid())?z({from:this,to:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()},Dt.toNow=function(t){return this.to(Object(i.a)(),t)},Dt.get=f.d,Dt.invalidAt=function(){return Object(ct.a)(this).overflow},Dt.isAfter=function(t,e){var n=Object(s.c)(t)?t:Object(i.a)(t);return!(!this.isValid()||!n.isValid())&&("millisecond"===(e=Object(m.c)(e)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(e).valueOf())},Dt.isBefore=function(t,e){var n=Object(s.c)(t)?t:Object(i.a)(t);return!(!this.isValid()||!n.isValid())&&("millisecond"===(e=Object(m.c)(e)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(e).valueOf()<n.valueOf())},Dt.isBetween=function(t,e,n,a){var r=Object(s.c)(t)?t:Object(i.a)(t),o=Object(s.c)(e)?e:Object(i.a)(e);return!!(this.isValid()&&r.isValid()&&o.isValid())&&(("("===(a=a||"()")[0]?this.isAfter(r,n):!this.isBefore(r,n))&&(")"===a[1]?this.isBefore(o,n):!this.isAfter(o,n)))},Dt.isSame=function(t,e){var n,a=Object(s.c)(t)?t:Object(i.a)(t);return!(!this.isValid()||!a.isValid())&&("millisecond"===(e=Object(m.c)(e)||"millisecond")?this.valueOf()===a.valueOf():(n=a.valueOf(),this.clone().startOf(e).valueOf()<=n&&n<=this.clone().endOf(e).valueOf()))},Dt.isSameOrAfter=function(t,e){return this.isSame(t,e)||this.isAfter(t,e)},Dt.isSameOrBefore=function(t,e){return this.isSame(t,e)||this.isBefore(t,e)},Dt.isValid=function(){return Object(o.b)(this)},Dt.lang=at,Dt.locale=nt,Dt.localeData=it,Dt.max=d,Dt.min=u,Dt.parsingFlags=function(){return Object(lt.a)({},Object(ct.a)(this))},Dt.set=f.e,Dt.startOf=function(t){var e,n;if(void 0===(t=Object(m.c)(t))||"millisecond"===t||!this.isValid())return this;switch(n=this._isUTC?st:ot,t){case"year":e=n(this.year(),0,1);break;case"quarter":e=n(this.year(),this.month()-this.month()%3,1);break;case"month":e=n(this.year(),this.month(),1);break;case"week":e=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":e=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":e=n(this.year(),this.month(),this.date());break;case"hour":e=this._d.valueOf(),e-=rt(e+(this._isUTC?0:6e4*this.utcOffset()),36e5);break;case"minute":e=this._d.valueOf(),e-=rt(e,6e4);break;case"second":e=this._d.valueOf(),e-=rt(e,1e3)}return this._d.setTime(e),a.a.updateOffset(this,!0),this},Dt.subtract=q,Dt.toArray=function(){var t=this;return[t.year(),t.month(),t.date(),t.hour(),t.minute(),t.second(),t.millisecond()]},Dt.toObject=function(){var t=this;return{years:t.year(),months:t.month(),date:t.date(),hours:t.hours(),minutes:t.minutes(),seconds:t.seconds(),milliseconds:t.milliseconds()}},Dt.toDate=function(){return new Date(this.valueOf())},Dt.toISOString=function(t){if(!this.isValid())return null;var e=!0!==t,n=e?this.clone().utc():this;return n.year()<0||n.year()>9999?Object(S.c)(n,e?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):Object(Z.a)(Date.prototype.toISOString)?e?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",Object(S.c)(n,"Z")):Object(S.c)(n,e?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},Dt.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var t,e,n,a="moment",i="";return this.isLocal()||(a=0===this.utcOffset()?"moment.utc":"moment.parseZone",i="Z"),t="["+a+'("]',e=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY","-MM-DD[T]HH:mm:ss.SSS",n=i+'[")]',this.format(t+e+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(Dt[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),Dt.toJSON=function(){return this.isValid()?this.toISOString():null},Dt.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},Dt.unix=function(){return Math.floor(this.valueOf()/1e3)},Dt.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},Dt.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},Dt.eraName=function(){var t,e,n,a=this.localeData().eras();for(t=0,e=a.length;t<e;++t){if(n=this.startOf("day").valueOf(),a[t].since<=n&&n<=a[t].until)return a[t].name;if(a[t].until<=n&&n<=a[t].since)return a[t].name}return""},Dt.eraNarrow=function(){var t,e,n,a=this.localeData().eras();for(t=0,e=a.length;t<e;++t){if(n=this.startOf("day").valueOf(),a[t].since<=n&&n<=a[t].until)return a[t].narrow;if(a[t].until<=n&&n<=a[t].since)return a[t].narrow}return""},Dt.eraAbbr=function(){var t,e,n,a=this.localeData().eras();for(t=0,e=a.length;t<e;++t){if(n=this.startOf("day").valueOf(),a[t].since<=n&&n<=a[t].until)return a[t].abbr;if(a[t].until<=n&&n<=a[t].since)return a[t].abbr}return""},Dt.eraYear=function(){var t,e,n,i,r=this.localeData().eras();for(t=0,e=r.length;t<e;++t)if(n=r[t].since<=r[t].until?1:-1,i=this.startOf("day").valueOf(),r[t].since<=i&&i<=r[t].until||r[t].until<=i&&i<=r[t].since)return(this.year()-Object(a.a)(r[t].since).year())*n+r[t].offset;return this.year()},Dt.year=ht.c,Dt.isLeapYear=ht.b,Dt.weekYear=function(t){return bt.call(this,t,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},Dt.isoWeekYear=function(t){return bt.call(this,t,this.isoWeek(),this.isoWeekday(),1,4)},Dt.quarter=Dt.quarters=function(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)},Dt.month=g.e,Dt.daysInMonth=g.d,Dt.week=Dt.weeks=yt.c,Dt.isoWeek=Dt.isoWeeks=yt.b,Dt.weeksInYear=function(){var t=this.localeData()._week;return Object(gt.c)(this.year(),t.dow,t.doy)},Dt.weeksInWeekYear=function(){var t=this.localeData()._week;return Object(gt.c)(this.weekYear(),t.dow,t.doy)},Dt.isoWeeksInYear=function(){return Object(gt.c)(this.year(),1,4)},Dt.isoWeeksInISOWeekYear=function(){return Object(gt.c)(this.isoWeekYear(),1,4)},Dt.date=xt,Dt.day=Dt.days=_t.d,Dt.weekday=_t.f,Dt.isoWeekday=_t.e,Dt.dayOfYear=function(t){var e=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")},Dt.hour=Dt.hours=Ot.b,Dt.minute=Dt.minutes=wt,Dt.second=Dt.seconds=jt,Dt.millisecond=Dt.milliseconds=Mt,Dt.utcOffset=function(t,e,n){var i,r=this._offset||0;if(!this.isValid())return null!=t?this:NaN;if(null!=t){if("string"==typeof t){if(null===(t=N(D.o,t)))return this}else Math.abs(t)<16&&!n&&(t*=60);return!this._isUTC&&e&&(i=L(this)),this._offset=t,this._isUTC=!0,null!=i&&this.add(i,"m"),r!==t&&(!e||this._changeInProgress?U(this,z(t-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?r:L(this)},Dt.utc=function(t){return this.utcOffset(0,t)},Dt.local=function(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract(L(this),"m")),this},Dt.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var t=N(D.n,this._i);null!=t?this.utcOffset(t):this.utcOffset(0,!0)}return this},Dt.hasAlignedHourOffset=function(t){return!!this.isValid()&&(t=t?Object(i.a)(t).utcOffset():0,(this.utcOffset()-t)%60==0)},Dt.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},Dt.isLocal=function(){return!!this.isValid()&&!this._isUTC},Dt.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},Dt.isUtc=Y,Dt.isUTC=Y,Dt.zoneAbbr=function(){return this._isUTC?"UTC":""},Dt.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},Dt.dates=Object(l.a)("dates accessor is deprecated. Use date instead.",xt),Dt.months=Object(l.a)("months accessor is deprecated. Use month instead",g.e),Dt.years=Object(l.a)("years accessor is deprecated. Use year instead",ht.c),Dt.zone=Object(l.a)("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()})),Dt.isDSTShifted=Object(l.a)("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!Object(A.a)(this._isDSTShifted))return this._isDSTShifted;var t,e={};return Object(s.b)(e,this),(e=Object(P.b)(e))._a?(t=e._isUTC?Object(r.a)(e._a):Object(i.a)(e._a),this._isDSTShifted=this.isValid()&&function(t,e,n){var a,i=Math.min(t.length,e.length),r=Math.abs(t.length-e.length),o=0;for(a=0;a<i;a++)(n&&t[a]!==e[a]||!n&&Object(v.a)(t[a])!==Object(v.a)(e[a]))&&o++;return o+r}(e._a,t.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var Ct=Dt;var Pt=n(38),Tt=n(41),At=n(42),Ft=n(43),It=n(39);function Nt(t){return t}var Rt=n(40),Lt=n(37),Yt=Pt.a.prototype;function Wt(t,e,n,a){var i=Object(p.b)(),o=Object(r.a)().set(a,e);return i[n](o,t)}function Et(t,e,n){if(Object(w.a)(t)&&(e=t,t=void 0),t=t||"",null!=e)return Wt(t,e,n,"month");var a,i=[];for(a=0;a<12;a++)i[a]=Wt(t,a,n,"month");return i}function zt(t,e,n,a){"boolean"==typeof t?(Object(w.a)(e)&&(n=e,e=void 0),e=e||""):(n=e=t,t=!1,Object(w.a)(e)&&(n=e,e=void 0),e=e||"");var i,r=Object(p.b)(),o=t?r._week.dow:0,s=[];if(null!=n)return Wt(e,(n+o)%7,a,"day");for(i=0;i<7;i++)s[i]=Wt(e,(i+o)%7,a,"day");return s}Yt.calendar=Tt.a,Yt.longDateFormat=At.b,Yt.invalidDate=Ft.b,Yt.ordinal=It.c,Yt.preparse=Nt,Yt.postformat=Nt,Yt.relativeTime=Rt.c,Yt.pastFuture=Rt.b,Yt.set=Lt.b,Yt.eras=function(t,e){var n,i,r,o=this._eras||Object(p.b)("en")._eras;for(n=0,i=o.length;n<i;++n){switch(typeof o[n].since){case"string":r=Object(a.a)(o[n].since).startOf("day"),o[n].since=r.valueOf()}switch(typeof o[n].until){case"undefined":o[n].until=1/0;break;case"string":r=Object(a.a)(o[n].until).startOf("day").valueOf(),o[n].until=r.valueOf()}}return o},Yt.erasParse=function(t,e,n){var a,i,r,o,s,l=this.eras();for(t=t.toUpperCase(),a=0,i=l.length;a<i;++a)if(r=l[a].name.toUpperCase(),o=l[a].abbr.toUpperCase(),s=l[a].narrow.toUpperCase(),n)switch(e){case"N":case"NN":case"NNN":if(o===t)return l[a];break;case"NNNN":if(r===t)return l[a];break;case"NNNNN":if(s===t)return l[a]}else if([r,o,s].indexOf(t)>=0)return l[a]},Yt.erasConvertYear=function(t,e){var n=t.since<=t.until?1:-1;return void 0===e?Object(a.a)(t.since).year():Object(a.a)(t.since).year()+(e-t.offset)*n},Yt.erasAbbrRegex=function(t){return Object(b.a)(this,"_erasAbbrRegex")||dt.call(this),t?this._erasAbbrRegex:this._erasRegex},Yt.erasNameRegex=function(t){return Object(b.a)(this,"_erasNameRegex")||dt.call(this),t?this._erasNameRegex:this._erasRegex},Yt.erasNarrowRegex=function(t){return Object(b.a)(this,"_erasNarrowRegex")||dt.call(this),t?this._erasNarrowRegex:this._erasRegex},Yt.months=g.f,Yt.monthsShort=g.h,Yt.monthsParse=g.g,Yt.monthsRegex=g.i,Yt.monthsShortRegex=g.j,Yt.week=yt.f,Yt.firstDayOfYear=yt.e,Yt.firstDayOfWeek=yt.d,Yt.weekdays=_t.g,Yt.weekdaysMin=_t.h,Yt.weekdaysShort=_t.j,Yt.weekdaysParse=_t.i,Yt.weekdaysRegex=_t.l,Yt.weekdaysShortRegex=_t.m,Yt.weekdaysMinRegex=_t.k,Yt.isPM=Ot.c,Yt.meridiem=Ot.d,Object(p.c)("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10;return t+(1===Object(v.a)(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")}}),a.a.lang=Object(l.a)("moment.lang is deprecated. Use moment.locale instead.",p.c),a.a.langData=Object(l.a)("moment.langData is deprecated. Use moment.localeData instead.",p.b);var Vt=Math.abs;function Bt(t,e,n,a){var i=z(e,n);return t._milliseconds+=a*i._milliseconds,t._days+=a*i._days,t._months+=a*i._months,t._bubble()}function Ht(t){return t<0?Math.floor(t):Math.ceil(t)}function Ut(t){return 4800*t/146097}function Gt(t){return 146097*t/4800}function qt(t){return function(){return this.as(t)}}var Zt=qt("ms"),$t=qt("s"),Xt=qt("m"),Kt=qt("h"),Jt=qt("d"),Qt=qt("w"),te=qt("M"),ee=qt("Q"),ne=qt("y");function ae(t){return function(){return this.isValid()?this._data[t]:NaN}}var ie=ae("milliseconds"),re=ae("seconds"),oe=ae("minutes"),se=ae("hours"),le=ae("days"),ce=ae("months"),ue=ae("years");var de=Math.round,he={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function fe(t,e,n,a,i){return i.relativeTime(e||1,!!n,t,a)}var ge=Math.abs;function me(t){return(t>0)-(t<0)||+t}function pe(){if(!this.isValid())return this.localeData().invalidDate();var t,e,n,a,i,r,o,s,l=ge(this._milliseconds)/1e3,c=ge(this._days),u=ge(this._months),d=this.asSeconds();return d?(t=Object(tt.a)(l/60),e=Object(tt.a)(t/60),l%=60,t%=60,n=Object(tt.a)(u/12),u%=12,a=l?l.toFixed(3).replace(/\.?0+$/,""):"",i=d<0?"-":"",r=me(this._months)!==me(d)?"-":"",o=me(this._days)!==me(d)?"-":"",s=me(this._milliseconds)!==me(d)?"-":"",i+"P"+(n?r+n+"Y":"")+(u?r+u+"M":"")+(c?o+c+"D":"")+(e||t||l?"T":"")+(e?s+e+"H":"")+(t?s+t+"M":"")+(l?s+a+"S":"")):"P0D"}var be=_.prototype;be.isValid=function(){return this._isValid},be.abs=function(){var t=this._data;return this._milliseconds=Vt(this._milliseconds),this._days=Vt(this._days),this._months=Vt(this._months),t.milliseconds=Vt(t.milliseconds),t.seconds=Vt(t.seconds),t.minutes=Vt(t.minutes),t.hours=Vt(t.hours),t.months=Vt(t.months),t.years=Vt(t.years),this},be.add=function(t,e){return Bt(this,t,e,1)},be.subtract=function(t,e){return Bt(this,t,e,-1)},be.as=function(t){if(!this.isValid())return NaN;var e,n,a=this._milliseconds;if("month"===(t=Object(m.c)(t))||"quarter"===t||"year"===t)switch(e=this._days+a/864e5,n=this._months+Ut(e),t){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(e=this._days+Math.round(Gt(this._months)),t){case"week":return e/7+a/6048e5;case"day":return e+a/864e5;case"hour":return 24*e+a/36e5;case"minute":return 1440*e+a/6e4;case"second":return 86400*e+a/1e3;case"millisecond":return Math.floor(864e5*e)+a;default:throw new Error("Unknown unit "+t)}},be.asMilliseconds=Zt,be.asSeconds=$t,be.asMinutes=Xt,be.asHours=Kt,be.asDays=Jt,be.asWeeks=Qt,be.asMonths=te,be.asQuarters=ee,be.asYears=ne,be.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*Object(v.a)(this._months/12):NaN},be._bubble=function(){var t,e,n,a,i,r=this._milliseconds,o=this._days,s=this._months,l=this._data;return r>=0&&o>=0&&s>=0||r<=0&&o<=0&&s<=0||(r+=864e5*Ht(Gt(s)+o),o=0,s=0),l.milliseconds=r%1e3,t=Object(tt.a)(r/1e3),l.seconds=t%60,e=Object(tt.a)(t/60),l.minutes=e%60,n=Object(tt.a)(e/60),l.hours=n%24,o+=Object(tt.a)(n/24),s+=i=Object(tt.a)(Ut(o)),o-=Ht(Gt(i)),a=Object(tt.a)(s/12),s%=12,l.days=o,l.months=s,l.years=a,this},be.clone=function(){return z(this)},be.get=function(t){return t=Object(m.c)(t),this.isValid()?this[t+"s"]():NaN},be.milliseconds=ie,be.seconds=re,be.minutes=oe,be.hours=se,be.days=le,be.weeks=function(){return Object(tt.a)(this.days()/7)},be.months=ce,be.years=ue,be.humanize=function(t,e){if(!this.isValid())return this.localeData().invalidDate();var n,a,i=!1,r=he;return"object"==typeof t&&(e=t,t=!1),"boolean"==typeof t&&(i=t),"object"==typeof e&&(r=Object.assign({},he,e),null!=e.s&&null==e.ss&&(r.ss=e.s-1)),a=function(t,e,n,a){var i=z(t).abs(),r=de(i.as("s")),o=de(i.as("m")),s=de(i.as("h")),l=de(i.as("d")),c=de(i.as("M")),u=de(i.as("w")),d=de(i.as("y")),h=r<=n.ss&&["s",r]||r<n.s&&["ss",r]||o<=1&&["m"]||o<n.m&&["mm",o]||s<=1&&["h"]||s<n.h&&["hh",s]||l<=1&&["d"]||l<n.d&&["dd",l];return null!=n.w&&(h=h||u<=1&&["w"]||u<n.w&&["ww",u]),(h=h||c<=1&&["M"]||c<n.M&&["MM",c]||d<=1&&["y"]||["yy",d])[2]=e,h[3]=+t>0,h[4]=a,fe.apply(null,h)}(this,!i,r,n=this.localeData()),i&&(a=n.pastFuture(+this,a)),n.postformat(a)},be.toISOString=pe,be.toString=pe,be.toJSON=pe,be.locale=nt,be.localeData=it,be.toIsoString=Object(l.a)("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",pe),be.lang=at,Object(S.a)("X",0,0,"unix"),Object(S.a)("x",0,0,"valueOf"),Object(D.a)("x",D.p),Object(D.a)("X",D.q),Object(C.a)("X",(function(t,e,n){n._d=new Date(1e3*parseFloat(t))})),Object(C.a)("x",(function(t,e,n){n._d=new Date(Object(v.a)(t))})),
//! moment.js
//! version : 2.25.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
a.a.version="2.25.1",Object(a.b)(i.a),a.a.fn=Ct,a.a.min=function(){var t=[].slice.call(arguments,0);return h("isBefore",t)},a.a.max=function(){var t=[].slice.call(arguments,0);return h("isAfter",t)},a.a.now=function(){return Date.now?Date.now():+new Date},a.a.utc=r.a,a.a.unix=function(t){return Object(i.a)(1e3*t)},a.a.months=function(t,e){return Et(t,e,"months")},a.a.isDate=T.a,a.a.locale=p.c,a.a.invalid=o.a,a.a.duration=z,a.a.isMoment=s.c,a.a.weekdays=function(t,e,n){return zt(t,e,n,"weekdays")},a.a.parseZone=function(){return i.a.apply(null,arguments).parseZone()},a.a.localeData=p.b,a.a.isDuration=O,a.a.monthsShort=function(t,e){return Et(t,e,"monthsShort")},a.a.weekdaysMin=function(t,e,n){return zt(t,e,n,"weekdaysMin")},a.a.defineLocale=p.a,a.a.updateLocale=p.e,a.a.locales=p.d,a.a.weekdaysShort=function(t,e,n){return zt(t,e,n,"weekdaysShort")},a.a.normalizeUnits=m.c,a.a.relativeTimeRounding=function(t){return void 0===t?de:"function"==typeof t&&(de=t,!0)},a.a.relativeTimeThreshold=function(t,e){return void 0!==he[t]&&(void 0===e?he[t]:(he[t]=e,"s"===t&&(he.ss=e-1),!0))},a.a.calendarFormat=function(t,e){var n=t.diff(e,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.a.prototype=Ct,a.a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"};e.default=a.a},function(t,e,n){"use strict";n.r(e),n.d(e,"inputHandler",(function(){return D})),n.d(e,"runBenchmark",(function(){return C}));var a=n(44),i=n.n(a);const r=(t,e)=>({responsive:!1,title:{display:!0,text:t},scales:{xAxes:[{gridLines:{display:!1}}],yAxes:[{scaleLabel:{display:!0,labelString:"Time (ms)"},gridLines:{display:!1},ticks:{beginAtZero:e}}]},elements:{point:{radius:0}}}),o=["rgba(54, 162, 235)","rgba(255, 99, 132)"],s=()=>{const t=document.getElementById("spinner");"none"===t.style.display?t.style.display="inline-block":t.style.display="none"},l=function(){let t=49734321;return function(){return t=t+2127912214+(t<<12)&4294967295,t=4294967295&(3345072700^t^t>>>19),t=t+374761393+(t<<5)&4294967295,t=4294967295&(t+3550635116^t<<9),t=t+4251993797+(t<<3)&4294967295,t=4294967295&(3042594569^t^t>>>16),t}}(),c=function(){return Math.abs(l())};function u(t,e){return{starting:t,numOfEdges:e}}function d(t,e){return{dest:t,weight:e}}function h(t,e){return{r:t*Math.cos(e),i:t*Math.sin(e)}}function f(t,e){const n=t.length,a=new Float64Array(n),i=new Float64Array(n);if(1===n)return a[0]=t[0],i[0]=e[0],{r:a,i:i};const r=n/2,o=new Float64Array(r),s=new Float64Array(r),l=new Float64Array(r),c=new Float64Array(r);for(let n=0;n<r;++n)o[n]=t[2*n],s[n]=e[2*n],l[n]=t[2*n+1],c[n]=e[2*n+1];const u=f(o,s),d=f(l,c),g=u.r,m=u.i,p=d.r,b=d.i;for(let t=0;t<r;++t){const e=h(1,-2*Math.PI*t/n),a=p[t],i=b[t];p[t]=a*e.r-i*e.i,b[t]=a*e.i+i*e.r}for(let t=0;t<r;++t){let e=g[t],n=p[t],o=m[t],s=b[t];a[t]=e+n,i[t]=o+s,a[t+r]=e-n,i[t+r]=o-s}return{r:a,i:i}}function g(t){let e,n;const a=t.length;for(let i=0;i<a;++i)for(let a=0;a<i;++a)e=t[i].r[a],n=t[i].i[a],t[i].r[a]=t[a].r[i],t[i].i[a]=t[a].i[i],t[a].r[i]=e,t[a].i[i]=n}function m(t){const e=new Float64Array(t),n=new Float64Array(t);for(let a=0;a<t;++a)e[a]=2*c()-1,n[a]=2*c()-1;return{r:e,i:n}}function p(t,e,n,a,i){for(let r=0;r<i;++r){const o=e[r]/a[r],s=n[r],l=t[r];for(let t=0;t<i;++t){const e=l[t];s[t]=0===e?0:e*o}}}function b(t,e,n){let a,i,r,o,s=0;const l=new Float64Array(n);for(a=0;a<n;a++){const t=e[a];for(i=0;i<n;i++)l[i]+=t[i]}for(a=0;a<n;a++)o=t[a],r=l[a],r=(1-.85)/n+.85*r,s=Math.abs(r-o)>s?Math.abs(r-o):s,t[a]=r;return s}const v=function(t){const e=new Array(t);for(let n=0;n<t;++n)e[n]=0;return e};const y=new function(){let t=123456789;const e=v(128),n=v(128),a=v(128);function i(){const e=t;let n=t;return n^=n<<13,n^=n>>>17,n^=n<<5,t=n,e+n|0}function r(){return.5*(1+i()/-Math.pow(2,31))}function o(){const t=i(),o=127&t;return Math.abs(t)<a[o]?t*e[o]:function(t,o){const s=3.442619855899,l=1/s;let c,u;for(;;){if(c=t*e[o],0===o){for(c=-Math.log(r())*l,u=-Math.log(r());u+u<c*c;)c=-Math.log(r())*l,u=-Math.log(r());return t>0?s+c:-s-c}if(n[o]+r()*(n[o-1]-n[o])<Math.exp(-.5*c*c))return c;if(o=127&(t=i()),Math.abs(t)<a[o])return t*e[o]}}(t,o)}this.nextGaussian=function(){return o()},function(){const t=2147483648;let i=3.442619855899,r=i;const o=.00991256303526217,s=o/Math.exp(-.5*i*i);a[0]=Math.floor(i/s*t),a[1]=0,e[0]=s/t,e[127]=i/t,n[0]=1,n[127]=Math.exp(-.5*i*i);for(let s=126;s>=1;s--)i=Math.sqrt(-2*Math.log(o/i+Math.exp(-.5*i*i))),a[s+1]=Math.floor(i/r*t),r=i,n[s]=Math.exp(-.5*i*i),e[s]=i/t}()};function x(){const t=c()*(Math.pow(2,32)-1);return Math.floor(t)?Math.floor(t):Math.ceil(t)}function _(t,e){if(t<0||e<0||e<t)return 0;const n=e-t+1;return x()%n+t}function O(){return 1-x()/2147483648*2}function w(t,e,n){const a=t.subarray(e,n).sort();for(let i=e;i<n;++i)t[i]=a[i-e]}function k(t,e,n,a,i,r,o){let s,l,c=0;for(let u=0;u<e;++u){c=r[u],s=n[u],l=n[u+1];for(let e=s;e<l;++e)c+=t[e]*i[a[e]];o[u]=c}}var M={bfs:function(t=5e5){const e=function(t){const e=new Array(t),n=new Uint8Array(t),a=new Uint8Array(t),i=new Uint8Array(t),r=new Uint32Array(t),o=new Array(t);for(let e=0;e<t;++e)o[e]=[];for(let e=0;e<t;++e){const n=Math.abs(l()%3)+2;for(let a=0;a<n;++a){const n=Math.abs(l()%t),a=Math.abs(l()%1)+1;o[e].push(d(n,a)),o[n].push(d(e,a))}}let s=0;for(let r=0;r<t;++r){const t=o[r].length;e[r]=u(s,t),n[r]=!1,a[r]=!1,i[r]=!1,s+=t}n[0]=!0,i[0]=!0;const c=new Array(s);let h=0;for(let e=0;e<t;++e)for(let t=0;t<o[e].length;++t)c[h]=o[e][t].dest,++h;for(let e=0;e<t;++e)r[e]=-1;return r[0]=0,{hGraphNodes:e,hGraphMask:n,hUpdatingGraphMask:a,hGraphVisited:i,hCost:r,hGraphEdges:c}}(t),n=e.hGraphNodes,a=e.hGraphMask,i=e.hUpdatingGraphMask,r=e.hGraphVisited,o=e.hCost,s=e.hGraphEdges;let c;const h=performance.now();do{c=!1;for(let e=0;e<t;++e)if(a[e]){a[e]=!1;const t=o[e],l=n[e],c=l.starting,u=l.numOfEdges+c;for(let e=c;e<u;++e){const n=s[e];r[n]||(o[n]=t+1,i[n]=!0)}}for(let e=0;e<t;++e)i[e]&&(a[e]=!0,r[e]=!0,c=!0,i[e]=!1);0}while(c);return performance.now()-h},fft:function(t=8){if(t<0||t>30)throw new Error("ERROR: invalid exponent of '"+t+"' for input size");const e=function(t){const e=new Array(t);for(let n=0;n<t;++n)e[n]=m(t);return e}(1<<t),n=performance.now();return function(t){const e=t.length,n=new Array(e);for(let a=0;a<e;++a){let e=t[a];n[a]=f(e.r,e.i)}g(n);for(let t=0;t<e;++t){let e=n[t];n[t]=f(e.r,e.i)}g(n)}(e),performance.now()-n},lud:function(t=512){const e=new Float64Array(t*t);!function(t){const e=Math.sqrt(t.length),n=new Float64Array(t.length),a=new Float64Array(t.length);for(let t=0;t<e;++t)for(let a=0;a<e;++a)n[t*e+a]=t>a?c():t===a?1:0;for(let t=0;t<e;++t)for(let n=0;n<e;++n)a[t*e+n]=n>t?0:c();for(let i=0;i<e;++i)for(let r=0;r<e;++r){let o=0;for(let t=0;t<e;t++)o+=n[i*e+t]*a[r*e+t];t[i*e+r]=o}}(e);const n=performance.now();return function(t,e){let n;for(let a=0;a<e;++a){for(let i=a;i<e;++i){n=t[a*e+i];for(let r=0;r<a;++r)n-=t[a*e+r]*t[r*e+i];t[a*e+i]=n}for(let i=a+1;i<e;i++){n=t[i*e+a];for(let r=0;r<a;++r)n-=t[i*e+r]*t[r*e+a];t[i*e+a]=n/t[a*e+a]}}}(e,t),performance.now()-n},pagerank:function(t=1e3,e=10,n=1e-8,a=1e5){const i=new Array(t);let r,o=1/0;const s=new Float64Array(t),c=new Int32Array(t);for(let e=0;e<t;e++)i[e]=new Float64Array(t);const u=function(t,e,n){const a=[];let i;for(let e=0;e<t;e++)a[e]=new Int32Array(t);for(let r=0;r<t;r++){e[r]=0;for(let i=0;i<t;++i)r!==i&&Math.abs(l())%n==0&&(a[r][i]=1,e[r]+=1);if(0===e[r]){do{i=Math.abs(l())%t}while(i===r);a[r][i]=1,e[r]=1}}return a}(t,c,a);for(let e=0;e<t;++e)s[e]=1/t;let d=0;for(let e=0;e<t;++e){const n=u[e];for(let e=0;e<t;++e)d+=n[e]}const h=performance.now();for(r=1;r<=e&&o>=n;++r)p(u,s,i,c,t),o=b(s,i,t);return performance.now()-h},spmv:function(t=25e3,e=1e3,n=.005,a=50){const i=function(t,e,n){let a,i,r;const o={};o.numRows=t,o.numCols=t,o.densityPerc=e/1e4,o.nzPerRow=t*e/1e6,o.numNonZeros=Math.round(o.nzPerRow*t),o.stdev=n*o.nzPerRow,o.aRow=new Uint32Array(o.numRows+1),o.aCol=new Uint32Array(o.numNonZeros),o.aRow[0]=0;const s=2*o.nzPerRow,l=Math.min(o.numCols,s),c=new Int8Array(o.numCols);for(let t=0;t<o.numRows;++t){if(r=y.nextGaussian(),r*=o.stdev,r+=o.nzPerRow,a=r<0?0:r>l?l:Math.abs(Math.round(r)),o.aRow[t+1]=o.aRow[t]+a,o.aRow[t+1]>o.numNonZeros){const e=o.aCol;o.aCol=new Int32Array(o.aRow[t+1]),o.aCol.set(e,0)}for(let t=0;t<o.numCols;++t)c[t]=0;for(let e=0;e<a;++e)i=_(0,o.numCols-1),c[i]?--e:(o.aCol[o.aRow[t]+e]=i,c[i]=1);w(o.aCol,o.aRow[t],o.aRow[t+1])}o.numNonZeros=o.aRow[o.numRows],o.densityPerc=100*o.numNonZeros/(o.numCols*o.numRows),o.densityPpm=Math.round(1e4*o.densityPerc),o.ax=new Float32Array(o.numNonZeros);for(let t=0;t<o.numNonZeros;++t)for(o.ax[t]=O();0===o.ax[t];)o.ax[t]=O();return o}(t,e,n),r=new Float32Array(t),o=new Float32Array(t),s=new Float32Array(t);Array.prototype.forEach.call(r,(function(t,e,n){n[e]=O()}));const l=performance.now();for(let e=0;e<a;++e)k(i.ax,t,i.aRow,i.aCol,r,o,s);return performance.now()-l}},j=n(47);let S;const D=t=>{t.target.value?document.getElementById("iterations").classList.remove("is-invalid"):document.getElementById("iterations").classList.add("is-invalid")},C=()=>{if(!S)return;const t=document.getElementById("selectedOption").value,e=document.getElementById("iterations").value,n=document.getElementById("bar-graph");if(n.width=0,n.height=0,!t||!e)return;const a=(t=>"Breadth First Search"===t?"bfs":"Fast Fourier Transform"===t?"fft":"Lower Upper Decomposition"===t?"lud":"Page Rank"===t?"pagerank":"spmv")(t);s(),setTimeout(()=>{const n=((t,e,n)=>{const a=[],i=[];for(let r=0;r<n;r++){console.log("Iteration number: "+r);const n=M[t](),o=e.instance.exports[t]();a.push(n),i.push(o)}return{js:a,as:i}})(a,S,e),l=[n.as,n.js];s();const c=l.map(t=>{return e=t,Object(j.mean)(e);var e});((t,e,n)=>{const a=document.getElementById("bar-graph");a.width=500,a.height=500,new i.a(a,{type:"bar",data:{labels:e,datasets:[{label:"Assemblyscript",data:n.slice(0,n.length/2),backgroundColor:"rgba(54, 162, 235)",borderColor:"rgba(54, 162, 235)",fill:!0},{label:"Javascript",data:n.slice(n.length/2),backgroundColor:"rgba(255, 99, 132)",borderColor:"rgba(255, 99, 132)",fill:!0}]},options:r(t,!0)})})("Average Runtime",[t],c);((t,e,n,a)=>{const s=document.getElementById("line-graph");s.width=500,s.height=500;const l=Array.from(Array(parseInt(a)).keys()),c=n.map((t,n)=>({label:e[n],data:t,backgroundColor:o[n],borderColor:o[n],fill:!1}));new i.a(s,{type:"line",data:{labels:l,datasets:c},options:r(t,!1)})})(t,["AssemblyScript","Javascript"],l,e)},10)};(async()=>{const t={env:{abort(t,e,n,a){console.error(`Abort called at ${e}:${n}:${a}`)}},common:{consoleLog(t){console.log(t)},performanceNow:()=>performance.now()}};try{const e=fetch("build/optimized.wasm");S="function"==typeof WebAssembly.instantiateStreaming?await WebAssembly.instantiateStreaming(e,t):await WebAssembly.instantiate(await(await e).arrayBuffer(),t)}catch(t){console.error("Can't instantiate WebAssembly module.\n",t)}})()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,